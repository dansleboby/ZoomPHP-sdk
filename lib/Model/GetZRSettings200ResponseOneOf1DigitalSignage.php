<?php
/**
 * GetZRSettings200ResponseOneOf1DigitalSignage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * GetZRSettings200ResponseOneOf1DigitalSignage Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetZRSettings200ResponseOneOf1DigitalSignage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getZRSettings_200_response_oneOf_1_digital_signage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'banner' => '\Zoom\Api\Model\GetZRAccountSettings200ResponseOneOf1DigitalSignageBanner',
        'display_period' => '\Zoom\Api\Model\GetZRLocationSettings200ResponseOneOf1DigitalSignageDisplayPeriod',
        'enable_digital_signage' => 'bool',
        'layout' => 'string',
        'mute' => 'bool',
        'play_list' => '\Zoom\Api\Model\GetZRSettings200ResponseOneOf1DigitalSignagePlayListInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'banner' => null,
        'display_period' => null,
        'enable_digital_signage' => null,
        'layout' => null,
        'mute' => null,
        'play_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'banner' => 'banner',
        'display_period' => 'display_period',
        'enable_digital_signage' => 'enable_digital_signage',
        'layout' => 'layout',
        'mute' => 'mute',
        'play_list' => 'play_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'banner' => 'setBanner',
        'display_period' => 'setDisplayPeriod',
        'enable_digital_signage' => 'setEnableDigitalSignage',
        'layout' => 'setLayout',
        'mute' => 'setMute',
        'play_list' => 'setPlayList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'banner' => 'getBanner',
        'display_period' => 'getDisplayPeriod',
        'enable_digital_signage' => 'getEnableDigitalSignage',
        'layout' => 'getLayout',
        'mute' => 'getMute',
        'play_list' => 'getPlayList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['banner'] = $data['banner'] ?? null;
        $this->container['display_period'] = $data['display_period'] ?? null;
        $this->container['enable_digital_signage'] = $data['enable_digital_signage'] ?? null;
        $this->container['layout'] = $data['layout'] ?? null;
        $this->container['mute'] = $data['mute'] ?? null;
        $this->container['play_list'] = $data['play_list'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['play_list']) && (count($this->container['play_list']) > 2)) {
            $invalidProperties[] = "invalid value for 'play_list', number of items must be less than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets banner
     *
     * @return \Zoom\Api\Model\GetZRAccountSettings200ResponseOneOf1DigitalSignageBanner|null
     */
    public function getBanner()
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param \Zoom\Api\Model\GetZRAccountSettings200ResponseOneOf1DigitalSignageBanner|null $banner banner
     *
     * @return self
     */
    public function setBanner($banner)
    {
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets display_period
     *
     * @return \Zoom\Api\Model\GetZRLocationSettings200ResponseOneOf1DigitalSignageDisplayPeriod|null
     */
    public function getDisplayPeriod()
    {
        return $this->container['display_period'];
    }

    /**
     * Sets display_period
     *
     * @param \Zoom\Api\Model\GetZRLocationSettings200ResponseOneOf1DigitalSignageDisplayPeriod|null $display_period display_period
     *
     * @return self
     */
    public function setDisplayPeriod($display_period)
    {
        $this->container['display_period'] = $display_period;

        return $this;
    }

    /**
     * Gets enable_digital_signage
     *
     * @return bool|null
     */
    public function getEnableDigitalSignage()
    {
        return $this->container['enable_digital_signage'];
    }

    /**
     * Sets enable_digital_signage
     *
     * @param bool|null $enable_digital_signage [Indicates whether digital signage is on or off,](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage#h_767fbb33-82a8-45a8-8392-a1bfa9687edd). <br> `true`: enable<br> `false`: disable
     *
     * @return self
     */
    public function setEnableDigitalSignage($enable_digital_signage)
    {
        $this->container['enable_digital_signage'] = $enable_digital_signage;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return string|null
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param string|null $layout Set the [layout](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage#h_4e25ddf3-8f97-4957-8f8b-99725f940fa7). The value of this field can be either `standard` or `video_content`.  `standard`: Standard Center<br> `video_content`: Video + Content
     *
     * @return self
     */
    public function setLayout($layout)
    {
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets mute
     *
     * @return bool|null
     */
    public function getMute()
    {
        return $this->container['mute'];
    }

    /**
     * Sets mute
     *
     * @param bool|null $mute Sound of all contents will be muted if the value of this field is set to `true`.
     *
     * @return self
     */
    public function setMute($mute)
    {
        $this->container['mute'] = $mute;

        return $this;
    }

    /**
     * Gets play_list
     *
     * @return \Zoom\Api\Model\GetZRSettings200ResponseOneOf1DigitalSignagePlayListInner[]|null
     */
    public function getPlayList()
    {
        return $this->container['play_list'];
    }

    /**
     * Sets play_list
     *
     * @param \Zoom\Api\Model\GetZRSettings200ResponseOneOf1DigitalSignagePlayListInner[]|null $play_list Content list.
     *
     * @return self
     */
    public function setPlayList($play_list)
    {

        if (!is_null($play_list) && (count($play_list) > 2)) {
            throw new \InvalidArgumentException('invalid value for $play_list when calling GetZRSettings200ResponseOneOf1DigitalSignage., number of items must be less than or equal to 2.');
        }
        $this->container['play_list'] = $play_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


