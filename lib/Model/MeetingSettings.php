<?php
/**
 * MeetingSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MeetingSettings Class Doc Comment
 *
 * @category Class
 * @description Meeting settings.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MeetingSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MeetingSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_multiple_devices' => 'bool',
        'alternative_hosts' => 'string',
        'alternative_hosts_email_notification' => 'bool',
        'alternative_host_update_polls' => 'bool',
        'approval_type' => 'int',
        'approved_or_denied_countries_or_regions' => '\OpenAPI\Client\Model\MeetingSettingsApprovedOrDeniedCountriesOrRegions',
        'audio' => 'string',
        'authentication_domains' => 'string',
        'authentication_exception' => '\OpenAPI\Client\Model\MeetingSettingsAuthenticationExceptionInner[]',
        'authentication_name' => 'string',
        'authentication_option' => 'string',
        'auto_recording' => 'string',
        'breakout_room' => '\OpenAPI\Client\Model\MeetingSettingsBreakoutRoom',
        'calendar_type' => 'int',
        'close_registration' => 'bool',
        'cn_meeting' => 'bool',
        'contact_email' => 'string',
        'contact_name' => 'string',
        'custom_keys' => '\OpenAPI\Client\Model\MeetingSettingsCustomKeysInner[]',
        'email_notification' => 'bool',
        'encryption_type' => 'string',
        'enforce_login' => 'bool',
        'enforce_login_domains' => 'string',
        'focus_mode' => 'bool',
        'global_dial_in_countries' => 'string[]',
        'global_dial_in_numbers' => '\OpenAPI\Client\Model\MeetingSettingsGlobalDialInNumbersInner[]',
        'host_video' => 'bool',
        'in_meeting' => 'bool',
        'jbh_time' => 'int',
        'join_before_host' => 'bool',
        'language_interpretation' => '\OpenAPI\Client\Model\MeetingCreateSettingsLanguageInterpretation',
        'meeting_authentication' => 'bool',
        'mute_upon_entry' => 'bool',
        'participant_video' => 'bool',
        'private_meeting' => 'bool',
        'registrants_confirmation_email' => 'bool',
        'registrants_email_notification' => 'bool',
        'registration_type' => 'int',
        'show_share_button' => 'bool',
        'use_pmi' => 'bool',
        'waiting_room' => 'bool',
        'watermark' => 'bool',
        'host_save_video_order' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_multiple_devices' => null,
        'alternative_hosts' => null,
        'alternative_hosts_email_notification' => null,
        'alternative_host_update_polls' => null,
        'approval_type' => null,
        'approved_or_denied_countries_or_regions' => null,
        'audio' => null,
        'authentication_domains' => null,
        'authentication_exception' => null,
        'authentication_name' => null,
        'authentication_option' => null,
        'auto_recording' => null,
        'breakout_room' => null,
        'calendar_type' => null,
        'close_registration' => null,
        'cn_meeting' => null,
        'contact_email' => null,
        'contact_name' => null,
        'custom_keys' => null,
        'email_notification' => null,
        'encryption_type' => null,
        'enforce_login' => null,
        'enforce_login_domains' => null,
        'focus_mode' => null,
        'global_dial_in_countries' => null,
        'global_dial_in_numbers' => null,
        'host_video' => null,
        'in_meeting' => null,
        'jbh_time' => null,
        'join_before_host' => null,
        'language_interpretation' => null,
        'meeting_authentication' => null,
        'mute_upon_entry' => null,
        'participant_video' => null,
        'private_meeting' => null,
        'registrants_confirmation_email' => null,
        'registrants_email_notification' => null,
        'registration_type' => null,
        'show_share_button' => null,
        'use_pmi' => null,
        'waiting_room' => null,
        'watermark' => null,
        'host_save_video_order' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_multiple_devices' => 'allow_multiple_devices',
        'alternative_hosts' => 'alternative_hosts',
        'alternative_hosts_email_notification' => 'alternative_hosts_email_notification',
        'alternative_host_update_polls' => 'alternative_host_update_polls',
        'approval_type' => 'approval_type',
        'approved_or_denied_countries_or_regions' => 'approved_or_denied_countries_or_regions',
        'audio' => 'audio',
        'authentication_domains' => 'authentication_domains',
        'authentication_exception' => 'authentication_exception',
        'authentication_name' => 'authentication_name',
        'authentication_option' => 'authentication_option',
        'auto_recording' => 'auto_recording',
        'breakout_room' => 'breakout_room',
        'calendar_type' => 'calendar_type',
        'close_registration' => 'close_registration',
        'cn_meeting' => 'cn_meeting',
        'contact_email' => 'contact_email',
        'contact_name' => 'contact_name',
        'custom_keys' => 'custom_keys',
        'email_notification' => 'email_notification',
        'encryption_type' => 'encryption_type',
        'enforce_login' => 'enforce_login',
        'enforce_login_domains' => 'enforce_login_domains',
        'focus_mode' => 'focus_mode',
        'global_dial_in_countries' => 'global_dial_in_countries',
        'global_dial_in_numbers' => 'global_dial_in_numbers',
        'host_video' => 'host_video',
        'in_meeting' => 'in_meeting',
        'jbh_time' => 'jbh_time',
        'join_before_host' => 'join_before_host',
        'language_interpretation' => 'language_interpretation',
        'meeting_authentication' => 'meeting_authentication',
        'mute_upon_entry' => 'mute_upon_entry',
        'participant_video' => 'participant_video',
        'private_meeting' => 'private_meeting',
        'registrants_confirmation_email' => 'registrants_confirmation_email',
        'registrants_email_notification' => 'registrants_email_notification',
        'registration_type' => 'registration_type',
        'show_share_button' => 'show_share_button',
        'use_pmi' => 'use_pmi',
        'waiting_room' => 'waiting_room',
        'watermark' => 'watermark',
        'host_save_video_order' => 'host_save_video_order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_multiple_devices' => 'setAllowMultipleDevices',
        'alternative_hosts' => 'setAlternativeHosts',
        'alternative_hosts_email_notification' => 'setAlternativeHostsEmailNotification',
        'alternative_host_update_polls' => 'setAlternativeHostUpdatePolls',
        'approval_type' => 'setApprovalType',
        'approved_or_denied_countries_or_regions' => 'setApprovedOrDeniedCountriesOrRegions',
        'audio' => 'setAudio',
        'authentication_domains' => 'setAuthenticationDomains',
        'authentication_exception' => 'setAuthenticationException',
        'authentication_name' => 'setAuthenticationName',
        'authentication_option' => 'setAuthenticationOption',
        'auto_recording' => 'setAutoRecording',
        'breakout_room' => 'setBreakoutRoom',
        'calendar_type' => 'setCalendarType',
        'close_registration' => 'setCloseRegistration',
        'cn_meeting' => 'setCnMeeting',
        'contact_email' => 'setContactEmail',
        'contact_name' => 'setContactName',
        'custom_keys' => 'setCustomKeys',
        'email_notification' => 'setEmailNotification',
        'encryption_type' => 'setEncryptionType',
        'enforce_login' => 'setEnforceLogin',
        'enforce_login_domains' => 'setEnforceLoginDomains',
        'focus_mode' => 'setFocusMode',
        'global_dial_in_countries' => 'setGlobalDialInCountries',
        'global_dial_in_numbers' => 'setGlobalDialInNumbers',
        'host_video' => 'setHostVideo',
        'in_meeting' => 'setInMeeting',
        'jbh_time' => 'setJbhTime',
        'join_before_host' => 'setJoinBeforeHost',
        'language_interpretation' => 'setLanguageInterpretation',
        'meeting_authentication' => 'setMeetingAuthentication',
        'mute_upon_entry' => 'setMuteUponEntry',
        'participant_video' => 'setParticipantVideo',
        'private_meeting' => 'setPrivateMeeting',
        'registrants_confirmation_email' => 'setRegistrantsConfirmationEmail',
        'registrants_email_notification' => 'setRegistrantsEmailNotification',
        'registration_type' => 'setRegistrationType',
        'show_share_button' => 'setShowShareButton',
        'use_pmi' => 'setUsePmi',
        'waiting_room' => 'setWaitingRoom',
        'watermark' => 'setWatermark',
        'host_save_video_order' => 'setHostSaveVideoOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_multiple_devices' => 'getAllowMultipleDevices',
        'alternative_hosts' => 'getAlternativeHosts',
        'alternative_hosts_email_notification' => 'getAlternativeHostsEmailNotification',
        'alternative_host_update_polls' => 'getAlternativeHostUpdatePolls',
        'approval_type' => 'getApprovalType',
        'approved_or_denied_countries_or_regions' => 'getApprovedOrDeniedCountriesOrRegions',
        'audio' => 'getAudio',
        'authentication_domains' => 'getAuthenticationDomains',
        'authentication_exception' => 'getAuthenticationException',
        'authentication_name' => 'getAuthenticationName',
        'authentication_option' => 'getAuthenticationOption',
        'auto_recording' => 'getAutoRecording',
        'breakout_room' => 'getBreakoutRoom',
        'calendar_type' => 'getCalendarType',
        'close_registration' => 'getCloseRegistration',
        'cn_meeting' => 'getCnMeeting',
        'contact_email' => 'getContactEmail',
        'contact_name' => 'getContactName',
        'custom_keys' => 'getCustomKeys',
        'email_notification' => 'getEmailNotification',
        'encryption_type' => 'getEncryptionType',
        'enforce_login' => 'getEnforceLogin',
        'enforce_login_domains' => 'getEnforceLoginDomains',
        'focus_mode' => 'getFocusMode',
        'global_dial_in_countries' => 'getGlobalDialInCountries',
        'global_dial_in_numbers' => 'getGlobalDialInNumbers',
        'host_video' => 'getHostVideo',
        'in_meeting' => 'getInMeeting',
        'jbh_time' => 'getJbhTime',
        'join_before_host' => 'getJoinBeforeHost',
        'language_interpretation' => 'getLanguageInterpretation',
        'meeting_authentication' => 'getMeetingAuthentication',
        'mute_upon_entry' => 'getMuteUponEntry',
        'participant_video' => 'getParticipantVideo',
        'private_meeting' => 'getPrivateMeeting',
        'registrants_confirmation_email' => 'getRegistrantsConfirmationEmail',
        'registrants_email_notification' => 'getRegistrantsEmailNotification',
        'registration_type' => 'getRegistrationType',
        'show_share_button' => 'getShowShareButton',
        'use_pmi' => 'getUsePmi',
        'waiting_room' => 'getWaitingRoom',
        'watermark' => 'getWatermark',
        'host_save_video_order' => 'getHostSaveVideoOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const APPROVAL_TYPE_0 = 0;
    public const APPROVAL_TYPE_1 = 1;
    public const APPROVAL_TYPE_2 = 2;
    public const AUDIO_BOTH = 'both';
    public const AUDIO_TELEPHONY = 'telephony';
    public const AUDIO_VOIP = 'voip';
    public const AUTO_RECORDING_LOCAL = 'local';
    public const AUTO_RECORDING_CLOUD = 'cloud';
    public const AUTO_RECORDING_NONE = 'none';
    public const CALENDAR_TYPE_1 = 1;
    public const CALENDAR_TYPE_2 = 2;
    public const ENCRYPTION_TYPE_ENHANCED_ENCRYPTION = 'enhanced_encryption';
    public const ENCRYPTION_TYPE_E2EE = 'e2ee';
    public const JBH_TIME_0 = 0;
    public const JBH_TIME_5 = 5;
    public const JBH_TIME_10 = 10;
    public const REGISTRATION_TYPE_1 = 1;
    public const REGISTRATION_TYPE_2 = 2;
    public const REGISTRATION_TYPE_3 = 3;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApprovalTypeAllowableValues()
    {
        return [
            self::APPROVAL_TYPE_0,
            self::APPROVAL_TYPE_1,
            self::APPROVAL_TYPE_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAudioAllowableValues()
    {
        return [
            self::AUDIO_BOTH,
            self::AUDIO_TELEPHONY,
            self::AUDIO_VOIP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoRecordingAllowableValues()
    {
        return [
            self::AUTO_RECORDING_LOCAL,
            self::AUTO_RECORDING_CLOUD,
            self::AUTO_RECORDING_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCalendarTypeAllowableValues()
    {
        return [
            self::CALENDAR_TYPE_1,
            self::CALENDAR_TYPE_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncryptionTypeAllowableValues()
    {
        return [
            self::ENCRYPTION_TYPE_ENHANCED_ENCRYPTION,
            self::ENCRYPTION_TYPE_E2EE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJbhTimeAllowableValues()
    {
        return [
            self::JBH_TIME_0,
            self::JBH_TIME_5,
            self::JBH_TIME_10,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegistrationTypeAllowableValues()
    {
        return [
            self::REGISTRATION_TYPE_1,
            self::REGISTRATION_TYPE_2,
            self::REGISTRATION_TYPE_3,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_multiple_devices'] = $data['allow_multiple_devices'] ?? null;
        $this->container['alternative_hosts'] = $data['alternative_hosts'] ?? null;
        $this->container['alternative_hosts_email_notification'] = $data['alternative_hosts_email_notification'] ?? true;
        $this->container['alternative_host_update_polls'] = $data['alternative_host_update_polls'] ?? null;
        $this->container['approval_type'] = $data['approval_type'] ?? self::APPROVAL_TYPE_2;
        $this->container['approved_or_denied_countries_or_regions'] = $data['approved_or_denied_countries_or_regions'] ?? null;
        $this->container['audio'] = $data['audio'] ?? 'both';
        $this->container['authentication_domains'] = $data['authentication_domains'] ?? null;
        $this->container['authentication_exception'] = $data['authentication_exception'] ?? null;
        $this->container['authentication_name'] = $data['authentication_name'] ?? null;
        $this->container['authentication_option'] = $data['authentication_option'] ?? null;
        $this->container['auto_recording'] = $data['auto_recording'] ?? 'none';
        $this->container['breakout_room'] = $data['breakout_room'] ?? null;
        $this->container['calendar_type'] = $data['calendar_type'] ?? null;
        $this->container['close_registration'] = $data['close_registration'] ?? false;
        $this->container['cn_meeting'] = $data['cn_meeting'] ?? false;
        $this->container['contact_email'] = $data['contact_email'] ?? null;
        $this->container['contact_name'] = $data['contact_name'] ?? null;
        $this->container['custom_keys'] = $data['custom_keys'] ?? null;
        $this->container['email_notification'] = $data['email_notification'] ?? true;
        $this->container['encryption_type'] = $data['encryption_type'] ?? null;
        $this->container['enforce_login'] = $data['enforce_login'] ?? null;
        $this->container['enforce_login_domains'] = $data['enforce_login_domains'] ?? null;
        $this->container['focus_mode'] = $data['focus_mode'] ?? null;
        $this->container['global_dial_in_countries'] = $data['global_dial_in_countries'] ?? null;
        $this->container['global_dial_in_numbers'] = $data['global_dial_in_numbers'] ?? null;
        $this->container['host_video'] = $data['host_video'] ?? null;
        $this->container['in_meeting'] = $data['in_meeting'] ?? false;
        $this->container['jbh_time'] = $data['jbh_time'] ?? null;
        $this->container['join_before_host'] = $data['join_before_host'] ?? false;
        $this->container['language_interpretation'] = $data['language_interpretation'] ?? null;
        $this->container['meeting_authentication'] = $data['meeting_authentication'] ?? null;
        $this->container['mute_upon_entry'] = $data['mute_upon_entry'] ?? false;
        $this->container['participant_video'] = $data['participant_video'] ?? null;
        $this->container['private_meeting'] = $data['private_meeting'] ?? null;
        $this->container['registrants_confirmation_email'] = $data['registrants_confirmation_email'] ?? null;
        $this->container['registrants_email_notification'] = $data['registrants_email_notification'] ?? null;
        $this->container['registration_type'] = $data['registration_type'] ?? self::REGISTRATION_TYPE_1;
        $this->container['show_share_button'] = $data['show_share_button'] ?? null;
        $this->container['use_pmi'] = $data['use_pmi'] ?? false;
        $this->container['waiting_room'] = $data['waiting_room'] ?? false;
        $this->container['watermark'] = $data['watermark'] ?? false;
        $this->container['host_save_video_order'] = $data['host_save_video_order'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getApprovalTypeAllowableValues();
        if (!is_null($this->container['approval_type']) && !in_array($this->container['approval_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'approval_type', must be one of '%s'",
                $this->container['approval_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAudioAllowableValues();
        if (!is_null($this->container['audio']) && !in_array($this->container['audio'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'audio', must be one of '%s'",
                $this->container['audio'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoRecordingAllowableValues();
        if (!is_null($this->container['auto_recording']) && !in_array($this->container['auto_recording'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_recording', must be one of '%s'",
                $this->container['auto_recording'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCalendarTypeAllowableValues();
        if (!is_null($this->container['calendar_type']) && !in_array($this->container['calendar_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'calendar_type', must be one of '%s'",
                $this->container['calendar_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['custom_keys']) && (count($this->container['custom_keys']) > 10)) {
            $invalidProperties[] = "invalid value for 'custom_keys', number of items must be less than or equal to 10.";
        }

        $allowedValues = $this->getEncryptionTypeAllowableValues();
        if (!is_null($this->container['encryption_type']) && !in_array($this->container['encryption_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'encryption_type', must be one of '%s'",
                $this->container['encryption_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJbhTimeAllowableValues();
        if (!is_null($this->container['jbh_time']) && !in_array($this->container['jbh_time'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'jbh_time', must be one of '%s'",
                $this->container['jbh_time'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRegistrationTypeAllowableValues();
        if (!is_null($this->container['registration_type']) && !in_array($this->container['registration_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'registration_type', must be one of '%s'",
                $this->container['registration_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_multiple_devices
     *
     * @return bool|null
     */
    public function getAllowMultipleDevices()
    {
        return $this->container['allow_multiple_devices'];
    }

    /**
     * Sets allow_multiple_devices
     *
     * @param bool|null $allow_multiple_devices Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
     *
     * @return self
     */
    public function setAllowMultipleDevices($allow_multiple_devices)
    {
        $this->container['allow_multiple_devices'] = $allow_multiple_devices;

        return $this;
    }

    /**
     * Gets alternative_hosts
     *
     * @return string|null
     */
    public function getAlternativeHosts()
    {
        return $this->container['alternative_hosts'];
    }

    /**
     * Sets alternative_hosts
     *
     * @param string|null $alternative_hosts A semicolon-separated list of the meeting's alternative hosts' email addresses or IDs.
     *
     * @return self
     */
    public function setAlternativeHosts($alternative_hosts)
    {
        $this->container['alternative_hosts'] = $alternative_hosts;

        return $this;
    }

    /**
     * Gets alternative_hosts_email_notification
     *
     * @return bool|null
     */
    public function getAlternativeHostsEmailNotification()
    {
        return $this->container['alternative_hosts_email_notification'];
    }

    /**
     * Sets alternative_hosts_email_notification
     *
     * @param bool|null $alternative_hosts_email_notification Flag to determine whether to send email notifications to alternative hosts, default value is true.
     *
     * @return self
     */
    public function setAlternativeHostsEmailNotification($alternative_hosts_email_notification)
    {
        $this->container['alternative_hosts_email_notification'] = $alternative_hosts_email_notification;

        return $this;
    }

    /**
     * Gets alternative_host_update_polls
     *
     * @return bool|null
     */
    public function getAlternativeHostUpdatePolls()
    {
        return $this->container['alternative_host_update_polls'];
    }

    /**
     * Sets alternative_host_update_polls
     *
     * @param bool|null $alternative_host_update_polls Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
     *
     * @return self
     */
    public function setAlternativeHostUpdatePolls($alternative_host_update_polls)
    {
        $this->container['alternative_host_update_polls'] = $alternative_host_update_polls;

        return $this;
    }

    /**
     * Gets approval_type
     *
     * @return int|null
     */
    public function getApprovalType()
    {
        return $this->container['approval_type'];
    }

    /**
     * Sets approval_type
     *
     * @param int|null $approval_type Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>  `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
     *
     * @return self
     */
    public function setApprovalType($approval_type)
    {
        $allowedValues = $this->getApprovalTypeAllowableValues();
        if (!is_null($approval_type) && !in_array($approval_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'approval_type', must be one of '%s'",
                    $approval_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['approval_type'] = $approval_type;

        return $this;
    }

    /**
     * Gets approved_or_denied_countries_or_regions
     *
     * @return \OpenAPI\Client\Model\MeetingSettingsApprovedOrDeniedCountriesOrRegions|null
     */
    public function getApprovedOrDeniedCountriesOrRegions()
    {
        return $this->container['approved_or_denied_countries_or_regions'];
    }

    /**
     * Sets approved_or_denied_countries_or_regions
     *
     * @param \OpenAPI\Client\Model\MeetingSettingsApprovedOrDeniedCountriesOrRegions|null $approved_or_denied_countries_or_regions approved_or_denied_countries_or_regions
     *
     * @return self
     */
    public function setApprovedOrDeniedCountriesOrRegions($approved_or_denied_countries_or_regions)
    {
        $this->container['approved_or_denied_countries_or_regions'] = $approved_or_denied_countries_or_regions;

        return $this;
    }

    /**
     * Gets audio
     *
     * @return string|null
     */
    public function getAudio()
    {
        return $this->container['audio'];
    }

    /**
     * Sets audio
     *
     * @param string|null $audio Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
     *
     * @return self
     */
    public function setAudio($audio)
    {
        $allowedValues = $this->getAudioAllowableValues();
        if (!is_null($audio) && !in_array($audio, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'audio', must be one of '%s'",
                    $audio,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['audio'] = $audio;

        return $this;
    }

    /**
     * Gets authentication_domains
     *
     * @return string|null
     */
    public function getAuthenticationDomains()
    {
        return $this->container['authentication_domains'];
    }

    /**
     * Sets authentication_domains
     *
     * @param string|null $authentication_domains If user has configured [\"Sign Into Zoom with Specified Domains\"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
     *
     * @return self
     */
    public function setAuthenticationDomains($authentication_domains)
    {
        $this->container['authentication_domains'] = $authentication_domains;

        return $this;
    }

    /**
     * Gets authentication_exception
     *
     * @return \OpenAPI\Client\Model\MeetingSettingsAuthenticationExceptionInner[]|null
     */
    public function getAuthenticationException()
    {
        return $this->container['authentication_exception'];
    }

    /**
     * Sets authentication_exception
     *
     * @param \OpenAPI\Client\Model\MeetingSettingsAuthenticationExceptionInner[]|null $authentication_exception The participants added here will receive unique meeting invite links and bypass authentication.
     *
     * @return self
     */
    public function setAuthenticationException($authentication_exception)
    {
        $this->container['authentication_exception'] = $authentication_exception;

        return $this;
    }

    /**
     * Gets authentication_name
     *
     * @return string|null
     */
    public function getAuthenticationName()
    {
        return $this->container['authentication_name'];
    }

    /**
     * Sets authentication_name
     *
     * @param string|null $authentication_name Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
     *
     * @return self
     */
    public function setAuthenticationName($authentication_name)
    {
        $this->container['authentication_name'] = $authentication_name;

        return $this;
    }

    /**
     * Gets authentication_option
     *
     * @return string|null
     */
    public function getAuthenticationOption()
    {
        return $this->container['authentication_option'];
    }

    /**
     * Sets authentication_option
     *
     * @param string|null $authentication_option Meeting authentication option id.
     *
     * @return self
     */
    public function setAuthenticationOption($authentication_option)
    {
        $this->container['authentication_option'] = $authentication_option;

        return $this;
    }

    /**
     * Gets auto_recording
     *
     * @return string|null
     */
    public function getAutoRecording()
    {
        return $this->container['auto_recording'];
    }

    /**
     * Sets auto_recording
     *
     * @param string|null $auto_recording Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
     *
     * @return self
     */
    public function setAutoRecording($auto_recording)
    {
        $allowedValues = $this->getAutoRecordingAllowableValues();
        if (!is_null($auto_recording) && !in_array($auto_recording, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_recording', must be one of '%s'",
                    $auto_recording,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_recording'] = $auto_recording;

        return $this;
    }

    /**
     * Gets breakout_room
     *
     * @return \OpenAPI\Client\Model\MeetingSettingsBreakoutRoom|null
     */
    public function getBreakoutRoom()
    {
        return $this->container['breakout_room'];
    }

    /**
     * Sets breakout_room
     *
     * @param \OpenAPI\Client\Model\MeetingSettingsBreakoutRoom|null $breakout_room breakout_room
     *
     * @return self
     */
    public function setBreakoutRoom($breakout_room)
    {
        $this->container['breakout_room'] = $breakout_room;

        return $this;
    }

    /**
     * Gets calendar_type
     *
     * @return int|null
     */
    public function getCalendarType()
    {
        return $this->container['calendar_type'];
    }

    /**
     * Sets calendar_type
     *
     * @param int|null $calendar_type Indicates the type of calendar integration used to schedule the meeting:  * `1` — [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)  * `2` — [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)  Works with the `private_meeting` field to determine whether to share details of meetings or not.
     *
     * @return self
     */
    public function setCalendarType($calendar_type)
    {
        $allowedValues = $this->getCalendarTypeAllowableValues();
        if (!is_null($calendar_type) && !in_array($calendar_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'calendar_type', must be one of '%s'",
                    $calendar_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['calendar_type'] = $calendar_type;

        return $this;
    }

    /**
     * Gets close_registration
     *
     * @return bool|null
     */
    public function getCloseRegistration()
    {
        return $this->container['close_registration'];
    }

    /**
     * Sets close_registration
     *
     * @param bool|null $close_registration Close registration after event date
     *
     * @return self
     */
    public function setCloseRegistration($close_registration)
    {
        $this->container['close_registration'] = $close_registration;

        return $this;
    }

    /**
     * Gets cn_meeting
     *
     * @return bool|null
     * @deprecated
     */
    public function getCnMeeting()
    {
        return $this->container['cn_meeting'];
    }

    /**
     * Sets cn_meeting
     *
     * @param bool|null $cn_meeting Host meeting in China.
     *
     * @return self
     * @deprecated
     */
    public function setCnMeeting($cn_meeting)
    {
        $this->container['cn_meeting'] = $cn_meeting;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email Contact email for registration
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name Contact name for registration
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets custom_keys
     *
     * @return \OpenAPI\Client\Model\MeetingSettingsCustomKeysInner[]|null
     */
    public function getCustomKeys()
    {
        return $this->container['custom_keys'];
    }

    /**
     * Sets custom_keys
     *
     * @param \OpenAPI\Client\Model\MeetingSettingsCustomKeysInner[]|null $custom_keys Custom keys and values assigned to the meeting.
     *
     * @return self
     */
    public function setCustomKeys($custom_keys)
    {

        if (!is_null($custom_keys) && (count($custom_keys) > 10)) {
            throw new \InvalidArgumentException('invalid value for $custom_keys when calling MeetingSettings., number of items must be less than or equal to 10.');
        }
        $this->container['custom_keys'] = $custom_keys;

        return $this;
    }

    /**
     * Gets email_notification
     *
     * @return bool|null
     */
    public function getEmailNotification()
    {
        return $this->container['email_notification'];
    }

    /**
     * Sets email_notification
     *
     * @param bool|null $email_notification Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to `true`.
     *
     * @return self
     */
    public function setEmailNotification($email_notification)
    {
        $this->container['email_notification'] = $email_notification;

        return $this;
    }

    /**
     * Gets encryption_type
     *
     * @return string|null
     */
    public function getEncryptionType()
    {
        return $this->container['encryption_type'];
    }

    /**
     * Sets encryption_type
     *
     * @param string|null $encryption_type Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br> `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>  `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
     *
     * @return self
     */
    public function setEncryptionType($encryption_type)
    {
        $allowedValues = $this->getEncryptionTypeAllowableValues();
        if (!is_null($encryption_type) && !in_array($encryption_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'encryption_type', must be one of '%s'",
                    $encryption_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encryption_type'] = $encryption_type;

        return $this;
    }

    /**
     * Gets enforce_login
     *
     * @return bool|null
     * @deprecated
     */
    public function getEnforceLogin()
    {
        return $this->container['enforce_login'];
    }

    /**
     * Sets enforce_login
     *
     * @param bool|null $enforce_login Only signed in users can join this meeting.  **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the \"meeting_authentication\", \"authentication_option\" and \"authentication_domains\" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
     *
     * @return self
     * @deprecated
     */
    public function setEnforceLogin($enforce_login)
    {
        $this->container['enforce_login'] = $enforce_login;

        return $this;
    }

    /**
     * Gets enforce_login_domains
     *
     * @return string|null
     * @deprecated
     */
    public function getEnforceLoginDomains()
    {
        return $this->container['enforce_login_domains'];
    }

    /**
     * Sets enforce_login_domains
     *
     * @param string|null $enforce_login_domains Only signed in users with specified domains can join meetings.  **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the \"meeting_authentication\", \"authentication_option\" and \"authentication_domains\" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
     *
     * @return self
     * @deprecated
     */
    public function setEnforceLoginDomains($enforce_login_domains)
    {
        $this->container['enforce_login_domains'] = $enforce_login_domains;

        return $this;
    }

    /**
     * Gets focus_mode
     *
     * @return bool|null
     */
    public function getFocusMode()
    {
        return $this->container['focus_mode'];
    }

    /**
     * Sets focus_mode
     *
     * @param bool|null $focus_mode Whether the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) is enabled when the meeting starts.
     *
     * @return self
     */
    public function setFocusMode($focus_mode)
    {
        $this->container['focus_mode'] = $focus_mode;

        return $this;
    }

    /**
     * Gets global_dial_in_countries
     *
     * @return string[]|null
     */
    public function getGlobalDialInCountries()
    {
        return $this->container['global_dial_in_countries'];
    }

    /**
     * Sets global_dial_in_countries
     *
     * @param string[]|null $global_dial_in_countries List of global dial-in countries
     *
     * @return self
     */
    public function setGlobalDialInCountries($global_dial_in_countries)
    {
        $this->container['global_dial_in_countries'] = $global_dial_in_countries;

        return $this;
    }

    /**
     * Gets global_dial_in_numbers
     *
     * @return \OpenAPI\Client\Model\MeetingSettingsGlobalDialInNumbersInner[]|null
     */
    public function getGlobalDialInNumbers()
    {
        return $this->container['global_dial_in_numbers'];
    }

    /**
     * Sets global_dial_in_numbers
     *
     * @param \OpenAPI\Client\Model\MeetingSettingsGlobalDialInNumbersInner[]|null $global_dial_in_numbers Global Dial-in Countries/Regions
     *
     * @return self
     */
    public function setGlobalDialInNumbers($global_dial_in_numbers)
    {
        $this->container['global_dial_in_numbers'] = $global_dial_in_numbers;

        return $this;
    }

    /**
     * Gets host_video
     *
     * @return bool|null
     */
    public function getHostVideo()
    {
        return $this->container['host_video'];
    }

    /**
     * Sets host_video
     *
     * @param bool|null $host_video Start video when the host joins the meeting.
     *
     * @return self
     */
    public function setHostVideo($host_video)
    {
        $this->container['host_video'] = $host_video;

        return $this;
    }

    /**
     * Gets in_meeting
     *
     * @return bool|null
     * @deprecated
     */
    public function getInMeeting()
    {
        return $this->container['in_meeting'];
    }

    /**
     * Sets in_meeting
     *
     * @param bool|null $in_meeting Host meeting in India.
     *
     * @return self
     * @deprecated
     */
    public function setInMeeting($in_meeting)
    {
        $this->container['in_meeting'] = $in_meeting;

        return $this;
    }

    /**
     * Gets jbh_time
     *
     * @return int|null
     */
    public function getJbhTime()
    {
        return $this->container['jbh_time'];
    }

    /**
     * Sets jbh_time
     *
     * @param int|null $jbh_time If the value of \"join_before_host\" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:  *  `0`: Allow participant to join anytime. *  `5`: Allow participant to join 5 minutes before meeting start time.  * `10`: Allow participant to join 10 minutes before meeting start time.
     *
     * @return self
     */
    public function setJbhTime($jbh_time)
    {
        $allowedValues = $this->getJbhTimeAllowableValues();
        if (!is_null($jbh_time) && !in_array($jbh_time, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'jbh_time', must be one of '%s'",
                    $jbh_time,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jbh_time'] = $jbh_time;

        return $this;
    }

    /**
     * Gets join_before_host
     *
     * @return bool|null
     */
    public function getJoinBeforeHost()
    {
        return $this->container['join_before_host'];
    }

    /**
     * Sets join_before_host
     *
     * @param bool|null $join_before_host Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
     *
     * @return self
     */
    public function setJoinBeforeHost($join_before_host)
    {
        $this->container['join_before_host'] = $join_before_host;

        return $this;
    }

    /**
     * Gets language_interpretation
     *
     * @return \OpenAPI\Client\Model\MeetingCreateSettingsLanguageInterpretation|null
     */
    public function getLanguageInterpretation()
    {
        return $this->container['language_interpretation'];
    }

    /**
     * Sets language_interpretation
     *
     * @param \OpenAPI\Client\Model\MeetingCreateSettingsLanguageInterpretation|null $language_interpretation language_interpretation
     *
     * @return self
     */
    public function setLanguageInterpretation($language_interpretation)
    {
        $this->container['language_interpretation'] = $language_interpretation;

        return $this;
    }

    /**
     * Gets meeting_authentication
     *
     * @return bool|null
     */
    public function getMeetingAuthentication()
    {
        return $this->container['meeting_authentication'];
    }

    /**
     * Sets meeting_authentication
     *
     * @param bool|null $meeting_authentication `true`- Only authenticated users can join meetings.
     *
     * @return self
     */
    public function setMeetingAuthentication($meeting_authentication)
    {
        $this->container['meeting_authentication'] = $meeting_authentication;

        return $this;
    }

    /**
     * Gets mute_upon_entry
     *
     * @return bool|null
     */
    public function getMuteUponEntry()
    {
        return $this->container['mute_upon_entry'];
    }

    /**
     * Sets mute_upon_entry
     *
     * @param bool|null $mute_upon_entry Mute participants upon entry.
     *
     * @return self
     */
    public function setMuteUponEntry($mute_upon_entry)
    {
        $this->container['mute_upon_entry'] = $mute_upon_entry;

        return $this;
    }

    /**
     * Gets participant_video
     *
     * @return bool|null
     */
    public function getParticipantVideo()
    {
        return $this->container['participant_video'];
    }

    /**
     * Sets participant_video
     *
     * @param bool|null $participant_video Start video when participants join the meeting.
     *
     * @return self
     */
    public function setParticipantVideo($participant_video)
    {
        $this->container['participant_video'] = $participant_video;

        return $this;
    }

    /**
     * Gets private_meeting
     *
     * @return bool|null
     */
    public function getPrivateMeeting()
    {
        return $this->container['private_meeting'];
    }

    /**
     * Sets private_meeting
     *
     * @param bool|null $private_meeting Whether the meeting is set as private.
     *
     * @return self
     */
    public function setPrivateMeeting($private_meeting)
    {
        $this->container['private_meeting'] = $private_meeting;

        return $this;
    }

    /**
     * Gets registrants_confirmation_email
     *
     * @return bool|null
     */
    public function getRegistrantsConfirmationEmail()
    {
        return $this->container['registrants_confirmation_email'];
    }

    /**
     * Sets registrants_confirmation_email
     *
     * @param bool|null $registrants_confirmation_email Whether to send registrants an email confirmation: * `true` — Send a confirmation email. * `false` — Do not send a confirmation email.
     *
     * @return self
     */
    public function setRegistrantsConfirmationEmail($registrants_confirmation_email)
    {
        $this->container['registrants_confirmation_email'] = $registrants_confirmation_email;

        return $this;
    }

    /**
     * Gets registrants_email_notification
     *
     * @return bool|null
     */
    public function getRegistrantsEmailNotification()
    {
        return $this->container['registrants_email_notification'];
    }

    /**
     * Sets registrants_email_notification
     *
     * @param bool|null $registrants_email_notification Whether to send registrants email notifications about their registration approval, cancellation, or rejection:  * `true` — Send an email notification. * `false` — Do not send an email notification.   Set this value to `true` to also use the `registrants_confirmation_email` parameter.
     *
     * @return self
     */
    public function setRegistrantsEmailNotification($registrants_email_notification)
    {
        $this->container['registrants_email_notification'] = $registrants_email_notification;

        return $this;
    }

    /**
     * Gets registration_type
     *
     * @return int|null
     */
    public function getRegistrationType()
    {
        return $this->container['registration_type'];
    }

    /**
     * Sets registration_type
     *
     * @param int|null $registration_type Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
     *
     * @return self
     */
    public function setRegistrationType($registration_type)
    {
        $allowedValues = $this->getRegistrationTypeAllowableValues();
        if (!is_null($registration_type) && !in_array($registration_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'registration_type', must be one of '%s'",
                    $registration_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['registration_type'] = $registration_type;

        return $this;
    }

    /**
     * Gets show_share_button
     *
     * @return bool|null
     */
    public function getShowShareButton()
    {
        return $this->container['show_share_button'];
    }

    /**
     * Sets show_share_button
     *
     * @param bool|null $show_share_button Show social share buttons on the meeting registration page. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
     *
     * @return self
     */
    public function setShowShareButton($show_share_button)
    {
        $this->container['show_share_button'] = $show_share_button;

        return $this;
    }

    /**
     * Gets use_pmi
     *
     * @return bool|null
     */
    public function getUsePmi()
    {
        return $this->container['use_pmi'];
    }

    /**
     * Sets use_pmi
     *
     * @param bool|null $use_pmi Use a [Personal Meeting ID (PMI)](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.
     *
     * @return self
     */
    public function setUsePmi($use_pmi)
    {
        $this->container['use_pmi'] = $use_pmi;

        return $this;
    }

    /**
     * Gets waiting_room
     *
     * @return bool|null
     */
    public function getWaitingRoom()
    {
        return $this->container['waiting_room'];
    }

    /**
     * Sets waiting_room
     *
     * @param bool|null $waiting_room Enable waiting room
     *
     * @return self
     */
    public function setWaitingRoom($waiting_room)
    {
        $this->container['waiting_room'] = $waiting_room;

        return $this;
    }

    /**
     * Gets watermark
     *
     * @return bool|null
     */
    public function getWatermark()
    {
        return $this->container['watermark'];
    }

    /**
     * Sets watermark
     *
     * @param bool|null $watermark Add watermark when viewing a shared screen.
     *
     * @return self
     */
    public function setWatermark($watermark)
    {
        $this->container['watermark'] = $watermark;

        return $this;
    }

    /**
     * Gets host_save_video_order
     *
     * @return bool|null
     */
    public function getHostSaveVideoOrder()
    {
        return $this->container['host_save_video_order'];
    }

    /**
     * Sets host_save_video_order
     *
     * @param bool|null $host_save_video_order Whether the **Allow host to save video order** feature is enabled.
     *
     * @return self
     */
    public function setHostSaveVideoOrder($host_save_video_order)
    {
        $this->container['host_save_video_order'] = $host_save_video_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


