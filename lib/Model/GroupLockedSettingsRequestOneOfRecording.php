<?php
/**
 * GroupLockedSettingsRequestOneOfRecording
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * GroupLockedSettingsRequestOneOfRecording Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GroupLockedSettingsRequestOneOfRecording implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'groupLockedSettings_request_oneOf_recording';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_user_access_recording' => 'bool',
        'auto_delete_cmr' => 'bool',
        'auto_recording' => 'bool',
        'cloud_recording' => 'bool',
        'cloud_recording_download' => 'bool',
        'host_delete_cloud_recording' => 'bool',
        'ip_address_access_control' => '\Zoom\Api\Model\GetGroupLockSettings200ResponseOneOfRecordingIpAddressAccessControl',
        'local_recording' => 'bool',
        'recording_authentication' => 'bool',
        'archive' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_user_access_recording' => null,
        'auto_delete_cmr' => null,
        'auto_recording' => null,
        'cloud_recording' => null,
        'cloud_recording_download' => null,
        'host_delete_cloud_recording' => null,
        'ip_address_access_control' => null,
        'local_recording' => null,
        'recording_authentication' => null,
        'archive' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_user_access_recording' => 'account_user_access_recording',
        'auto_delete_cmr' => 'auto_delete_cmr',
        'auto_recording' => 'auto_recording',
        'cloud_recording' => 'cloud_recording',
        'cloud_recording_download' => 'cloud_recording_download',
        'host_delete_cloud_recording' => 'host_delete_cloud_recording',
        'ip_address_access_control' => 'ip_address_access_control',
        'local_recording' => 'local_recording',
        'recording_authentication' => 'recording_authentication',
        'archive' => 'archive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_user_access_recording' => 'setAccountUserAccessRecording',
        'auto_delete_cmr' => 'setAutoDeleteCmr',
        'auto_recording' => 'setAutoRecording',
        'cloud_recording' => 'setCloudRecording',
        'cloud_recording_download' => 'setCloudRecordingDownload',
        'host_delete_cloud_recording' => 'setHostDeleteCloudRecording',
        'ip_address_access_control' => 'setIpAddressAccessControl',
        'local_recording' => 'setLocalRecording',
        'recording_authentication' => 'setRecordingAuthentication',
        'archive' => 'setArchive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_user_access_recording' => 'getAccountUserAccessRecording',
        'auto_delete_cmr' => 'getAutoDeleteCmr',
        'auto_recording' => 'getAutoRecording',
        'cloud_recording' => 'getCloudRecording',
        'cloud_recording_download' => 'getCloudRecordingDownload',
        'host_delete_cloud_recording' => 'getHostDeleteCloudRecording',
        'ip_address_access_control' => 'getIpAddressAccessControl',
        'local_recording' => 'getLocalRecording',
        'recording_authentication' => 'getRecordingAuthentication',
        'archive' => 'getArchive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_user_access_recording'] = $data['account_user_access_recording'] ?? null;
        $this->container['auto_delete_cmr'] = $data['auto_delete_cmr'] ?? null;
        $this->container['auto_recording'] = $data['auto_recording'] ?? null;
        $this->container['cloud_recording'] = $data['cloud_recording'] ?? null;
        $this->container['cloud_recording_download'] = $data['cloud_recording_download'] ?? null;
        $this->container['host_delete_cloud_recording'] = $data['host_delete_cloud_recording'] ?? null;
        $this->container['ip_address_access_control'] = $data['ip_address_access_control'] ?? null;
        $this->container['local_recording'] = $data['local_recording'] ?? null;
        $this->container['recording_authentication'] = $data['recording_authentication'] ?? null;
        $this->container['archive'] = $data['archive'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_user_access_recording
     *
     * @return bool|null
     */
    public function getAccountUserAccessRecording()
    {
        return $this->container['account_user_access_recording'];
    }

    /**
     * Sets account_user_access_recording
     *
     * @param bool|null $account_user_access_recording Make cloud recordings accessible to account members only.
     *
     * @return self
     */
    public function setAccountUserAccessRecording($account_user_access_recording)
    {
        $this->container['account_user_access_recording'] = $account_user_access_recording;

        return $this;
    }

    /**
     * Gets auto_delete_cmr
     *
     * @return bool|null
     */
    public function getAutoDeleteCmr()
    {
        return $this->container['auto_delete_cmr'];
    }

    /**
     * Sets auto_delete_cmr
     *
     * @param bool|null $auto_delete_cmr Allow Zoom to automatically delete recordings permanently after a specified number of days.
     *
     * @return self
     */
    public function setAutoDeleteCmr($auto_delete_cmr)
    {
        $this->container['auto_delete_cmr'] = $auto_delete_cmr;

        return $this;
    }

    /**
     * Gets auto_recording
     *
     * @return bool|null
     */
    public function getAutoRecording()
    {
        return $this->container['auto_recording'];
    }

    /**
     * Sets auto_recording
     *
     * @param bool|null $auto_recording Record meetings automatically as they start.
     *
     * @return self
     */
    public function setAutoRecording($auto_recording)
    {
        $this->container['auto_recording'] = $auto_recording;

        return $this;
    }

    /**
     * Gets cloud_recording
     *
     * @return bool|null
     */
    public function getCloudRecording()
    {
        return $this->container['cloud_recording'];
    }

    /**
     * Sets cloud_recording
     *
     * @param bool|null $cloud_recording Allow hosts to record and save the meeting / webinar in the cloud.
     *
     * @return self
     */
    public function setCloudRecording($cloud_recording)
    {
        $this->container['cloud_recording'] = $cloud_recording;

        return $this;
    }

    /**
     * Gets cloud_recording_download
     *
     * @return bool|null
     */
    public function getCloudRecordingDownload()
    {
        return $this->container['cloud_recording_download'];
    }

    /**
     * Sets cloud_recording_download
     *
     * @param bool|null $cloud_recording_download Allow anyone with a link to the cloud recording to download.
     *
     * @return self
     */
    public function setCloudRecordingDownload($cloud_recording_download)
    {
        $this->container['cloud_recording_download'] = $cloud_recording_download;

        return $this;
    }

    /**
     * Gets host_delete_cloud_recording
     *
     * @return bool|null
     */
    public function getHostDeleteCloudRecording()
    {
        return $this->container['host_delete_cloud_recording'];
    }

    /**
     * Sets host_delete_cloud_recording
     *
     * @param bool|null $host_delete_cloud_recording Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
     *
     * @return self
     */
    public function setHostDeleteCloudRecording($host_delete_cloud_recording)
    {
        $this->container['host_delete_cloud_recording'] = $host_delete_cloud_recording;

        return $this;
    }

    /**
     * Gets ip_address_access_control
     *
     * @return \Zoom\Api\Model\GetGroupLockSettings200ResponseOneOfRecordingIpAddressAccessControl|null
     */
    public function getIpAddressAccessControl()
    {
        return $this->container['ip_address_access_control'];
    }

    /**
     * Sets ip_address_access_control
     *
     * @param \Zoom\Api\Model\GetGroupLockSettings200ResponseOneOfRecordingIpAddressAccessControl|null $ip_address_access_control ip_address_access_control
     *
     * @return self
     */
    public function setIpAddressAccessControl($ip_address_access_control)
    {
        $this->container['ip_address_access_control'] = $ip_address_access_control;

        return $this;
    }

    /**
     * Gets local_recording
     *
     * @return bool|null
     */
    public function getLocalRecording()
    {
        return $this->container['local_recording'];
    }

    /**
     * Sets local_recording
     *
     * @param bool|null $local_recording Allow hosts and participants to record the meeting to a local file.
     *
     * @return self
     */
    public function setLocalRecording($local_recording)
    {
        $this->container['local_recording'] = $local_recording;

        return $this;
    }

    /**
     * Gets recording_authentication
     *
     * @return bool|null
     */
    public function getRecordingAuthentication()
    {
        return $this->container['recording_authentication'];
    }

    /**
     * Sets recording_authentication
     *
     * @param bool|null $recording_authentication recording_authentication
     *
     * @return self
     */
    public function setRecordingAuthentication($recording_authentication)
    {
        $this->container['recording_authentication'] = $recording_authentication;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return bool|null
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param bool|null $archive [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom support team.
     *
     * @return self
     */
    public function setArchive($archive)
    {
        $this->container['archive'] = $archive;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


