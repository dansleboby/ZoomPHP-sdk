<?php
/**
 * ReportTelephone200ResponseAllOf1TelephonyUsageInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * ReportTelephone200ResponseAllOf1TelephonyUsageInner Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportTelephone200ResponseAllOf1TelephonyUsageInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'reportTelephone_200_response_allOf_1_telephony_usage_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'call_in_number' => 'string',
        'country_name' => 'string',
        'dept' => 'string',
        'duration' => 'int',
        'end_time' => '\DateTime',
        'host_email' => 'string',
        'host_id' => 'string',
        'host_name' => 'string',
        'meeting_id' => 'int',
        'meeting_type' => 'string',
        'phone_number' => 'string',
        'rate' => 'float',
        'signaled_number' => 'string',
        'start_time' => '\DateTime',
        'total' => 'float',
        'type' => 'string',
        'uuid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'call_in_number' => null,
        'country_name' => null,
        'dept' => null,
        'duration' => null,
        'end_time' => 'date-time',
        'host_email' => null,
        'host_id' => null,
        'host_name' => null,
        'meeting_id' => 'int64',
        'meeting_type' => null,
        'phone_number' => null,
        'rate' => null,
        'signaled_number' => null,
        'start_time' => 'date-time',
        'total' => null,
        'type' => null,
        'uuid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'call_in_number' => 'call_in_number',
        'country_name' => 'country_name',
        'dept' => 'dept',
        'duration' => 'duration',
        'end_time' => 'end_time',
        'host_email' => 'host_email',
        'host_id' => 'host_id',
        'host_name' => 'host_name',
        'meeting_id' => 'meeting_id',
        'meeting_type' => 'meeting_type',
        'phone_number' => 'phone_number',
        'rate' => 'rate',
        'signaled_number' => 'signaled_number',
        'start_time' => 'start_time',
        'total' => 'total',
        'type' => 'type',
        'uuid' => 'uuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'call_in_number' => 'setCallInNumber',
        'country_name' => 'setCountryName',
        'dept' => 'setDept',
        'duration' => 'setDuration',
        'end_time' => 'setEndTime',
        'host_email' => 'setHostEmail',
        'host_id' => 'setHostId',
        'host_name' => 'setHostName',
        'meeting_id' => 'setMeetingId',
        'meeting_type' => 'setMeetingType',
        'phone_number' => 'setPhoneNumber',
        'rate' => 'setRate',
        'signaled_number' => 'setSignaledNumber',
        'start_time' => 'setStartTime',
        'total' => 'setTotal',
        'type' => 'setType',
        'uuid' => 'setUuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'call_in_number' => 'getCallInNumber',
        'country_name' => 'getCountryName',
        'dept' => 'getDept',
        'duration' => 'getDuration',
        'end_time' => 'getEndTime',
        'host_email' => 'getHostEmail',
        'host_id' => 'getHostId',
        'host_name' => 'getHostName',
        'meeting_id' => 'getMeetingId',
        'meeting_type' => 'getMeetingType',
        'phone_number' => 'getPhoneNumber',
        'rate' => 'getRate',
        'signaled_number' => 'getSignaledNumber',
        'start_time' => 'getStartTime',
        'total' => 'getTotal',
        'type' => 'getType',
        'uuid' => 'getUuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_TOLL_FREE = 'toll-free';
    public const TYPE_CALL_OUT = 'call-out';
    public const TYPE_CALL_IN = 'call-in';
    public const TYPE_US_TOLL_NUMBER = 'US toll-number';
    public const TYPE_GLOBAL_TOLL_NUMBER = 'global toll-number';
    public const TYPE_PREMIUM = 'premium';
    public const TYPE_PREMIUM_CALL_IN = 'premium call-in';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TOLL_FREE,
            self::TYPE_CALL_OUT,
            self::TYPE_CALL_IN,
            self::TYPE_US_TOLL_NUMBER,
            self::TYPE_GLOBAL_TOLL_NUMBER,
            self::TYPE_PREMIUM,
            self::TYPE_PREMIUM_CALL_IN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['call_in_number'] = $data['call_in_number'] ?? null;
        $this->container['country_name'] = $data['country_name'] ?? null;
        $this->container['dept'] = $data['dept'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['host_email'] = $data['host_email'] ?? null;
        $this->container['host_id'] = $data['host_id'] ?? null;
        $this->container['host_name'] = $data['host_name'] ?? null;
        $this->container['meeting_id'] = $data['meeting_id'] ?? null;
        $this->container['meeting_type'] = $data['meeting_type'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['rate'] = $data['rate'] ?? null;
        $this->container['signaled_number'] = $data['signaled_number'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets call_in_number
     *
     * @return string|null
     */
    public function getCallInNumber()
    {
        return $this->container['call_in_number'];
    }

    /**
     * Sets call_in_number
     *
     * @param string|null $call_in_number Caller's call-in number.
     *
     * @return self
     */
    public function setCallInNumber($call_in_number)
    {
        $this->container['call_in_number'] = $call_in_number;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string|null
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string|null $country_name Country name.
     *
     * @return self
     */
    public function setCountryName($country_name)
    {
        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets dept
     *
     * @return string|null
     */
    public function getDept()
    {
        return $this->container['dept'];
    }

    /**
     * Sets dept
     *
     * @param string|null $dept User department.
     *
     * @return self
     */
    public function setDept($dept)
    {
        $this->container['dept'] = $dept;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration Call leg duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time Call leg end time
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets host_email
     *
     * @return string|null
     */
    public function getHostEmail()
    {
        return $this->container['host_email'];
    }

    /**
     * Sets host_email
     *
     * @param string|null $host_email User email.
     *
     * @return self
     */
    public function setHostEmail($host_email)
    {
        $this->container['host_email'] = $host_email;

        return $this;
    }

    /**
     * Gets host_id
     *
     * @return string|null
     */
    public function getHostId()
    {
        return $this->container['host_id'];
    }

    /**
     * Sets host_id
     *
     * @param string|null $host_id The user ID of the meeting host.
     *
     * @return self
     */
    public function setHostId($host_id)
    {
        $this->container['host_id'] = $host_id;

        return $this;
    }

    /**
     * Gets host_name
     *
     * @return string|null
     */
    public function getHostName()
    {
        return $this->container['host_name'];
    }

    /**
     * Sets host_name
     *
     * @param string|null $host_name User display name.
     *
     * @return self
     */
    public function setHostName($host_name)
    {
        $this->container['host_name'] = $host_name;

        return $this;
    }

    /**
     * Gets meeting_id
     *
     * @return int|null
     */
    public function getMeetingId()
    {
        return $this->container['meeting_id'];
    }

    /**
     * Sets meeting_id
     *
     * @param int|null $meeting_id [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in \"**long**\" format(represented as int64 data type in JSON), also known as the meeting number.
     *
     * @return self
     */
    public function setMeetingId($meeting_id)
    {
        $this->container['meeting_id'] = $meeting_id;

        return $this;
    }

    /**
     * Gets meeting_type
     *
     * @return string|null
     */
    public function getMeetingType()
    {
        return $this->container['meeting_type'];
    }

    /**
     * Sets meeting_type
     *
     * @param string|null $meeting_type Meeting type.
     *
     * @return self
     */
    public function setMeetingType($meeting_type)
    {
        $this->container['meeting_type'] = $meeting_type;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Toll-free telephone number.
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate Calling rate for the telephone call.
     *
     * @return self
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets signaled_number
     *
     * @return string|null
     */
    public function getSignaledNumber()
    {
        return $this->container['signaled_number'];
    }

    /**
     * Sets signaled_number
     *
     * @param string|null $signaled_number The number that is signaled to Zoom.
     *
     * @return self
     */
    public function setSignaledNumber($signaled_number)
    {
        $this->container['signaled_number'] = $signaled_number;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time Call leg start time
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total Total cost (USD) for Call Out. Calculated as plan rate by duration.
     *
     * @return self
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Call type.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Meeting UUID.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


