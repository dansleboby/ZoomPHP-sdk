<?php
/**
 * AccountSettingsInMeetingWebinarPolling
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * AccountSettingsInMeetingWebinarPolling Class Doc Comment
 *
 * @category Class
 * @description Information about the account&#39;s webinar polling settings.
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountSettingsInMeetingWebinarPolling implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountSettingsInMeeting_webinar_polling';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enable' => 'bool',
        'advanced_polls' => 'bool',
        'manage_saved_polls_and_quizzes' => 'bool',
        'allow_alternative_host_to_add_edit' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enable' => null,
        'advanced_polls' => null,
        'manage_saved_polls_and_quizzes' => null,
        'allow_alternative_host_to_add_edit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable' => 'enable',
        'advanced_polls' => 'advanced_polls',
        'manage_saved_polls_and_quizzes' => 'manage_saved_polls_and_quizzes',
        'allow_alternative_host_to_add_edit' => 'allow_alternative_host_to_add_edit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable' => 'setEnable',
        'advanced_polls' => 'setAdvancedPolls',
        'manage_saved_polls_and_quizzes' => 'setManageSavedPollsAndQuizzes',
        'allow_alternative_host_to_add_edit' => 'setAllowAlternativeHostToAddEdit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable' => 'getEnable',
        'advanced_polls' => 'getAdvancedPolls',
        'manage_saved_polls_and_quizzes' => 'getManageSavedPollsAndQuizzes',
        'allow_alternative_host_to_add_edit' => 'getAllowAlternativeHostToAddEdit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable'] = $data['enable'] ?? null;
        $this->container['advanced_polls'] = $data['advanced_polls'] ?? null;
        $this->container['manage_saved_polls_and_quizzes'] = $data['manage_saved_polls_and_quizzes'] ?? null;
        $this->container['allow_alternative_host_to_add_edit'] = $data['allow_alternative_host_to_add_edit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable
     *
     * @return bool|null
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool|null $enable Whether to allow the host to add polls before or during a webinar.
     *
     * @return self
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets advanced_polls
     *
     * @return bool|null
     */
    public function getAdvancedPolls()
    {
        return $this->container['advanced_polls'];
    }

    /**
     * Sets advanced_polls
     *
     * @param bool|null $advanced_polls Whether to allow host to create advanced polls and quizzes. Advanced polls and quizzes include single choice, multiple choice, drop down, matching, short answer, long answer, rank order, and fill-in-the-blank questions. Hosts can also set the correct answers for quizzes they create.
     *
     * @return self
     */
    public function setAdvancedPolls($advanced_polls)
    {
        $this->container['advanced_polls'] = $advanced_polls;

        return $this;
    }

    /**
     * Gets manage_saved_polls_and_quizzes
     *
     * @return bool|null
     */
    public function getManageSavedPollsAndQuizzes()
    {
        return $this->container['manage_saved_polls_and_quizzes'];
    }

    /**
     * Sets manage_saved_polls_and_quizzes
     *
     * @param bool|null $manage_saved_polls_and_quizzes Whether to allow users to manage saved polls and quizzes from Meetings
     *
     * @return self
     */
    public function setManageSavedPollsAndQuizzes($manage_saved_polls_and_quizzes)
    {
        $this->container['manage_saved_polls_and_quizzes'] = $manage_saved_polls_and_quizzes;

        return $this;
    }

    /**
     * Gets allow_alternative_host_to_add_edit
     *
     * @return bool|null
     */
    public function getAllowAlternativeHostToAddEdit()
    {
        return $this->container['allow_alternative_host_to_add_edit'];
    }

    /**
     * Sets allow_alternative_host_to_add_edit
     *
     * @param bool|null $allow_alternative_host_to_add_edit Whether to allow the alternative host to add or edit polls and quizzes.
     *
     * @return self
     */
    public function setAllowAlternativeHostToAddEdit($allow_alternative_host_to_add_edit)
    {
        $this->container['allow_alternative_host_to_add_edit'] = $allow_alternative_host_to_add_edit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


