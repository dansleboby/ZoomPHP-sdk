<?php
/**
 * AccountSettingsZoomRooms
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * AccountSettingsZoomRooms Class Doc Comment
 *
 * @category Class
 * @description Account Settings: Zoom Rooms.
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountSettingsZoomRooms implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountSettingsZoomRooms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto_start_stop_scheduled_meetings' => 'bool',
        'cmr_for_instant_meeting' => 'bool',
        'force_private_meeting' => 'bool',
        'hide_host_information' => 'bool',
        'list_meetings_with_calendar' => 'bool',
        'start_airplay_manually' => 'bool',
        'ultrasonic' => 'bool',
        'upcoming_meeting_alert' => 'bool',
        'weekly_system_restart' => 'bool',
        'zr_post_meeting_feedback' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auto_start_stop_scheduled_meetings' => null,
        'cmr_for_instant_meeting' => null,
        'force_private_meeting' => null,
        'hide_host_information' => null,
        'list_meetings_with_calendar' => null,
        'start_airplay_manually' => null,
        'ultrasonic' => null,
        'upcoming_meeting_alert' => null,
        'weekly_system_restart' => null,
        'zr_post_meeting_feedback' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_start_stop_scheduled_meetings' => 'auto_start_stop_scheduled_meetings',
        'cmr_for_instant_meeting' => 'cmr_for_instant_meeting',
        'force_private_meeting' => 'force_private_meeting',
        'hide_host_information' => 'hide_host_information',
        'list_meetings_with_calendar' => 'list_meetings_with_calendar',
        'start_airplay_manually' => 'start_airplay_manually',
        'ultrasonic' => 'ultrasonic',
        'upcoming_meeting_alert' => 'upcoming_meeting_alert',
        'weekly_system_restart' => 'weekly_system_restart',
        'zr_post_meeting_feedback' => 'zr_post_meeting_feedback'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_start_stop_scheduled_meetings' => 'setAutoStartStopScheduledMeetings',
        'cmr_for_instant_meeting' => 'setCmrForInstantMeeting',
        'force_private_meeting' => 'setForcePrivateMeeting',
        'hide_host_information' => 'setHideHostInformation',
        'list_meetings_with_calendar' => 'setListMeetingsWithCalendar',
        'start_airplay_manually' => 'setStartAirplayManually',
        'ultrasonic' => 'setUltrasonic',
        'upcoming_meeting_alert' => 'setUpcomingMeetingAlert',
        'weekly_system_restart' => 'setWeeklySystemRestart',
        'zr_post_meeting_feedback' => 'setZrPostMeetingFeedback'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_start_stop_scheduled_meetings' => 'getAutoStartStopScheduledMeetings',
        'cmr_for_instant_meeting' => 'getCmrForInstantMeeting',
        'force_private_meeting' => 'getForcePrivateMeeting',
        'hide_host_information' => 'getHideHostInformation',
        'list_meetings_with_calendar' => 'getListMeetingsWithCalendar',
        'start_airplay_manually' => 'getStartAirplayManually',
        'ultrasonic' => 'getUltrasonic',
        'upcoming_meeting_alert' => 'getUpcomingMeetingAlert',
        'weekly_system_restart' => 'getWeeklySystemRestart',
        'zr_post_meeting_feedback' => 'getZrPostMeetingFeedback'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_start_stop_scheduled_meetings'] = $data['auto_start_stop_scheduled_meetings'] ?? null;
        $this->container['cmr_for_instant_meeting'] = $data['cmr_for_instant_meeting'] ?? null;
        $this->container['force_private_meeting'] = $data['force_private_meeting'] ?? null;
        $this->container['hide_host_information'] = $data['hide_host_information'] ?? null;
        $this->container['list_meetings_with_calendar'] = $data['list_meetings_with_calendar'] ?? null;
        $this->container['start_airplay_manually'] = $data['start_airplay_manually'] ?? null;
        $this->container['ultrasonic'] = $data['ultrasonic'] ?? null;
        $this->container['upcoming_meeting_alert'] = $data['upcoming_meeting_alert'] ?? null;
        $this->container['weekly_system_restart'] = $data['weekly_system_restart'] ?? null;
        $this->container['zr_post_meeting_feedback'] = $data['zr_post_meeting_feedback'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_start_stop_scheduled_meetings
     *
     * @return bool|null
     */
    public function getAutoStartStopScheduledMeetings()
    {
        return $this->container['auto_start_stop_scheduled_meetings'];
    }

    /**
     * Sets auto_start_stop_scheduled_meetings
     *
     * @param bool|null $auto_start_stop_scheduled_meetings Automatic start and stop for scheduled meetings.
     *
     * @return self
     */
    public function setAutoStartStopScheduledMeetings($auto_start_stop_scheduled_meetings)
    {
        $this->container['auto_start_stop_scheduled_meetings'] = $auto_start_stop_scheduled_meetings;

        return $this;
    }

    /**
     * Gets cmr_for_instant_meeting
     *
     * @return bool|null
     */
    public function getCmrForInstantMeeting()
    {
        return $this->container['cmr_for_instant_meeting'];
    }

    /**
     * Sets cmr_for_instant_meeting
     *
     * @param bool|null $cmr_for_instant_meeting Cloud recording for instant meetings.
     *
     * @return self
     */
    public function setCmrForInstantMeeting($cmr_for_instant_meeting)
    {
        $this->container['cmr_for_instant_meeting'] = $cmr_for_instant_meeting;

        return $this;
    }

    /**
     * Gets force_private_meeting
     *
     * @return bool|null
     */
    public function getForcePrivateMeeting()
    {
        return $this->container['force_private_meeting'];
    }

    /**
     * Sets force_private_meeting
     *
     * @param bool|null $force_private_meeting Shift all meetings to private.
     *
     * @return self
     */
    public function setForcePrivateMeeting($force_private_meeting)
    {
        $this->container['force_private_meeting'] = $force_private_meeting;

        return $this;
    }

    /**
     * Gets hide_host_information
     *
     * @return bool|null
     */
    public function getHideHostInformation()
    {
        return $this->container['hide_host_information'];
    }

    /**
     * Sets hide_host_information
     *
     * @param bool|null $hide_host_information Hide host and meeting ID from private meetings.
     *
     * @return self
     */
    public function setHideHostInformation($hide_host_information)
    {
        $this->container['hide_host_information'] = $hide_host_information;

        return $this;
    }

    /**
     * Gets list_meetings_with_calendar
     *
     * @return bool|null
     */
    public function getListMeetingsWithCalendar()
    {
        return $this->container['list_meetings_with_calendar'];
    }

    /**
     * Sets list_meetings_with_calendar
     *
     * @param bool|null $list_meetings_with_calendar Display meeting list with calendar integration.
     *
     * @return self
     */
    public function setListMeetingsWithCalendar($list_meetings_with_calendar)
    {
        $this->container['list_meetings_with_calendar'] = $list_meetings_with_calendar;

        return $this;
    }

    /**
     * Gets start_airplay_manually
     *
     * @return bool|null
     */
    public function getStartAirplayManually()
    {
        return $this->container['start_airplay_manually'];
    }

    /**
     * Sets start_airplay_manually
     *
     * @param bool|null $start_airplay_manually Start AirPlay service manually.
     *
     * @return self
     */
    public function setStartAirplayManually($start_airplay_manually)
    {
        $this->container['start_airplay_manually'] = $start_airplay_manually;

        return $this;
    }

    /**
     * Gets ultrasonic
     *
     * @return bool|null
     */
    public function getUltrasonic()
    {
        return $this->container['ultrasonic'];
    }

    /**
     * Sets ultrasonic
     *
     * @param bool|null $ultrasonic Automatic direct sharing using an ultrasonic proximity signal.
     *
     * @return self
     */
    public function setUltrasonic($ultrasonic)
    {
        $this->container['ultrasonic'] = $ultrasonic;

        return $this;
    }

    /**
     * Gets upcoming_meeting_alert
     *
     * @return bool|null
     */
    public function getUpcomingMeetingAlert()
    {
        return $this->container['upcoming_meeting_alert'];
    }

    /**
     * Sets upcoming_meeting_alert
     *
     * @param bool|null $upcoming_meeting_alert Upcoming meeting alert.
     *
     * @return self
     */
    public function setUpcomingMeetingAlert($upcoming_meeting_alert)
    {
        $this->container['upcoming_meeting_alert'] = $upcoming_meeting_alert;

        return $this;
    }

    /**
     * Gets weekly_system_restart
     *
     * @return bool|null
     */
    public function getWeeklySystemRestart()
    {
        return $this->container['weekly_system_restart'];
    }

    /**
     * Sets weekly_system_restart
     *
     * @param bool|null $weekly_system_restart Weekly system restart.
     *
     * @return self
     */
    public function setWeeklySystemRestart($weekly_system_restart)
    {
        $this->container['weekly_system_restart'] = $weekly_system_restart;

        return $this;
    }

    /**
     * Gets zr_post_meeting_feedback
     *
     * @return bool|null
     */
    public function getZrPostMeetingFeedback()
    {
        return $this->container['zr_post_meeting_feedback'];
    }

    /**
     * Sets zr_post_meeting_feedback
     *
     * @param bool|null $zr_post_meeting_feedback Zoom Room post meeting feedback.
     *
     * @return self
     */
    public function setZrPostMeetingFeedback($zr_post_meeting_feedback)
    {
        $this->container['zr_post_meeting_feedback'] = $zr_post_meeting_feedback;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


