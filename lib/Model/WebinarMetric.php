<?php
/**
 * WebinarMetric
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WebinarMetric Class Doc Comment
 *
 * @category Class
 * @description Webinar metric details.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebinarMetric implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WebinarMetric';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'host' => 'string',
        'custom_keys' => '\OpenAPI\Client\Model\WebinarMetricCustomKeysInner[]',
        'dept' => 'string',
        'duration' => 'string',
        'email' => 'string',
        'end_time' => '\DateTime',
        'has_3rd_party_audio' => 'bool',
        'has_archiving' => 'bool',
        'has_pstn' => 'bool',
        'has_recording' => 'bool',
        'has_screen_share' => 'bool',
        'has_sip' => 'bool',
        'has_video' => 'bool',
        'has_voip' => 'bool',
        'id' => 'int',
        'participants' => 'int',
        'start_time' => '\DateTime',
        'topic' => 'string',
        'user_type' => 'string',
        'uuid' => 'string',
        'audio_quality' => 'string',
        'video_quality' => 'string',
        'screen_share_quality' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'host' => null,
        'custom_keys' => null,
        'dept' => null,
        'duration' => null,
        'email' => null,
        'end_time' => 'date-time',
        'has_3rd_party_audio' => null,
        'has_archiving' => null,
        'has_pstn' => null,
        'has_recording' => null,
        'has_screen_share' => null,
        'has_sip' => null,
        'has_video' => null,
        'has_voip' => null,
        'id' => 'int64',
        'participants' => null,
        'start_time' => 'date-time',
        'topic' => null,
        'user_type' => null,
        'uuid' => null,
        'audio_quality' => null,
        'video_quality' => null,
        'screen_share_quality' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host' => 'host',
        'custom_keys' => 'custom_keys',
        'dept' => 'dept',
        'duration' => 'duration',
        'email' => 'email',
        'end_time' => 'end_time',
        'has_3rd_party_audio' => 'has_3rd_party_audio',
        'has_archiving' => 'has_archiving',
        'has_pstn' => 'has_pstn',
        'has_recording' => 'has_recording',
        'has_screen_share' => 'has_screen_share',
        'has_sip' => 'has_sip',
        'has_video' => 'has_video',
        'has_voip' => 'has_voip',
        'id' => 'id',
        'participants' => 'participants',
        'start_time' => 'start_time',
        'topic' => 'topic',
        'user_type' => 'user_type',
        'uuid' => 'uuid',
        'audio_quality' => 'audio_quality',
        'video_quality' => 'video_quality',
        'screen_share_quality' => 'screen_share_quality'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host' => 'setHost',
        'custom_keys' => 'setCustomKeys',
        'dept' => 'setDept',
        'duration' => 'setDuration',
        'email' => 'setEmail',
        'end_time' => 'setEndTime',
        'has_3rd_party_audio' => 'setHas3rdPartyAudio',
        'has_archiving' => 'setHasArchiving',
        'has_pstn' => 'setHasPstn',
        'has_recording' => 'setHasRecording',
        'has_screen_share' => 'setHasScreenShare',
        'has_sip' => 'setHasSip',
        'has_video' => 'setHasVideo',
        'has_voip' => 'setHasVoip',
        'id' => 'setId',
        'participants' => 'setParticipants',
        'start_time' => 'setStartTime',
        'topic' => 'setTopic',
        'user_type' => 'setUserType',
        'uuid' => 'setUuid',
        'audio_quality' => 'setAudioQuality',
        'video_quality' => 'setVideoQuality',
        'screen_share_quality' => 'setScreenShareQuality'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host' => 'getHost',
        'custom_keys' => 'getCustomKeys',
        'dept' => 'getDept',
        'duration' => 'getDuration',
        'email' => 'getEmail',
        'end_time' => 'getEndTime',
        'has_3rd_party_audio' => 'getHas3rdPartyAudio',
        'has_archiving' => 'getHasArchiving',
        'has_pstn' => 'getHasPstn',
        'has_recording' => 'getHasRecording',
        'has_screen_share' => 'getHasScreenShare',
        'has_sip' => 'getHasSip',
        'has_video' => 'getHasVideo',
        'has_voip' => 'getHasVoip',
        'id' => 'getId',
        'participants' => 'getParticipants',
        'start_time' => 'getStartTime',
        'topic' => 'getTopic',
        'user_type' => 'getUserType',
        'uuid' => 'getUuid',
        'audio_quality' => 'getAudioQuality',
        'video_quality' => 'getVideoQuality',
        'screen_share_quality' => 'getScreenShareQuality'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUDIO_QUALITY_GOOD = 'good';
    public const AUDIO_QUALITY_FAIR = 'fair';
    public const AUDIO_QUALITY_POOR = 'poor';
    public const AUDIO_QUALITY_BAD = 'bad';
    public const VIDEO_QUALITY_GOOD = 'good';
    public const VIDEO_QUALITY_FAIR = 'fair';
    public const VIDEO_QUALITY_POOR = 'poor';
    public const VIDEO_QUALITY_BAD = 'bad';
    public const SCREEN_SHARE_QUALITY_GOOD = 'good';
    public const SCREEN_SHARE_QUALITY_FAIR = 'fair';
    public const SCREEN_SHARE_QUALITY_POOR = 'poor';
    public const SCREEN_SHARE_QUALITY_BAD = 'bad';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAudioQualityAllowableValues()
    {
        return [
            self::AUDIO_QUALITY_GOOD,
            self::AUDIO_QUALITY_FAIR,
            self::AUDIO_QUALITY_POOR,
            self::AUDIO_QUALITY_BAD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVideoQualityAllowableValues()
    {
        return [
            self::VIDEO_QUALITY_GOOD,
            self::VIDEO_QUALITY_FAIR,
            self::VIDEO_QUALITY_POOR,
            self::VIDEO_QUALITY_BAD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScreenShareQualityAllowableValues()
    {
        return [
            self::SCREEN_SHARE_QUALITY_GOOD,
            self::SCREEN_SHARE_QUALITY_FAIR,
            self::SCREEN_SHARE_QUALITY_POOR,
            self::SCREEN_SHARE_QUALITY_BAD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['host'] = $data['host'] ?? null;
        $this->container['custom_keys'] = $data['custom_keys'] ?? null;
        $this->container['dept'] = $data['dept'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['has_3rd_party_audio'] = $data['has_3rd_party_audio'] ?? null;
        $this->container['has_archiving'] = $data['has_archiving'] ?? null;
        $this->container['has_pstn'] = $data['has_pstn'] ?? null;
        $this->container['has_recording'] = $data['has_recording'] ?? null;
        $this->container['has_screen_share'] = $data['has_screen_share'] ?? null;
        $this->container['has_sip'] = $data['has_sip'] ?? null;
        $this->container['has_video'] = $data['has_video'] ?? null;
        $this->container['has_voip'] = $data['has_voip'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['participants'] = $data['participants'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['topic'] = $data['topic'] ?? null;
        $this->container['user_type'] = $data['user_type'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['audio_quality'] = $data['audio_quality'] ?? null;
        $this->container['video_quality'] = $data['video_quality'] ?? null;
        $this->container['screen_share_quality'] = $data['screen_share_quality'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['custom_keys']) && (count($this->container['custom_keys']) > 10)) {
            $invalidProperties[] = "invalid value for 'custom_keys', number of items must be less than or equal to 10.";
        }

        $allowedValues = $this->getAudioQualityAllowableValues();
        if (!is_null($this->container['audio_quality']) && !in_array($this->container['audio_quality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'audio_quality', must be one of '%s'",
                $this->container['audio_quality'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVideoQualityAllowableValues();
        if (!is_null($this->container['video_quality']) && !in_array($this->container['video_quality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'video_quality', must be one of '%s'",
                $this->container['video_quality'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScreenShareQualityAllowableValues();
        if (!is_null($this->container['screen_share_quality']) && !in_array($this->container['screen_share_quality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'screen_share_quality', must be one of '%s'",
                $this->container['screen_share_quality'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host User display name.
     *
     * @return self
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets custom_keys
     *
     * @return \OpenAPI\Client\Model\WebinarMetricCustomKeysInner[]|null
     */
    public function getCustomKeys()
    {
        return $this->container['custom_keys'];
    }

    /**
     * Sets custom_keys
     *
     * @param \OpenAPI\Client\Model\WebinarMetricCustomKeysInner[]|null $custom_keys Custom keys and values assigned to the Webinar.
     *
     * @return self
     */
    public function setCustomKeys($custom_keys)
    {

        if (!is_null($custom_keys) && (count($custom_keys) > 10)) {
            throw new \InvalidArgumentException('invalid value for $custom_keys when calling WebinarMetric., number of items must be less than or equal to 10.');
        }
        $this->container['custom_keys'] = $custom_keys;

        return $this;
    }

    /**
     * Gets dept
     *
     * @return string|null
     */
    public function getDept()
    {
        return $this->container['dept'];
    }

    /**
     * Sets dept
     *
     * @param string|null $dept Department of the host.
     *
     * @return self
     */
    public function setDept($dept)
    {
        $this->container['dept'] = $dept;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string|null $duration Webinar duration, formatted as hh:mm:ss, for example: `10:00` for ten minutes.
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email User email.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time Webinar end time.
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets has_3rd_party_audio
     *
     * @return bool|null
     */
    public function getHas3rdPartyAudio()
    {
        return $this->container['has_3rd_party_audio'];
    }

    /**
     * Sets has_3rd_party_audio
     *
     * @param bool|null $has_3rd_party_audio Use TSP for the Webinar.
     *
     * @return self
     */
    public function setHas3rdPartyAudio($has_3rd_party_audio)
    {
        $this->container['has_3rd_party_audio'] = $has_3rd_party_audio;

        return $this;
    }

    /**
     * Gets has_archiving
     *
     * @return bool|null
     */
    public function getHasArchiving()
    {
        return $this->container['has_archiving'];
    }

    /**
     * Sets has_archiving
     *
     * @param bool|null $has_archiving Whether the archiving feature was used in the webinar.
     *
     * @return self
     */
    public function setHasArchiving($has_archiving)
    {
        $this->container['has_archiving'] = $has_archiving;

        return $this;
    }

    /**
     * Gets has_pstn
     *
     * @return bool|null
     */
    public function getHasPstn()
    {
        return $this->container['has_pstn'];
    }

    /**
     * Sets has_pstn
     *
     * @param bool|null $has_pstn Indicates whether or not PSTN was used for the Webinar.
     *
     * @return self
     */
    public function setHasPstn($has_pstn)
    {
        $this->container['has_pstn'] = $has_pstn;

        return $this;
    }

    /**
     * Gets has_recording
     *
     * @return bool|null
     */
    public function getHasRecording()
    {
        return $this->container['has_recording'];
    }

    /**
     * Sets has_recording
     *
     * @param bool|null $has_recording Indicates whether or not recording was used for the Webinar.
     *
     * @return self
     */
    public function setHasRecording($has_recording)
    {
        $this->container['has_recording'] = $has_recording;

        return $this;
    }

    /**
     * Gets has_screen_share
     *
     * @return bool|null
     */
    public function getHasScreenShare()
    {
        return $this->container['has_screen_share'];
    }

    /**
     * Sets has_screen_share
     *
     * @param bool|null $has_screen_share Indicates whether or not screen sharing was used for the Webinar.
     *
     * @return self
     */
    public function setHasScreenShare($has_screen_share)
    {
        $this->container['has_screen_share'] = $has_screen_share;

        return $this;
    }

    /**
     * Gets has_sip
     *
     * @return bool|null
     */
    public function getHasSip()
    {
        return $this->container['has_sip'];
    }

    /**
     * Sets has_sip
     *
     * @param bool|null $has_sip Indicates whether or not SIP was used for the Webinar.
     *
     * @return self
     */
    public function setHasSip($has_sip)
    {
        $this->container['has_sip'] = $has_sip;

        return $this;
    }

    /**
     * Gets has_video
     *
     * @return bool|null
     */
    public function getHasVideo()
    {
        return $this->container['has_video'];
    }

    /**
     * Sets has_video
     *
     * @param bool|null $has_video Indicates whether or not video was used for the Webinar.
     *
     * @return self
     */
    public function setHasVideo($has_video)
    {
        $this->container['has_video'] = $has_video;

        return $this;
    }

    /**
     * Gets has_voip
     *
     * @return bool|null
     */
    public function getHasVoip()
    {
        return $this->container['has_voip'];
    }

    /**
     * Sets has_voip
     *
     * @param bool|null $has_voip Indicates whether or not VoIP was used for the Webinar.
     *
     * @return self
     */
    public function setHasVoip($has_voip)
    {
        $this->container['has_voip'] = $has_voip;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Webinar ID in \"**long**\" format(represented as int64 data type in JSON), also known as the webinar number.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return int|null
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param int|null $participants Webinar participant count.
     *
     * @return self
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time Webinar start time.
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return string|null
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param string|null $topic Webinar topic.
     *
     * @return self
     */
    public function setTopic($topic)
    {
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return string|null
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param string|null $user_type User type.
     *
     * @return self
     */
    public function setUserType($user_type)
    {
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Webinar UUID.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets audio_quality
     *
     * @return string|null
     */
    public function getAudioQuality()
    {
        return $this->container['audio_quality'];
    }

    /**
     * Sets audio_quality
     *
     * @param string|null $audio_quality The webinar's [audio quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Using-meeting-quality-scores-and-network-alerts):  * `good` — The audio is almost flawless and the quality is excellent.  * `fair` — The audio occasionally has distortion, noise, and other problems, but the content is basically continuous. Participants can communicate normally.  * `poor` — The audio often has distortion, noise, and other problems, but the content is basically continuous. Participants can communicate normally.  * `bad` — The sound quality is extremely poor and the audio content is almost inaudible.
     *
     * @return self
     */
    public function setAudioQuality($audio_quality)
    {
        $allowedValues = $this->getAudioQualityAllowableValues();
        if (!is_null($audio_quality) && !in_array($audio_quality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'audio_quality', must be one of '%s'",
                    $audio_quality,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['audio_quality'] = $audio_quality;

        return $this;
    }

    /**
     * Gets video_quality
     *
     * @return string|null
     */
    public function getVideoQuality()
    {
        return $this->container['video_quality'];
    }

    /**
     * Sets video_quality
     *
     * @param string|null $video_quality The webinar's [video quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Using-meeting-quality-scores-and-network-alerts):  * `good` — The video is almost flawless and the quality is excellent.  * `fair` — The video definition is high, occasionally gets stuck, fast or slow, or other problems, but the frequency is very low and the video quality is good.  * `poor` — The video definition is not high, but not many problems exist. The video quality is mediocre.  * `bad` — The picture is very blurred and often gets stuck.
     *
     * @return self
     */
    public function setVideoQuality($video_quality)
    {
        $allowedValues = $this->getVideoQualityAllowableValues();
        if (!is_null($video_quality) && !in_array($video_quality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'video_quality', must be one of '%s'",
                    $video_quality,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['video_quality'] = $video_quality;

        return $this;
    }

    /**
     * Gets screen_share_quality
     *
     * @return string|null
     */
    public function getScreenShareQuality()
    {
        return $this->container['screen_share_quality'];
    }

    /**
     * Sets screen_share_quality
     *
     * @param string|null $screen_share_quality The webinar's [screen share quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Using-meeting-quality-scores-and-network-alerts):  * `good` — The video is almost flawless and the quality is excellent.  * `fair` — The video definition is high, occasionally gets stuck, fast or slow, or other problems, but the frequency is very low and the video quality is good.  * `poor` — The video definition is not high, but not many problems exist. The video quality is mediocre.  * `bad` — The picture is very blurred and often gets stuck.
     *
     * @return self
     */
    public function setScreenShareQuality($screen_share_quality)
    {
        $allowedValues = $this->getScreenShareQualityAllowableValues();
        if (!is_null($screen_share_quality) && !in_array($screen_share_quality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'screen_share_quality', must be one of '%s'",
                    $screen_share_quality,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['screen_share_quality'] = $screen_share_quality;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


