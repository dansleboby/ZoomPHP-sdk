<?php
/**
 * PhonePlan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PhonePlan Class Doc Comment
 *
 * @category Class
 * @description Information about the account&#39;s Zoom Phone plan.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PhonePlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PhonePlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'plan_base' => '\OpenAPI\Client\Model\PhonePlanPlanBase',
        'plan_calling' => '\OpenAPI\Client\Model\PhonePlanPlanCallingInner[]',
        'plan_calling_addons' => '\OpenAPI\Client\Model\PhonePlanPlanCallingAddonsInner[]',
        'plan_number' => '\OpenAPI\Client\Model\PhonePlanPlanNumberInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'plan_base' => null,
        'plan_calling' => null,
        'plan_calling_addons' => null,
        'plan_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plan_base' => 'plan_base',
        'plan_calling' => 'plan_calling',
        'plan_calling_addons' => 'plan_calling_addons',
        'plan_number' => 'plan_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plan_base' => 'setPlanBase',
        'plan_calling' => 'setPlanCalling',
        'plan_calling_addons' => 'setPlanCallingAddons',
        'plan_number' => 'setPlanNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plan_base' => 'getPlanBase',
        'plan_calling' => 'getPlanCalling',
        'plan_calling_addons' => 'getPlanCallingAddons',
        'plan_number' => 'getPlanNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plan_base'] = $data['plan_base'] ?? null;
        $this->container['plan_calling'] = $data['plan_calling'] ?? null;
        $this->container['plan_calling_addons'] = $data['plan_calling_addons'] ?? null;
        $this->container['plan_number'] = $data['plan_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plan_base
     *
     * @return \OpenAPI\Client\Model\PhonePlanPlanBase|null
     */
    public function getPlanBase()
    {
        return $this->container['plan_base'];
    }

    /**
     * Sets plan_base
     *
     * @param \OpenAPI\Client\Model\PhonePlanPlanBase|null $plan_base plan_base
     *
     * @return self
     */
    public function setPlanBase($plan_base)
    {
        $this->container['plan_base'] = $plan_base;

        return $this;
    }

    /**
     * Gets plan_calling
     *
     * @return \OpenAPI\Client\Model\PhonePlanPlanCallingInner[]|null
     */
    public function getPlanCalling()
    {
        return $this->container['plan_calling'];
    }

    /**
     * Sets plan_calling
     *
     * @param \OpenAPI\Client\Model\PhonePlanPlanCallingInner[]|null $plan_calling Information about the account's additional Zoom Phone calling plans.
     *
     * @return self
     */
    public function setPlanCalling($plan_calling)
    {
        $this->container['plan_calling'] = $plan_calling;

        return $this;
    }

    /**
     * Gets plan_calling_addons
     *
     * @return \OpenAPI\Client\Model\PhonePlanPlanCallingAddonsInner[]|null
     */
    public function getPlanCallingAddons()
    {
        return $this->container['plan_calling_addons'];
    }

    /**
     * Sets plan_calling_addons
     *
     * @param \OpenAPI\Client\Model\PhonePlanPlanCallingAddonsInner[]|null $plan_calling_addons Information about the account's additional Zoom Phone add-on calling plan. A calling plan is required when adding an add-on calling plan.
     *
     * @return self
     */
    public function setPlanCallingAddons($plan_calling_addons)
    {
        $this->container['plan_calling_addons'] = $plan_calling_addons;

        return $this;
    }

    /**
     * Gets plan_number
     *
     * @return \OpenAPI\Client\Model\PhonePlanPlanNumberInner[]|null
     */
    public function getPlanNumber()
    {
        return $this->container['plan_number'];
    }

    /**
     * Sets plan_number
     *
     * @param \OpenAPI\Client\Model\PhonePlanPlanNumberInner[]|null $plan_number Information about the account's additional Zoom Phone number plans.
     *
     * @return self
     */
    public function setPlanNumber($plan_number)
    {
        $this->container['plan_number'] = $plan_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


