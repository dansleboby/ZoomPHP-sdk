<?php
/**
 * UsersApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * UsersApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UsersApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for delUserVB
     *
     * Delete Virtual Background files.
     *
     */
    public function testDelUserVB()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePresenceStatus
     *
     * Update a user's presence status.
     *
     */
    public function testUpdatePresenceStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uploadVBuser
     *
     * Upload Virtual Background files.
     *
     */
    public function testUploadVBuser()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for user
     *
     * Get a user.
     *
     */
    public function testUser()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userAssistantCreate
     *
     * Add assistants.
     *
     */
    public function testUserAssistantCreate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userAssistantDelete
     *
     * Delete a user assistant.
     *
     */
    public function testUserAssistantDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userAssistants
     *
     * List user assistants.
     *
     */
    public function testUserAssistants()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userAssistantsDelete
     *
     * Delete user assistants.
     *
     */
    public function testUserAssistantsDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCreate
     *
     * Create users.
     *
     */
    public function testUserCreate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userDelete
     *
     * Delete a user.
     *
     */
    public function testUserDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userEmail
     *
     * Check a user email.
     *
     */
    public function testUserEmail()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userEmailUpdate
     *
     * Update a user's email.
     *
     */
    public function testUserEmailUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userPassword
     *
     * Update a user's password.
     *
     */
    public function testUserPassword()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userPermission
     *
     * Get user permissions.
     *
     */
    public function testUserPermission()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userPicture
     *
     * Upload a user's profile picture.
     *
     */
    public function testUserPicture()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userPictureDelete
     *
     * Delete a user's profile picture.
     *
     */
    public function testUserPictureDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userSSOTokenDelete
     *
     * Revoke a user's SSO token.
     *
     */
    public function testUserSSOTokenDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userSchedulerDelete
     *
     * Delete a scheduler.
     *
     */
    public function testUserSchedulerDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userSchedulers
     *
     * List user schedulers.
     *
     */
    public function testUserSchedulers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userSchedulersDelete
     *
     * Delete user schedulers.
     *
     */
    public function testUserSchedulersDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userSettings
     *
     * Get user settings.
     *
     */
    public function testUserSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userSettingsUpdate
     *
     * Update user settings.
     *
     */
    public function testUserSettingsUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userStatus
     *
     * Update user status.
     *
     */
    public function testUserStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userToken
     *
     * Get a user's token.
     *
     */
    public function testUserToken()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userUpdate
     *
     * Update a user.
     *
     */
    public function testUserUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userVanityName
     *
     * Check a user's PM room.
     *
     */
    public function testUserVanityName()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userZak
     *
     * Get user's ZAK.
     *
     */
    public function testUserZak()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for users
     *
     * List users.
     *
     */
    public function testUsers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
