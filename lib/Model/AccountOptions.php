<?php
/**
 * AccountOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * AccountOptions Class Doc Comment
 *
 * @category Class
 * @description Information about the account&#39;s options.
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billing_auto_renew' => 'bool',
        'meeting_connector_list' => 'string[]',
        'pay_mode' => 'string',
        'room_connector_list' => 'string[]',
        'share_mc' => 'bool',
        'share_rc' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billing_auto_renew' => null,
        'meeting_connector_list' => null,
        'pay_mode' => null,
        'room_connector_list' => null,
        'share_mc' => null,
        'share_rc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_auto_renew' => 'billing_auto_renew',
        'meeting_connector_list' => 'meeting_connector_list',
        'pay_mode' => 'pay_mode',
        'room_connector_list' => 'room_connector_list',
        'share_mc' => 'share_mc',
        'share_rc' => 'share_rc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_auto_renew' => 'setBillingAutoRenew',
        'meeting_connector_list' => 'setMeetingConnectorList',
        'pay_mode' => 'setPayMode',
        'room_connector_list' => 'setRoomConnectorList',
        'share_mc' => 'setShareMc',
        'share_rc' => 'setShareRc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_auto_renew' => 'getBillingAutoRenew',
        'meeting_connector_list' => 'getMeetingConnectorList',
        'pay_mode' => 'getPayMode',
        'room_connector_list' => 'getRoomConnectorList',
        'share_mc' => 'getShareMc',
        'share_rc' => 'getShareRc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAY_MODE_MASTER = 'master';
    public const PAY_MODE_SUB = 'sub';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayModeAllowableValues()
    {
        return [
            self::PAY_MODE_MASTER,
            self::PAY_MODE_SUB,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_auto_renew'] = $data['billing_auto_renew'] ?? null;
        $this->container['meeting_connector_list'] = $data['meeting_connector_list'] ?? null;
        $this->container['pay_mode'] = $data['pay_mode'] ?? 'master';
        $this->container['room_connector_list'] = $data['room_connector_list'] ?? null;
        $this->container['share_mc'] = $data['share_mc'] ?? false;
        $this->container['share_rc'] = $data['share_rc'] ?? false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPayModeAllowableValues();
        if (!is_null($this->container['pay_mode']) && !in_array($this->container['pay_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pay_mode', must be one of '%s'",
                $this->container['pay_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_auto_renew
     *
     * @return bool|null
     */
    public function getBillingAutoRenew()
    {
        return $this->container['billing_auto_renew'];
    }

    /**
     * Sets billing_auto_renew
     *
     * @param bool|null $billing_auto_renew Whether to enable automatic billing renewal.
     *
     * @return self
     */
    public function setBillingAutoRenew($billing_auto_renew)
    {
        $this->container['billing_auto_renew'] = $billing_auto_renew;

        return $this;
    }

    /**
     * Gets meeting_connector_list
     *
     * @return string[]|null
     */
    public function getMeetingConnectorList()
    {
        return $this->container['meeting_connector_list'];
    }

    /**
     * Sets meeting_connector_list
     *
     * @param string[]|null $meeting_connector_list A comma-separated list of Meeting Connector IP addresses shared with the sub account. If you do not provide a value for this field, all the Master account's Meeting Connectors will be shared with the sub account.    **Note:** You can only use this field if `share_mc` value is `true`.
     *
     * @return self
     */
    public function setMeetingConnectorList($meeting_connector_list)
    {
        $this->container['meeting_connector_list'] = $meeting_connector_list;

        return $this;
    }

    /**
     * Gets pay_mode
     *
     * @return string|null
     */
    public function getPayMode()
    {
        return $this->container['pay_mode'];
    }

    /**
     * Sets pay_mode
     *
     * @param string|null $pay_mode The account's payee:  * `master` â€” The Master account holder pays.  * `sub` - The sub account holder pays.    This value defaults to `master`.
     *
     * @return self
     */
    public function setPayMode($pay_mode)
    {
        $allowedValues = $this->getPayModeAllowableValues();
        if (!is_null($pay_mode) && !in_array($pay_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pay_mode', must be one of '%s'",
                    $pay_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_mode'] = $pay_mode;

        return $this;
    }

    /**
     * Gets room_connector_list
     *
     * @return string[]|null
     */
    public function getRoomConnectorList()
    {
        return $this->container['room_connector_list'];
    }

    /**
     * Sets room_connector_list
     *
     * @param string[]|null $room_connector_list A comma-separated list of VRC IP addresses shared with the sub account. If you do not provide a value for this field, all of the Master account's VRCs will be shared with the sub account.    **Note:** You can only use this field if `share_rc` value is `true`.
     *
     * @return self
     */
    public function setRoomConnectorList($room_connector_list)
    {
        $this->container['room_connector_list'] = $room_connector_list;

        return $this;
    }

    /**
     * Gets share_mc
     *
     * @return bool|null
     */
    public function getShareMc()
    {
        return $this->container['share_mc'];
    }

    /**
     * Sets share_mc
     *
     * @param bool|null $share_mc Whether to enable the option for a sub account to use the Master account's shared [Meeting Connectors](https://support.zoom.us/hc/en-us/articles/201363093). Meeting Connectors are only available for On-Premise accounts.    This value defaults to `false`.
     *
     * @return self
     */
    public function setShareMc($share_mc)
    {
        $this->container['share_mc'] = $share_mc;

        return $this;
    }

    /**
     * Gets share_rc
     *
     * @return bool|null
     */
    public function getShareRc()
    {
        return $this->container['share_rc'];
    }

    /**
     * Sets share_rc
     *
     * @param bool|null $share_rc Whether to enable the option for a sub account to use the Master account's shared [Virtual Room Connectors (VRC)](https://support.zoom.us/hc/en-us/articles/202134758-Deploying-the-Virtual-Room-Connector). VRCs are only available for On-premise accounts.    This value defaults to `false`.
     *
     * @return self
     */
    public function setShareRc($share_rc)
    {
        $this->container['share_rc'] = $share_rc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


