<?php
/**
 * UserSettingsInMeeting
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * UserSettingsInMeeting Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserSettingsInMeeting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserSettingsInMeeting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_host_to_enable_focus_mode' => 'bool',
        'allow_live_streaming' => 'bool',
        'post_meeting_feedback' => 'bool',
        'whiteboard' => 'bool',
        'allow_participants_chat_with' => 'int',
        'allow_users_save_chats' => 'int',
        'annotation' => 'bool',
        'attendee_on_hold' => 'bool',
        'attention_mode_focus_mode' => 'bool',
        'auto_saving_chat' => 'bool',
        'breakout_room' => 'bool',
        'breakout_room_schedule' => 'bool',
        'chat' => 'bool',
        'closed_caption' => 'bool',
        'closed_captioning' => '\Zoom\Api\Model\UserSettingsInMeetingClosedCaptioning',
        'co_host' => 'bool',
        'custom_data_center_regions' => 'bool',
        'custom_live_streaming_service' => 'bool',
        'custom_service_instructions' => 'string',
        'data_center_regions' => 'string[]',
        'disable_screen_sharing_for_host_meetings' => 'bool',
        'disable_screen_sharing_for_in_meeting_guests' => 'bool',
        'e2e_encryption' => 'bool',
        'entry_exit_chime' => 'string',
        'far_end_camera_control' => 'bool',
        'feedback' => 'bool',
        'file_transfer' => 'bool',
        'group_hd' => 'bool',
        'join_from_desktop' => 'bool',
        'join_from_mobile' => 'bool',
        'language_interpretation' => '\Zoom\Api\Model\UserSettingsInMeetingLanguageInterpretation',
        'live_streaming_facebook' => 'bool',
        'live_streaming_youtube' => 'bool',
        'manual_captioning' => '\Zoom\Api\Model\UserSettingsInMeetingManualCaptioning',
        'meeting_reactions' => 'bool',
        'meeting_survey' => 'bool',
        'non_verbal_feedback' => 'bool',
        'polling' => 'bool',
        'private_chat' => 'bool',
        'record_play_voice' => 'bool',
        'remote_control' => 'bool',
        'remote_support' => 'bool',
        'request_permission_to_unmute' => 'bool',
        'screen_sharing' => 'bool',
        'share_dual_camera' => 'bool',
        'show_a_join_from_your_browser_link' => 'bool',
        'show_meeting_control_toolbar' => 'bool',
        'slide_control' => 'bool',
        'unchecked_data_center_regions' => 'string[]',
        'virtual_background' => 'bool',
        'virtual_background_settings' => '\Zoom\Api\Model\UserSettingsInMeetingVirtualBackgroundSettings',
        'waiting_room' => 'bool',
        'webinar_chat' => '\Zoom\Api\Model\UserSettingsInMeetingWebinarChat',
        'webinar_live_streaming' => '\Zoom\Api\Model\UserSettingsInMeetingWebinarLiveStreaming',
        'webinar_polling' => '\Zoom\Api\Model\UserSettingsInMeetingWebinarPolling',
        'webinar_survey' => 'bool',
        'who_can_share_screen' => 'string',
        'who_can_share_screen_when_someone_is_sharing' => 'string',
        'participants_share_simultaneously' => 'string',
        'workplace_by_facebook' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_host_to_enable_focus_mode' => null,
        'allow_live_streaming' => null,
        'post_meeting_feedback' => null,
        'whiteboard' => null,
        'allow_participants_chat_with' => null,
        'allow_users_save_chats' => null,
        'annotation' => null,
        'attendee_on_hold' => null,
        'attention_mode_focus_mode' => null,
        'auto_saving_chat' => null,
        'breakout_room' => null,
        'breakout_room_schedule' => null,
        'chat' => null,
        'closed_caption' => null,
        'closed_captioning' => null,
        'co_host' => null,
        'custom_data_center_regions' => null,
        'custom_live_streaming_service' => null,
        'custom_service_instructions' => null,
        'data_center_regions' => null,
        'disable_screen_sharing_for_host_meetings' => null,
        'disable_screen_sharing_for_in_meeting_guests' => null,
        'e2e_encryption' => null,
        'entry_exit_chime' => null,
        'far_end_camera_control' => null,
        'feedback' => null,
        'file_transfer' => null,
        'group_hd' => null,
        'join_from_desktop' => null,
        'join_from_mobile' => null,
        'language_interpretation' => null,
        'live_streaming_facebook' => null,
        'live_streaming_youtube' => null,
        'manual_captioning' => null,
        'meeting_reactions' => null,
        'meeting_survey' => null,
        'non_verbal_feedback' => null,
        'polling' => null,
        'private_chat' => null,
        'record_play_voice' => null,
        'remote_control' => null,
        'remote_support' => null,
        'request_permission_to_unmute' => null,
        'screen_sharing' => null,
        'share_dual_camera' => null,
        'show_a_join_from_your_browser_link' => null,
        'show_meeting_control_toolbar' => null,
        'slide_control' => null,
        'unchecked_data_center_regions' => null,
        'virtual_background' => null,
        'virtual_background_settings' => null,
        'waiting_room' => null,
        'webinar_chat' => null,
        'webinar_live_streaming' => null,
        'webinar_polling' => null,
        'webinar_survey' => null,
        'who_can_share_screen' => null,
        'who_can_share_screen_when_someone_is_sharing' => null,
        'participants_share_simultaneously' => null,
        'workplace_by_facebook' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_host_to_enable_focus_mode' => 'allow_host_to_enable_focus_mode',
        'allow_live_streaming' => 'allow_live_streaming',
        'post_meeting_feedback' => 'post_meeting_feedback',
        'whiteboard' => 'whiteboard',
        'allow_participants_chat_with' => 'allow_participants_chat_with',
        'allow_users_save_chats' => 'allow_users_save_chats',
        'annotation' => 'annotation',
        'attendee_on_hold' => 'attendee_on_hold',
        'attention_mode_focus_mode' => 'attention_mode_focus_mode',
        'auto_saving_chat' => 'auto_saving_chat',
        'breakout_room' => 'breakout_room',
        'breakout_room_schedule' => 'breakout_room_schedule',
        'chat' => 'chat',
        'closed_caption' => 'closed_caption',
        'closed_captioning' => 'closed_captioning',
        'co_host' => 'co_host',
        'custom_data_center_regions' => 'custom_data_center_regions',
        'custom_live_streaming_service' => 'custom_live_streaming_service',
        'custom_service_instructions' => 'custom_service_instructions',
        'data_center_regions' => 'data_center_regions',
        'disable_screen_sharing_for_host_meetings' => 'disable_screen_sharing_for_host_meetings',
        'disable_screen_sharing_for_in_meeting_guests' => 'disable_screen_sharing_for_in_meeting_guests',
        'e2e_encryption' => 'e2e_encryption',
        'entry_exit_chime' => 'entry_exit_chime',
        'far_end_camera_control' => 'far_end_camera_control',
        'feedback' => 'feedback',
        'file_transfer' => 'file_transfer',
        'group_hd' => 'group_hd',
        'join_from_desktop' => 'join_from_desktop',
        'join_from_mobile' => 'join_from_mobile',
        'language_interpretation' => 'language_interpretation',
        'live_streaming_facebook' => 'live_streaming_facebook',
        'live_streaming_youtube' => 'live_streaming_youtube',
        'manual_captioning' => 'manual_captioning',
        'meeting_reactions' => 'meeting_reactions',
        'meeting_survey' => 'meeting_survey',
        'non_verbal_feedback' => 'non_verbal_feedback',
        'polling' => 'polling',
        'private_chat' => 'private_chat',
        'record_play_voice' => 'record_play_voice',
        'remote_control' => 'remote_control',
        'remote_support' => 'remote_support',
        'request_permission_to_unmute' => 'request_permission_to_unmute',
        'screen_sharing' => 'screen_sharing',
        'share_dual_camera' => 'share_dual_camera',
        'show_a_join_from_your_browser_link' => 'show_a_join_from_your_browser_link',
        'show_meeting_control_toolbar' => 'show_meeting_control_toolbar',
        'slide_control' => 'slide_control',
        'unchecked_data_center_regions' => 'unchecked_data_center_regions',
        'virtual_background' => 'virtual_background',
        'virtual_background_settings' => 'virtual_background_settings',
        'waiting_room' => 'waiting_room',
        'webinar_chat' => 'webinar_chat',
        'webinar_live_streaming' => 'webinar_live_streaming',
        'webinar_polling' => 'webinar_polling',
        'webinar_survey' => 'webinar_survey',
        'who_can_share_screen' => 'who_can_share_screen',
        'who_can_share_screen_when_someone_is_sharing' => 'who_can_share_screen_when_someone_is_sharing',
        'participants_share_simultaneously' => 'participants_share_simultaneously',
        'workplace_by_facebook' => 'workplace_by_facebook'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_host_to_enable_focus_mode' => 'setAllowHostToEnableFocusMode',
        'allow_live_streaming' => 'setAllowLiveStreaming',
        'post_meeting_feedback' => 'setPostMeetingFeedback',
        'whiteboard' => 'setWhiteboard',
        'allow_participants_chat_with' => 'setAllowParticipantsChatWith',
        'allow_users_save_chats' => 'setAllowUsersSaveChats',
        'annotation' => 'setAnnotation',
        'attendee_on_hold' => 'setAttendeeOnHold',
        'attention_mode_focus_mode' => 'setAttentionModeFocusMode',
        'auto_saving_chat' => 'setAutoSavingChat',
        'breakout_room' => 'setBreakoutRoom',
        'breakout_room_schedule' => 'setBreakoutRoomSchedule',
        'chat' => 'setChat',
        'closed_caption' => 'setClosedCaption',
        'closed_captioning' => 'setClosedCaptioning',
        'co_host' => 'setCoHost',
        'custom_data_center_regions' => 'setCustomDataCenterRegions',
        'custom_live_streaming_service' => 'setCustomLiveStreamingService',
        'custom_service_instructions' => 'setCustomServiceInstructions',
        'data_center_regions' => 'setDataCenterRegions',
        'disable_screen_sharing_for_host_meetings' => 'setDisableScreenSharingForHostMeetings',
        'disable_screen_sharing_for_in_meeting_guests' => 'setDisableScreenSharingForInMeetingGuests',
        'e2e_encryption' => 'setE2eEncryption',
        'entry_exit_chime' => 'setEntryExitChime',
        'far_end_camera_control' => 'setFarEndCameraControl',
        'feedback' => 'setFeedback',
        'file_transfer' => 'setFileTransfer',
        'group_hd' => 'setGroupHd',
        'join_from_desktop' => 'setJoinFromDesktop',
        'join_from_mobile' => 'setJoinFromMobile',
        'language_interpretation' => 'setLanguageInterpretation',
        'live_streaming_facebook' => 'setLiveStreamingFacebook',
        'live_streaming_youtube' => 'setLiveStreamingYoutube',
        'manual_captioning' => 'setManualCaptioning',
        'meeting_reactions' => 'setMeetingReactions',
        'meeting_survey' => 'setMeetingSurvey',
        'non_verbal_feedback' => 'setNonVerbalFeedback',
        'polling' => 'setPolling',
        'private_chat' => 'setPrivateChat',
        'record_play_voice' => 'setRecordPlayVoice',
        'remote_control' => 'setRemoteControl',
        'remote_support' => 'setRemoteSupport',
        'request_permission_to_unmute' => 'setRequestPermissionToUnmute',
        'screen_sharing' => 'setScreenSharing',
        'share_dual_camera' => 'setShareDualCamera',
        'show_a_join_from_your_browser_link' => 'setShowAJoinFromYourBrowserLink',
        'show_meeting_control_toolbar' => 'setShowMeetingControlToolbar',
        'slide_control' => 'setSlideControl',
        'unchecked_data_center_regions' => 'setUncheckedDataCenterRegions',
        'virtual_background' => 'setVirtualBackground',
        'virtual_background_settings' => 'setVirtualBackgroundSettings',
        'waiting_room' => 'setWaitingRoom',
        'webinar_chat' => 'setWebinarChat',
        'webinar_live_streaming' => 'setWebinarLiveStreaming',
        'webinar_polling' => 'setWebinarPolling',
        'webinar_survey' => 'setWebinarSurvey',
        'who_can_share_screen' => 'setWhoCanShareScreen',
        'who_can_share_screen_when_someone_is_sharing' => 'setWhoCanShareScreenWhenSomeoneIsSharing',
        'participants_share_simultaneously' => 'setParticipantsShareSimultaneously',
        'workplace_by_facebook' => 'setWorkplaceByFacebook'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_host_to_enable_focus_mode' => 'getAllowHostToEnableFocusMode',
        'allow_live_streaming' => 'getAllowLiveStreaming',
        'post_meeting_feedback' => 'getPostMeetingFeedback',
        'whiteboard' => 'getWhiteboard',
        'allow_participants_chat_with' => 'getAllowParticipantsChatWith',
        'allow_users_save_chats' => 'getAllowUsersSaveChats',
        'annotation' => 'getAnnotation',
        'attendee_on_hold' => 'getAttendeeOnHold',
        'attention_mode_focus_mode' => 'getAttentionModeFocusMode',
        'auto_saving_chat' => 'getAutoSavingChat',
        'breakout_room' => 'getBreakoutRoom',
        'breakout_room_schedule' => 'getBreakoutRoomSchedule',
        'chat' => 'getChat',
        'closed_caption' => 'getClosedCaption',
        'closed_captioning' => 'getClosedCaptioning',
        'co_host' => 'getCoHost',
        'custom_data_center_regions' => 'getCustomDataCenterRegions',
        'custom_live_streaming_service' => 'getCustomLiveStreamingService',
        'custom_service_instructions' => 'getCustomServiceInstructions',
        'data_center_regions' => 'getDataCenterRegions',
        'disable_screen_sharing_for_host_meetings' => 'getDisableScreenSharingForHostMeetings',
        'disable_screen_sharing_for_in_meeting_guests' => 'getDisableScreenSharingForInMeetingGuests',
        'e2e_encryption' => 'getE2eEncryption',
        'entry_exit_chime' => 'getEntryExitChime',
        'far_end_camera_control' => 'getFarEndCameraControl',
        'feedback' => 'getFeedback',
        'file_transfer' => 'getFileTransfer',
        'group_hd' => 'getGroupHd',
        'join_from_desktop' => 'getJoinFromDesktop',
        'join_from_mobile' => 'getJoinFromMobile',
        'language_interpretation' => 'getLanguageInterpretation',
        'live_streaming_facebook' => 'getLiveStreamingFacebook',
        'live_streaming_youtube' => 'getLiveStreamingYoutube',
        'manual_captioning' => 'getManualCaptioning',
        'meeting_reactions' => 'getMeetingReactions',
        'meeting_survey' => 'getMeetingSurvey',
        'non_verbal_feedback' => 'getNonVerbalFeedback',
        'polling' => 'getPolling',
        'private_chat' => 'getPrivateChat',
        'record_play_voice' => 'getRecordPlayVoice',
        'remote_control' => 'getRemoteControl',
        'remote_support' => 'getRemoteSupport',
        'request_permission_to_unmute' => 'getRequestPermissionToUnmute',
        'screen_sharing' => 'getScreenSharing',
        'share_dual_camera' => 'getShareDualCamera',
        'show_a_join_from_your_browser_link' => 'getShowAJoinFromYourBrowserLink',
        'show_meeting_control_toolbar' => 'getShowMeetingControlToolbar',
        'slide_control' => 'getSlideControl',
        'unchecked_data_center_regions' => 'getUncheckedDataCenterRegions',
        'virtual_background' => 'getVirtualBackground',
        'virtual_background_settings' => 'getVirtualBackgroundSettings',
        'waiting_room' => 'getWaitingRoom',
        'webinar_chat' => 'getWebinarChat',
        'webinar_live_streaming' => 'getWebinarLiveStreaming',
        'webinar_polling' => 'getWebinarPolling',
        'webinar_survey' => 'getWebinarSurvey',
        'who_can_share_screen' => 'getWhoCanShareScreen',
        'who_can_share_screen_when_someone_is_sharing' => 'getWhoCanShareScreenWhenSomeoneIsSharing',
        'participants_share_simultaneously' => 'getParticipantsShareSimultaneously',
        'workplace_by_facebook' => 'getWorkplaceByFacebook'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ALLOW_PARTICIPANTS_CHAT_WITH_1 = 1;
    public const ALLOW_PARTICIPANTS_CHAT_WITH_2 = 2;
    public const ALLOW_PARTICIPANTS_CHAT_WITH_3 = 3;
    public const ALLOW_PARTICIPANTS_CHAT_WITH_4 = 4;
    public const ALLOW_USERS_SAVE_CHATS_1 = 1;
    public const ALLOW_USERS_SAVE_CHATS_2 = 2;
    public const ALLOW_USERS_SAVE_CHATS_3 = 3;
    public const DATA_CENTER_REGIONS_AU = 'AU';
    public const DATA_CENTER_REGIONS_LA = 'LA';
    public const DATA_CENTER_REGIONS_CA = 'CA';
    public const DATA_CENTER_REGIONS_CN = 'CN';
    public const DATA_CENTER_REGIONS_DE = 'DE';
    public const DATA_CENTER_REGIONS_HK = 'HK';
    public const DATA_CENTER_REGIONS_IN = 'IN';
    public const DATA_CENTER_REGIONS_IE = 'IE';
    public const DATA_CENTER_REGIONS_TY = 'TY';
    public const DATA_CENTER_REGIONS_MX = 'MX';
    public const DATA_CENTER_REGIONS_NL = 'NL';
    public const DATA_CENTER_REGIONS_SG = 'SG';
    public const DATA_CENTER_REGIONS_US = 'US';
    public const ENTRY_EXIT_CHIME_HOST = 'host';
    public const ENTRY_EXIT_CHIME_ALL = 'all';
    public const ENTRY_EXIT_CHIME_NONE = 'none';
    public const UNCHECKED_DATA_CENTER_REGIONS_EU = 'EU';
    public const UNCHECKED_DATA_CENTER_REGIONS_HK = 'HK';
    public const UNCHECKED_DATA_CENTER_REGIONS_AU = 'AU';
    public const UNCHECKED_DATA_CENTER_REGIONS_IN = 'IN';
    public const UNCHECKED_DATA_CENTER_REGIONS_TY = 'TY';
    public const UNCHECKED_DATA_CENTER_REGIONS_CN = 'CN';
    public const UNCHECKED_DATA_CENTER_REGIONS_US = 'US';
    public const UNCHECKED_DATA_CENTER_REGIONS_CA = 'CA';
    public const UNCHECKED_DATA_CENTER_REGIONS_DE = 'DE';
    public const UNCHECKED_DATA_CENTER_REGIONS_NL = 'NL';
    public const UNCHECKED_DATA_CENTER_REGIONS_LA = 'LA';
    public const WHO_CAN_SHARE_SCREEN_HOST = 'host';
    public const WHO_CAN_SHARE_SCREEN_ALL = 'all';
    public const WHO_CAN_SHARE_SCREEN_WHEN_SOMEONE_IS_SHARING_HOST = 'host';
    public const WHO_CAN_SHARE_SCREEN_WHEN_SOMEONE_IS_SHARING_ALL = 'all';
    public const PARTICIPANTS_SHARE_SIMULTANEOUSLY_MULTIPLE = 'multiple';
    public const PARTICIPANTS_SHARE_SIMULTANEOUSLY_ONE = 'one';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowParticipantsChatWithAllowableValues()
    {
        return [
            self::ALLOW_PARTICIPANTS_CHAT_WITH_1,
            self::ALLOW_PARTICIPANTS_CHAT_WITH_2,
            self::ALLOW_PARTICIPANTS_CHAT_WITH_3,
            self::ALLOW_PARTICIPANTS_CHAT_WITH_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowUsersSaveChatsAllowableValues()
    {
        return [
            self::ALLOW_USERS_SAVE_CHATS_1,
            self::ALLOW_USERS_SAVE_CHATS_2,
            self::ALLOW_USERS_SAVE_CHATS_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataCenterRegionsAllowableValues()
    {
        return [
            self::DATA_CENTER_REGIONS_AU,
            self::DATA_CENTER_REGIONS_LA,
            self::DATA_CENTER_REGIONS_CA,
            self::DATA_CENTER_REGIONS_CN,
            self::DATA_CENTER_REGIONS_DE,
            self::DATA_CENTER_REGIONS_HK,
            self::DATA_CENTER_REGIONS_IN,
            self::DATA_CENTER_REGIONS_IE,
            self::DATA_CENTER_REGIONS_TY,
            self::DATA_CENTER_REGIONS_MX,
            self::DATA_CENTER_REGIONS_NL,
            self::DATA_CENTER_REGIONS_SG,
            self::DATA_CENTER_REGIONS_US,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntryExitChimeAllowableValues()
    {
        return [
            self::ENTRY_EXIT_CHIME_HOST,
            self::ENTRY_EXIT_CHIME_ALL,
            self::ENTRY_EXIT_CHIME_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUncheckedDataCenterRegionsAllowableValues()
    {
        return [
            self::UNCHECKED_DATA_CENTER_REGIONS_EU,
            self::UNCHECKED_DATA_CENTER_REGIONS_HK,
            self::UNCHECKED_DATA_CENTER_REGIONS_AU,
            self::UNCHECKED_DATA_CENTER_REGIONS_IN,
            self::UNCHECKED_DATA_CENTER_REGIONS_TY,
            self::UNCHECKED_DATA_CENTER_REGIONS_CN,
            self::UNCHECKED_DATA_CENTER_REGIONS_US,
            self::UNCHECKED_DATA_CENTER_REGIONS_CA,
            self::UNCHECKED_DATA_CENTER_REGIONS_DE,
            self::UNCHECKED_DATA_CENTER_REGIONS_NL,
            self::UNCHECKED_DATA_CENTER_REGIONS_LA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhoCanShareScreenAllowableValues()
    {
        return [
            self::WHO_CAN_SHARE_SCREEN_HOST,
            self::WHO_CAN_SHARE_SCREEN_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhoCanShareScreenWhenSomeoneIsSharingAllowableValues()
    {
        return [
            self::WHO_CAN_SHARE_SCREEN_WHEN_SOMEONE_IS_SHARING_HOST,
            self::WHO_CAN_SHARE_SCREEN_WHEN_SOMEONE_IS_SHARING_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParticipantsShareSimultaneouslyAllowableValues()
    {
        return [
            self::PARTICIPANTS_SHARE_SIMULTANEOUSLY_MULTIPLE,
            self::PARTICIPANTS_SHARE_SIMULTANEOUSLY_ONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_host_to_enable_focus_mode'] = $data['allow_host_to_enable_focus_mode'] ?? null;
        $this->container['allow_live_streaming'] = $data['allow_live_streaming'] ?? null;
        $this->container['post_meeting_feedback'] = $data['post_meeting_feedback'] ?? null;
        $this->container['whiteboard'] = $data['whiteboard'] ?? null;
        $this->container['allow_participants_chat_with'] = $data['allow_participants_chat_with'] ?? null;
        $this->container['allow_users_save_chats'] = $data['allow_users_save_chats'] ?? null;
        $this->container['annotation'] = $data['annotation'] ?? false;
        $this->container['attendee_on_hold'] = $data['attendee_on_hold'] ?? false;
        $this->container['attention_mode_focus_mode'] = $data['attention_mode_focus_mode'] ?? false;
        $this->container['auto_saving_chat'] = $data['auto_saving_chat'] ?? false;
        $this->container['breakout_room'] = $data['breakout_room'] ?? false;
        $this->container['breakout_room_schedule'] = $data['breakout_room_schedule'] ?? null;
        $this->container['chat'] = $data['chat'] ?? false;
        $this->container['closed_caption'] = $data['closed_caption'] ?? false;
        $this->container['closed_captioning'] = $data['closed_captioning'] ?? null;
        $this->container['co_host'] = $data['co_host'] ?? false;
        $this->container['custom_data_center_regions'] = $data['custom_data_center_regions'] ?? null;
        $this->container['custom_live_streaming_service'] = $data['custom_live_streaming_service'] ?? null;
        $this->container['custom_service_instructions'] = $data['custom_service_instructions'] ?? null;
        $this->container['data_center_regions'] = $data['data_center_regions'] ?? null;
        $this->container['disable_screen_sharing_for_host_meetings'] = $data['disable_screen_sharing_for_host_meetings'] ?? null;
        $this->container['disable_screen_sharing_for_in_meeting_guests'] = $data['disable_screen_sharing_for_in_meeting_guests'] ?? null;
        $this->container['e2e_encryption'] = $data['e2e_encryption'] ?? null;
        $this->container['entry_exit_chime'] = $data['entry_exit_chime'] ?? 'all';
        $this->container['far_end_camera_control'] = $data['far_end_camera_control'] ?? false;
        $this->container['feedback'] = $data['feedback'] ?? false;
        $this->container['file_transfer'] = $data['file_transfer'] ?? null;
        $this->container['group_hd'] = $data['group_hd'] ?? false;
        $this->container['join_from_desktop'] = $data['join_from_desktop'] ?? null;
        $this->container['join_from_mobile'] = $data['join_from_mobile'] ?? null;
        $this->container['language_interpretation'] = $data['language_interpretation'] ?? null;
        $this->container['live_streaming_facebook'] = $data['live_streaming_facebook'] ?? null;
        $this->container['live_streaming_youtube'] = $data['live_streaming_youtube'] ?? null;
        $this->container['manual_captioning'] = $data['manual_captioning'] ?? null;
        $this->container['meeting_reactions'] = $data['meeting_reactions'] ?? null;
        $this->container['meeting_survey'] = $data['meeting_survey'] ?? null;
        $this->container['non_verbal_feedback'] = $data['non_verbal_feedback'] ?? false;
        $this->container['polling'] = $data['polling'] ?? false;
        $this->container['private_chat'] = $data['private_chat'] ?? false;
        $this->container['record_play_voice'] = $data['record_play_voice'] ?? null;
        $this->container['remote_control'] = $data['remote_control'] ?? false;
        $this->container['remote_support'] = $data['remote_support'] ?? false;
        $this->container['request_permission_to_unmute'] = $data['request_permission_to_unmute'] ?? null;
        $this->container['screen_sharing'] = $data['screen_sharing'] ?? null;
        $this->container['share_dual_camera'] = $data['share_dual_camera'] ?? false;
        $this->container['show_a_join_from_your_browser_link'] = $data['show_a_join_from_your_browser_link'] ?? null;
        $this->container['show_meeting_control_toolbar'] = $data['show_meeting_control_toolbar'] ?? null;
        $this->container['slide_control'] = $data['slide_control'] ?? null;
        $this->container['unchecked_data_center_regions'] = $data['unchecked_data_center_regions'] ?? null;
        $this->container['virtual_background'] = $data['virtual_background'] ?? false;
        $this->container['virtual_background_settings'] = $data['virtual_background_settings'] ?? null;
        $this->container['waiting_room'] = $data['waiting_room'] ?? false;
        $this->container['webinar_chat'] = $data['webinar_chat'] ?? null;
        $this->container['webinar_live_streaming'] = $data['webinar_live_streaming'] ?? null;
        $this->container['webinar_polling'] = $data['webinar_polling'] ?? null;
        $this->container['webinar_survey'] = $data['webinar_survey'] ?? null;
        $this->container['who_can_share_screen'] = $data['who_can_share_screen'] ?? null;
        $this->container['who_can_share_screen_when_someone_is_sharing'] = $data['who_can_share_screen_when_someone_is_sharing'] ?? null;
        $this->container['participants_share_simultaneously'] = $data['participants_share_simultaneously'] ?? null;
        $this->container['workplace_by_facebook'] = $data['workplace_by_facebook'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAllowParticipantsChatWithAllowableValues();
        if (!is_null($this->container['allow_participants_chat_with']) && !in_array($this->container['allow_participants_chat_with'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_participants_chat_with', must be one of '%s'",
                $this->container['allow_participants_chat_with'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowUsersSaveChatsAllowableValues();
        if (!is_null($this->container['allow_users_save_chats']) && !in_array($this->container['allow_users_save_chats'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_users_save_chats', must be one of '%s'",
                $this->container['allow_users_save_chats'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEntryExitChimeAllowableValues();
        if (!is_null($this->container['entry_exit_chime']) && !in_array($this->container['entry_exit_chime'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entry_exit_chime', must be one of '%s'",
                $this->container['entry_exit_chime'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWhoCanShareScreenAllowableValues();
        if (!is_null($this->container['who_can_share_screen']) && !in_array($this->container['who_can_share_screen'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'who_can_share_screen', must be one of '%s'",
                $this->container['who_can_share_screen'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWhoCanShareScreenWhenSomeoneIsSharingAllowableValues();
        if (!is_null($this->container['who_can_share_screen_when_someone_is_sharing']) && !in_array($this->container['who_can_share_screen_when_someone_is_sharing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'who_can_share_screen_when_someone_is_sharing', must be one of '%s'",
                $this->container['who_can_share_screen_when_someone_is_sharing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getParticipantsShareSimultaneouslyAllowableValues();
        if (!is_null($this->container['participants_share_simultaneously']) && !in_array($this->container['participants_share_simultaneously'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'participants_share_simultaneously', must be one of '%s'",
                $this->container['participants_share_simultaneously'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_host_to_enable_focus_mode
     *
     * @return bool|null
     */
    public function getAllowHostToEnableFocusMode()
    {
        return $this->container['allow_host_to_enable_focus_mode'];
    }

    /**
     * Sets allow_host_to_enable_focus_mode
     *
     * @param bool|null $allow_host_to_enable_focus_mode Allow the host to enable [**Focus Mode**](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) when scheduling a meeting. This value defaults to `null`.
     *
     * @return self
     */
    public function setAllowHostToEnableFocusMode($allow_host_to_enable_focus_mode)
    {
        $this->container['allow_host_to_enable_focus_mode'] = $allow_host_to_enable_focus_mode;

        return $this;
    }

    /**
     * Gets allow_live_streaming
     *
     * @return bool|null
     */
    public function getAllowLiveStreaming()
    {
        return $this->container['allow_live_streaming'];
    }

    /**
     * Sets allow_live_streaming
     *
     * @param bool|null $allow_live_streaming Whether to allow live streaming.
     *
     * @return self
     */
    public function setAllowLiveStreaming($allow_live_streaming)
    {
        $this->container['allow_live_streaming'] = $allow_live_streaming;

        return $this;
    }

    /**
     * Gets post_meeting_feedback
     *
     * @return bool|null
     */
    public function getPostMeetingFeedback()
    {
        return $this->container['post_meeting_feedback'];
    }

    /**
     * Sets post_meeting_feedback
     *
     * @param bool|null $post_meeting_feedback Whether to display a thumbs up or thumbs down feedback survey at the end of each meeting.
     *
     * @return self
     */
    public function setPostMeetingFeedback($post_meeting_feedback)
    {
        $this->container['post_meeting_feedback'] = $post_meeting_feedback;

        return $this;
    }

    /**
     * Gets whiteboard
     *
     * @return bool|null
     */
    public function getWhiteboard()
    {
        return $this->container['whiteboard'];
    }

    /**
     * Sets whiteboard
     *
     * @param bool|null $whiteboard Whether to enable the [**Zoom Whiteboard**](https://support.zoom.us/hc/en-us/articles/4410916881421) feature.
     *
     * @return self
     */
    public function setWhiteboard($whiteboard)
    {
        $this->container['whiteboard'] = $whiteboard;

        return $this;
    }

    /**
     * Gets allow_participants_chat_with
     *
     * @return int|null
     */
    public function getAllowParticipantsChatWith()
    {
        return $this->container['allow_participants_chat_with'];
    }

    /**
     * Sets allow_participants_chat_with
     *
     * @param int|null $allow_participants_chat_with Specify who participants can chat with: * `1` — The participant cannot use chat. * `2` — The participant can chat with the host and co-hosts only.  * `3` — The participant can chat with other participants publicly. * `4` - The participant can chat with other participants publicly and privately.  **Note:** This setting is only available with client versions 5.7.3 and above.
     *
     * @return self
     */
    public function setAllowParticipantsChatWith($allow_participants_chat_with)
    {
        $allowedValues = $this->getAllowParticipantsChatWithAllowableValues();
        if (!is_null($allow_participants_chat_with) && !in_array($allow_participants_chat_with, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_participants_chat_with', must be one of '%s'",
                    $allow_participants_chat_with,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_participants_chat_with'] = $allow_participants_chat_with;

        return $this;
    }

    /**
     * Gets allow_users_save_chats
     *
     * @return int|null
     */
    public function getAllowUsersSaveChats()
    {
        return $this->container['allow_users_save_chats'];
    }

    /**
     * Sets allow_users_save_chats
     *
     * @param int|null $allow_users_save_chats Specify how participants can save meeting chats: * `1` — Participants cannot save meeting chats. * `2` — Participants can only save host and co-host meeting chats. * `3` — Participants can save all meeting chats.
     *
     * @return self
     */
    public function setAllowUsersSaveChats($allow_users_save_chats)
    {
        $allowedValues = $this->getAllowUsersSaveChatsAllowableValues();
        if (!is_null($allow_users_save_chats) && !in_array($allow_users_save_chats, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_users_save_chats', must be one of '%s'",
                    $allow_users_save_chats,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_users_save_chats'] = $allow_users_save_chats;

        return $this;
    }

    /**
     * Gets annotation
     *
     * @return bool|null
     */
    public function getAnnotation()
    {
        return $this->container['annotation'];
    }

    /**
     * Sets annotation
     *
     * @param bool|null $annotation Allow participants to use annotation tools.
     *
     * @return self
     */
    public function setAnnotation($annotation)
    {
        $this->container['annotation'] = $annotation;

        return $this;
    }

    /**
     * Gets attendee_on_hold
     *
     * @return bool|null
     * @deprecated
     */
    public function getAttendeeOnHold()
    {
        return $this->container['attendee_on_hold'];
    }

    /**
     * Sets attendee_on_hold
     *
     * @param bool|null $attendee_on_hold Allow host to put attendee on hold.  **This field has been deprecated and is no longer supported.**
     *
     * @return self
     * @deprecated
     */
    public function setAttendeeOnHold($attendee_on_hold)
    {
        $this->container['attendee_on_hold'] = $attendee_on_hold;

        return $this;
    }

    /**
     * Gets attention_mode_focus_mode
     *
     * @return bool|null
     */
    public function getAttentionModeFocusMode()
    {
        return $this->container['attention_mode_focus_mode'];
    }

    /**
     * Sets attention_mode_focus_mode
     *
     * @param bool|null $attention_mode_focus_mode Whether the [**Focus Mode**](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) feature is enabled. When enabled, this feature only displays the host and co-hosts' video and profile pictures during a meeting.    This value defaults to `false`.
     *
     * @return self
     */
    public function setAttentionModeFocusMode($attention_mode_focus_mode)
    {
        $this->container['attention_mode_focus_mode'] = $attention_mode_focus_mode;

        return $this;
    }

    /**
     * Gets auto_saving_chat
     *
     * @return bool|null
     */
    public function getAutoSavingChat()
    {
        return $this->container['auto_saving_chat'];
    }

    /**
     * Sets auto_saving_chat
     *
     * @param bool|null $auto_saving_chat Auto save all in-meeting chats.
     *
     * @return self
     */
    public function setAutoSavingChat($auto_saving_chat)
    {
        $this->container['auto_saving_chat'] = $auto_saving_chat;

        return $this;
    }

    /**
     * Gets breakout_room
     *
     * @return bool|null
     */
    public function getBreakoutRoom()
    {
        return $this->container['breakout_room'];
    }

    /**
     * Sets breakout_room
     *
     * @param bool|null $breakout_room Allow host to split meeting participants into separate breakout rooms.
     *
     * @return self
     */
    public function setBreakoutRoom($breakout_room)
    {
        $this->container['breakout_room'] = $breakout_room;

        return $this;
    }

    /**
     * Gets breakout_room_schedule
     *
     * @return bool|null
     */
    public function getBreakoutRoomSchedule()
    {
        return $this->container['breakout_room_schedule'];
    }

    /**
     * Sets breakout_room_schedule
     *
     * @param bool|null $breakout_room_schedule Whether the host can assign participants to breakout rooms when scheduling. This feature is only available in version 4.5.0 or higher.
     *
     * @return self
     */
    public function setBreakoutRoomSchedule($breakout_room_schedule)
    {
        $this->container['breakout_room_schedule'] = $breakout_room_schedule;

        return $this;
    }

    /**
     * Gets chat
     *
     * @return bool|null
     */
    public function getChat()
    {
        return $this->container['chat'];
    }

    /**
     * Sets chat
     *
     * @param bool|null $chat Enable chat during meeting for all participants.
     *
     * @return self
     */
    public function setChat($chat)
    {
        $this->container['chat'] = $chat;

        return $this;
    }

    /**
     * Gets closed_caption
     *
     * @return bool|null
     */
    public function getClosedCaption()
    {
        return $this->container['closed_caption'];
    }

    /**
     * Sets closed_caption
     *
     * @param bool|null $closed_caption Enable closed captions.
     *
     * @return self
     */
    public function setClosedCaption($closed_caption)
    {
        $this->container['closed_caption'] = $closed_caption;

        return $this;
    }

    /**
     * Gets closed_captioning
     *
     * @return \Zoom\Api\Model\UserSettingsInMeetingClosedCaptioning|null
     */
    public function getClosedCaptioning()
    {
        return $this->container['closed_captioning'];
    }

    /**
     * Sets closed_captioning
     *
     * @param \Zoom\Api\Model\UserSettingsInMeetingClosedCaptioning|null $closed_captioning closed_captioning
     *
     * @return self
     */
    public function setClosedCaptioning($closed_captioning)
    {
        $this->container['closed_captioning'] = $closed_captioning;

        return $this;
    }

    /**
     * Gets co_host
     *
     * @return bool|null
     */
    public function getCoHost()
    {
        return $this->container['co_host'];
    }

    /**
     * Sets co_host
     *
     * @param bool|null $co_host Allow the host to add co-hosts.
     *
     * @return self
     */
    public function setCoHost($co_host)
    {
        $this->container['co_host'] = $co_host;

        return $this;
    }

    /**
     * Gets custom_data_center_regions
     *
     * @return bool|null
     */
    public function getCustomDataCenterRegions()
    {
        return $this->container['custom_data_center_regions'];
    }

    /**
     * Sets custom_data_center_regions
     *
     * @param bool|null $custom_data_center_regions If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting your real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
     *
     * @return self
     */
    public function setCustomDataCenterRegions($custom_data_center_regions)
    {
        $this->container['custom_data_center_regions'] = $custom_data_center_regions;

        return $this;
    }

    /**
     * Gets custom_live_streaming_service
     *
     * @return bool|null
     */
    public function getCustomLiveStreamingService()
    {
        return $this->container['custom_live_streaming_service'];
    }

    /**
     * Sets custom_live_streaming_service
     *
     * @param bool|null $custom_live_streaming_service Whether to allow custom live streaming.
     *
     * @return self
     */
    public function setCustomLiveStreamingService($custom_live_streaming_service)
    {
        $this->container['custom_live_streaming_service'] = $custom_live_streaming_service;

        return $this;
    }

    /**
     * Gets custom_service_instructions
     *
     * @return string|null
     */
    public function getCustomServiceInstructions()
    {
        return $this->container['custom_service_instructions'];
    }

    /**
     * Sets custom_service_instructions
     *
     * @param string|null $custom_service_instructions The custom live streaming service instructions.
     *
     * @return self
     */
    public function setCustomServiceInstructions($custom_service_instructions)
    {
        $this->container['custom_service_instructions'] = $custom_service_instructions;

        return $this;
    }

    /**
     * Gets data_center_regions
     *
     * @return string[]|null
     */
    public function getDataCenterRegions()
    {
        return $this->container['data_center_regions'];
    }

    /**
     * Sets data_center_regions
     *
     * @param string[]|null $data_center_regions If the value of `custom_data_center_regions` is `true`, a comma-separated list of the following [data center regions](https://support.zoom.us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to opt in to:  * `AU` — Australia. * `LA` — Latin America.  * `CA` — Canada.  * `CN` — China.  * `DE` — Germany.  * `HK` — Hong Kong SAR.  * `IN` — India.  * `IE` — Ireland.  * `TY` — Japan.  * `MX` — Mexico.  * `NL` — Netherlands.  * `SG` — Singapore.  * `US` — United States.
     *
     * @return self
     */
    public function setDataCenterRegions($data_center_regions)
    {
        $allowedValues = $this->getDataCenterRegionsAllowableValues();
        if (!is_null($data_center_regions) && array_diff($data_center_regions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_center_regions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_center_regions'] = $data_center_regions;

        return $this;
    }

    /**
     * Gets disable_screen_sharing_for_host_meetings
     *
     * @return bool|null
     */
    public function getDisableScreenSharingForHostMeetings()
    {
        return $this->container['disable_screen_sharing_for_host_meetings'];
    }

    /**
     * Sets disable_screen_sharing_for_host_meetings
     *
     * @param bool|null $disable_screen_sharing_for_host_meetings Enable the **Disable desktop screen sharing for meetings you host** setting.
     *
     * @return self
     */
    public function setDisableScreenSharingForHostMeetings($disable_screen_sharing_for_host_meetings)
    {
        $this->container['disable_screen_sharing_for_host_meetings'] = $disable_screen_sharing_for_host_meetings;

        return $this;
    }

    /**
     * Gets disable_screen_sharing_for_in_meeting_guests
     *
     * @return bool|null
     */
    public function getDisableScreenSharingForInMeetingGuests()
    {
        return $this->container['disable_screen_sharing_for_in_meeting_guests'];
    }

    /**
     * Sets disable_screen_sharing_for_in_meeting_guests
     *
     * @param bool|null $disable_screen_sharing_for_in_meeting_guests Enable the **Disable screen sharing when guests are in the meeting** setting.
     *
     * @return self
     */
    public function setDisableScreenSharingForInMeetingGuests($disable_screen_sharing_for_in_meeting_guests)
    {
        $this->container['disable_screen_sharing_for_in_meeting_guests'] = $disable_screen_sharing_for_in_meeting_guests;

        return $this;
    }

    /**
     * Gets e2e_encryption
     *
     * @return bool|null
     */
    public function getE2eEncryption()
    {
        return $this->container['e2e_encryption'];
    }

    /**
     * Sets e2e_encryption
     *
     * @param bool|null $e2e_encryption Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require encryption for 3rd party endpoints (H323/SIP).
     *
     * @return self
     */
    public function setE2eEncryption($e2e_encryption)
    {
        $this->container['e2e_encryption'] = $e2e_encryption;

        return $this;
    }

    /**
     * Gets entry_exit_chime
     *
     * @return string|null
     */
    public function getEntryExitChime()
    {
        return $this->container['entry_exit_chime'];
    }

    /**
     * Sets entry_exit_chime
     *
     * @param string|null $entry_exit_chime Play sound when participants join or leave:<br>`host` - When host joins or leaves.<br>`all` - When any participant joins or leaves.<br>`none` - No join or leave sound.
     *
     * @return self
     */
    public function setEntryExitChime($entry_exit_chime)
    {
        $allowedValues = $this->getEntryExitChimeAllowableValues();
        if (!is_null($entry_exit_chime) && !in_array($entry_exit_chime, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entry_exit_chime', must be one of '%s'",
                    $entry_exit_chime,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entry_exit_chime'] = $entry_exit_chime;

        return $this;
    }

    /**
     * Gets far_end_camera_control
     *
     * @return bool|null
     */
    public function getFarEndCameraControl()
    {
        return $this->container['far_end_camera_control'];
    }

    /**
     * Sets far_end_camera_control
     *
     * @param bool|null $far_end_camera_control Allow another user to take control of the camera.
     *
     * @return self
     */
    public function setFarEndCameraControl($far_end_camera_control)
    {
        $this->container['far_end_camera_control'] = $far_end_camera_control;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return bool|null
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param bool|null $feedback Enable option to send feedback to Zoom at the end of the meeting.
     *
     * @return self
     */
    public function setFeedback($feedback)
    {
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets file_transfer
     *
     * @return bool|null
     */
    public function getFileTransfer()
    {
        return $this->container['file_transfer'];
    }

    /**
     * Sets file_transfer
     *
     * @param bool|null $file_transfer Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the user or not.
     *
     * @return self
     */
    public function setFileTransfer($file_transfer)
    {
        $this->container['file_transfer'] = $file_transfer;

        return $this;
    }

    /**
     * Gets group_hd
     *
     * @return bool|null
     */
    public function getGroupHd()
    {
        return $this->container['group_hd'];
    }

    /**
     * Sets group_hd
     *
     * @param bool|null $group_hd Enable group HD video.
     *
     * @return self
     */
    public function setGroupHd($group_hd)
    {
        $this->container['group_hd'] = $group_hd;

        return $this;
    }

    /**
     * Gets join_from_desktop
     *
     * @return bool|null
     */
    public function getJoinFromDesktop()
    {
        return $this->container['join_from_desktop'];
    }

    /**
     * Sets join_from_desktop
     *
     * @param bool|null $join_from_desktop Allow participants to join a meeting directly from their desktop browser. Note that the meeting experience from the desktop browser is limited.
     *
     * @return self
     */
    public function setJoinFromDesktop($join_from_desktop)
    {
        $this->container['join_from_desktop'] = $join_from_desktop;

        return $this;
    }

    /**
     * Gets join_from_mobile
     *
     * @return bool|null
     */
    public function getJoinFromMobile()
    {
        return $this->container['join_from_mobile'];
    }

    /**
     * Sets join_from_mobile
     *
     * @param bool|null $join_from_mobile Allow participants to join a meeting directly from their mobile browser. Note that the meeting experience from the mobile browser is limited.
     *
     * @return self
     */
    public function setJoinFromMobile($join_from_mobile)
    {
        $this->container['join_from_mobile'] = $join_from_mobile;

        return $this;
    }

    /**
     * Gets language_interpretation
     *
     * @return \Zoom\Api\Model\UserSettingsInMeetingLanguageInterpretation|null
     */
    public function getLanguageInterpretation()
    {
        return $this->container['language_interpretation'];
    }

    /**
     * Sets language_interpretation
     *
     * @param \Zoom\Api\Model\UserSettingsInMeetingLanguageInterpretation|null $language_interpretation language_interpretation
     *
     * @return self
     */
    public function setLanguageInterpretation($language_interpretation)
    {
        $this->container['language_interpretation'] = $language_interpretation;

        return $this;
    }

    /**
     * Gets live_streaming_facebook
     *
     * @return bool|null
     */
    public function getLiveStreamingFacebook()
    {
        return $this->container['live_streaming_facebook'];
    }

    /**
     * Sets live_streaming_facebook
     *
     * @param bool|null $live_streaming_facebook Whether to allow Facebook live streaming.
     *
     * @return self
     */
    public function setLiveStreamingFacebook($live_streaming_facebook)
    {
        $this->container['live_streaming_facebook'] = $live_streaming_facebook;

        return $this;
    }

    /**
     * Gets live_streaming_youtube
     *
     * @return bool|null
     */
    public function getLiveStreamingYoutube()
    {
        return $this->container['live_streaming_youtube'];
    }

    /**
     * Sets live_streaming_youtube
     *
     * @param bool|null $live_streaming_youtube Whether to allow YouTube live streaming.
     *
     * @return self
     */
    public function setLiveStreamingYoutube($live_streaming_youtube)
    {
        $this->container['live_streaming_youtube'] = $live_streaming_youtube;

        return $this;
    }

    /**
     * Gets manual_captioning
     *
     * @return \Zoom\Api\Model\UserSettingsInMeetingManualCaptioning|null
     */
    public function getManualCaptioning()
    {
        return $this->container['manual_captioning'];
    }

    /**
     * Sets manual_captioning
     *
     * @param \Zoom\Api\Model\UserSettingsInMeetingManualCaptioning|null $manual_captioning manual_captioning
     *
     * @return self
     */
    public function setManualCaptioning($manual_captioning)
    {
        $this->container['manual_captioning'] = $manual_captioning;

        return $this;
    }

    /**
     * Gets meeting_reactions
     *
     * @return bool|null
     */
    public function getMeetingReactions()
    {
        return $this->container['meeting_reactions'];
    }

    /**
     * Sets meeting_reactions
     *
     * @param bool|null $meeting_reactions Allow meeting participants to [communicate using the emoji reactions](https://support.zoom.us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the **Reactions** menu in the meeting toolbar.
     *
     * @return self
     */
    public function setMeetingReactions($meeting_reactions)
    {
        $this->container['meeting_reactions'] = $meeting_reactions;

        return $this;
    }

    /**
     * Gets meeting_survey
     *
     * @return bool|null
     */
    public function getMeetingSurvey()
    {
        return $this->container['meeting_survey'];
    }

    /**
     * Sets meeting_survey
     *
     * @param bool|null $meeting_survey Allow the host to present a survey to participants once a meeting has ended. This feature is only available in version 5.7.3 or higher.
     *
     * @return self
     */
    public function setMeetingSurvey($meeting_survey)
    {
        $this->container['meeting_survey'] = $meeting_survey;

        return $this;
    }

    /**
     * Gets non_verbal_feedback
     *
     * @return bool|null
     */
    public function getNonVerbalFeedback()
    {
        return $this->container['non_verbal_feedback'];
    }

    /**
     * Sets non_verbal_feedback
     *
     * @param bool|null $non_verbal_feedback Enable non-verbal feedback through screens.
     *
     * @return self
     */
    public function setNonVerbalFeedback($non_verbal_feedback)
    {
        $this->container['non_verbal_feedback'] = $non_verbal_feedback;

        return $this;
    }

    /**
     * Gets polling
     *
     * @return bool|null
     */
    public function getPolling()
    {
        return $this->container['polling'];
    }

    /**
     * Sets polling
     *
     * @param bool|null $polling Add polls to the meeting controls.
     *
     * @return self
     */
    public function setPolling($polling)
    {
        $this->container['polling'] = $polling;

        return $this;
    }

    /**
     * Gets private_chat
     *
     * @return bool|null
     */
    public function getPrivateChat()
    {
        return $this->container['private_chat'];
    }

    /**
     * Sets private_chat
     *
     * @param bool|null $private_chat Enable 1:1 private chat between participants during meetings.
     *
     * @return self
     */
    public function setPrivateChat($private_chat)
    {
        $this->container['private_chat'] = $private_chat;

        return $this;
    }

    /**
     * Gets record_play_voice
     *
     * @return bool|null
     */
    public function getRecordPlayVoice()
    {
        return $this->container['record_play_voice'];
    }

    /**
     * Sets record_play_voice
     *
     * @param bool|null $record_play_voice Record and play their own voice.
     *
     * @return self
     */
    public function setRecordPlayVoice($record_play_voice)
    {
        $this->container['record_play_voice'] = $record_play_voice;

        return $this;
    }

    /**
     * Gets remote_control
     *
     * @return bool|null
     */
    public function getRemoteControl()
    {
        return $this->container['remote_control'];
    }

    /**
     * Sets remote_control
     *
     * @param bool|null $remote_control Enable remote control during screensharing.
     *
     * @return self
     */
    public function setRemoteControl($remote_control)
    {
        $this->container['remote_control'] = $remote_control;

        return $this;
    }

    /**
     * Gets remote_support
     *
     * @return bool|null
     */
    public function getRemoteSupport()
    {
        return $this->container['remote_support'];
    }

    /**
     * Sets remote_support
     *
     * @param bool|null $remote_support Allow host to provide 1:1 remote support to a participant.
     *
     * @return self
     */
    public function setRemoteSupport($remote_support)
    {
        $this->container['remote_support'] = $remote_support;

        return $this;
    }

    /**
     * Gets request_permission_to_unmute
     *
     * @return bool|null
     */
    public function getRequestPermissionToUnmute()
    {
        return $this->container['request_permission_to_unmute'];
    }

    /**
     * Sets request_permission_to_unmute
     *
     * @param bool|null $request_permission_to_unmute Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the user or not.
     *
     * @return self
     */
    public function setRequestPermissionToUnmute($request_permission_to_unmute)
    {
        $this->container['request_permission_to_unmute'] = $request_permission_to_unmute;

        return $this;
    }

    /**
     * Gets screen_sharing
     *
     * @return bool|null
     */
    public function getScreenSharing()
    {
        return $this->container['screen_sharing'];
    }

    /**
     * Sets screen_sharing
     *
     * @param bool|null $screen_sharing Allow host and participants to share their screen or content during meetings
     *
     * @return self
     */
    public function setScreenSharing($screen_sharing)
    {
        $this->container['screen_sharing'] = $screen_sharing;

        return $this;
    }

    /**
     * Gets share_dual_camera
     *
     * @return bool|null
     * @deprecated
     */
    public function getShareDualCamera()
    {
        return $this->container['share_dual_camera'];
    }

    /**
     * Sets share_dual_camera
     *
     * @param bool|null $share_dual_camera Share dual camera.
     *
     * @return self
     * @deprecated
     */
    public function setShareDualCamera($share_dual_camera)
    {
        $this->container['share_dual_camera'] = $share_dual_camera;

        return $this;
    }

    /**
     * Gets show_a_join_from_your_browser_link
     *
     * @return bool|null
     */
    public function getShowAJoinFromYourBrowserLink()
    {
        return $this->container['show_a_join_from_your_browser_link'];
    }

    /**
     * Sets show_a_join_from_your_browser_link
     *
     * @param bool|null $show_a_join_from_your_browser_link Allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.
     *
     * @return self
     */
    public function setShowAJoinFromYourBrowserLink($show_a_join_from_your_browser_link)
    {
        $this->container['show_a_join_from_your_browser_link'] = $show_a_join_from_your_browser_link;

        return $this;
    }

    /**
     * Gets show_meeting_control_toolbar
     *
     * @return bool|null
     */
    public function getShowMeetingControlToolbar()
    {
        return $this->container['show_meeting_control_toolbar'];
    }

    /**
     * Sets show_meeting_control_toolbar
     *
     * @param bool|null $show_meeting_control_toolbar Always show meeting controls during a meeting.
     *
     * @return self
     */
    public function setShowMeetingControlToolbar($show_meeting_control_toolbar)
    {
        $this->container['show_meeting_control_toolbar'] = $show_meeting_control_toolbar;

        return $this;
    }

    /**
     * Gets slide_control
     *
     * @return bool|null
     */
    public function getSlideControl()
    {
        return $this->container['slide_control'];
    }

    /**
     * Sets slide_control
     *
     * @param bool|null $slide_control Allow the person sharing during a presentation to allow others to control the slide presentation. This feature is only available in version 5.8.3 or higher.
     *
     * @return self
     */
    public function setSlideControl($slide_control)
    {
        $this->container['slide_control'] = $slide_control;

        return $this;
    }

    /**
     * Gets unchecked_data_center_regions
     *
     * @return string[]|null
     */
    public function getUncheckedDataCenterRegions()
    {
        return $this->container['unchecked_data_center_regions'];
    }

    /**
     * Sets unchecked_data_center_regions
     *
     * @param string[]|null $unchecked_data_center_regions If the value of `custom_data_center_regions` is `true`, a comma-separated list of the following [data center regions](https://support.zoom.us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to **not** opt in to:  * `EU` — Europe.  * `HK` — Hong Kong.  * `AU` — Australia.  * `IN` — India.  * `LA` — Latin America.  * `TY` — Tokyo.  * `CN` — China.  * `US` — United States.  * `CA` — Canada.
     *
     * @return self
     */
    public function setUncheckedDataCenterRegions($unchecked_data_center_regions)
    {
        $allowedValues = $this->getUncheckedDataCenterRegionsAllowableValues();
        if (!is_null($unchecked_data_center_regions) && array_diff($unchecked_data_center_regions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'unchecked_data_center_regions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unchecked_data_center_regions'] = $unchecked_data_center_regions;

        return $this;
    }

    /**
     * Gets virtual_background
     *
     * @return bool|null
     */
    public function getVirtualBackground()
    {
        return $this->container['virtual_background'];
    }

    /**
     * Sets virtual_background
     *
     * @param bool|null $virtual_background Enable virtual background.
     *
     * @return self
     */
    public function setVirtualBackground($virtual_background)
    {
        $this->container['virtual_background'] = $virtual_background;

        return $this;
    }

    /**
     * Gets virtual_background_settings
     *
     * @return \Zoom\Api\Model\UserSettingsInMeetingVirtualBackgroundSettings|null
     */
    public function getVirtualBackgroundSettings()
    {
        return $this->container['virtual_background_settings'];
    }

    /**
     * Sets virtual_background_settings
     *
     * @param \Zoom\Api\Model\UserSettingsInMeetingVirtualBackgroundSettings|null $virtual_background_settings virtual_background_settings
     *
     * @return self
     */
    public function setVirtualBackgroundSettings($virtual_background_settings)
    {
        $this->container['virtual_background_settings'] = $virtual_background_settings;

        return $this;
    }

    /**
     * Gets waiting_room
     *
     * @return bool|null
     */
    public function getWaitingRoom()
    {
        return $this->container['waiting_room'];
    }

    /**
     * Sets waiting_room
     *
     * @param bool|null $waiting_room Enable Waiting room - if enabled, attendees can only join after host approves.
     *
     * @return self
     */
    public function setWaitingRoom($waiting_room)
    {
        $this->container['waiting_room'] = $waiting_room;

        return $this;
    }

    /**
     * Gets webinar_chat
     *
     * @return \Zoom\Api\Model\UserSettingsInMeetingWebinarChat|null
     */
    public function getWebinarChat()
    {
        return $this->container['webinar_chat'];
    }

    /**
     * Sets webinar_chat
     *
     * @param \Zoom\Api\Model\UserSettingsInMeetingWebinarChat|null $webinar_chat webinar_chat
     *
     * @return self
     */
    public function setWebinarChat($webinar_chat)
    {
        $this->container['webinar_chat'] = $webinar_chat;

        return $this;
    }

    /**
     * Gets webinar_live_streaming
     *
     * @return \Zoom\Api\Model\UserSettingsInMeetingWebinarLiveStreaming|null
     */
    public function getWebinarLiveStreaming()
    {
        return $this->container['webinar_live_streaming'];
    }

    /**
     * Sets webinar_live_streaming
     *
     * @param \Zoom\Api\Model\UserSettingsInMeetingWebinarLiveStreaming|null $webinar_live_streaming webinar_live_streaming
     *
     * @return self
     */
    public function setWebinarLiveStreaming($webinar_live_streaming)
    {
        $this->container['webinar_live_streaming'] = $webinar_live_streaming;

        return $this;
    }

    /**
     * Gets webinar_polling
     *
     * @return \Zoom\Api\Model\UserSettingsInMeetingWebinarPolling|null
     */
    public function getWebinarPolling()
    {
        return $this->container['webinar_polling'];
    }

    /**
     * Sets webinar_polling
     *
     * @param \Zoom\Api\Model\UserSettingsInMeetingWebinarPolling|null $webinar_polling webinar_polling
     *
     * @return self
     */
    public function setWebinarPolling($webinar_polling)
    {
        $this->container['webinar_polling'] = $webinar_polling;

        return $this;
    }

    /**
     * Gets webinar_survey
     *
     * @return bool|null
     */
    public function getWebinarSurvey()
    {
        return $this->container['webinar_survey'];
    }

    /**
     * Sets webinar_survey
     *
     * @param bool|null $webinar_survey Allow the host to present surveys to attendees once a webinar has ended.
     *
     * @return self
     */
    public function setWebinarSurvey($webinar_survey)
    {
        $this->container['webinar_survey'] = $webinar_survey;

        return $this;
    }

    /**
     * Gets who_can_share_screen
     *
     * @return string|null
     */
    public function getWhoCanShareScreen()
    {
        return $this->container['who_can_share_screen'];
    }

    /**
     * Sets who_can_share_screen
     *
     * @param string|null $who_can_share_screen Indicates who can share their screen or content during meetings. The value can be one of the following: <br> `host`: Only host can share the screen.<br> `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     *
     * @return self
     */
    public function setWhoCanShareScreen($who_can_share_screen)
    {
        $allowedValues = $this->getWhoCanShareScreenAllowableValues();
        if (!is_null($who_can_share_screen) && !in_array($who_can_share_screen, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'who_can_share_screen', must be one of '%s'",
                    $who_can_share_screen,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['who_can_share_screen'] = $who_can_share_screen;

        return $this;
    }

    /**
     * Gets who_can_share_screen_when_someone_is_sharing
     *
     * @return string|null
     */
    public function getWhoCanShareScreenWhenSomeoneIsSharing()
    {
        return $this->container['who_can_share_screen_when_someone_is_sharing'];
    }

    /**
     * Sets who_can_share_screen_when_someone_is_sharing
     *
     * @param string|null $who_can_share_screen_when_someone_is_sharing Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br> `host`: Only a host can share the screen when someone else is sharing.<br> `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     *
     * @return self
     */
    public function setWhoCanShareScreenWhenSomeoneIsSharing($who_can_share_screen_when_someone_is_sharing)
    {
        $allowedValues = $this->getWhoCanShareScreenWhenSomeoneIsSharingAllowableValues();
        if (!is_null($who_can_share_screen_when_someone_is_sharing) && !in_array($who_can_share_screen_when_someone_is_sharing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'who_can_share_screen_when_someone_is_sharing', must be one of '%s'",
                    $who_can_share_screen_when_someone_is_sharing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['who_can_share_screen_when_someone_is_sharing'] = $who_can_share_screen_when_someone_is_sharing;

        return $this;
    }

    /**
     * Gets participants_share_simultaneously
     *
     * @return string|null
     */
    public function getParticipantsShareSimultaneously()
    {
        return $this->container['participants_share_simultaneously'];
    }

    /**
     * Sets participants_share_simultaneously
     *
     * @param string|null $participants_share_simultaneously Indicates how many participants can share at the same time. The value can be one of the following:<br> `one`: Only one participant can share at a time .<br> `multiple`: Multiple participants can share simultaneously (dual monitors recommended).
     *
     * @return self
     */
    public function setParticipantsShareSimultaneously($participants_share_simultaneously)
    {
        $allowedValues = $this->getParticipantsShareSimultaneouslyAllowableValues();
        if (!is_null($participants_share_simultaneously) && !in_array($participants_share_simultaneously, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'participants_share_simultaneously', must be one of '%s'",
                    $participants_share_simultaneously,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['participants_share_simultaneously'] = $participants_share_simultaneously;

        return $this;
    }

    /**
     * Gets workplace_by_facebook
     *
     * @return bool|null
     */
    public function getWorkplaceByFacebook()
    {
        return $this->container['workplace_by_facebook'];
    }

    /**
     * Sets workplace_by_facebook
     *
     * @param bool|null $workplace_by_facebook Whether to allow Workplace by Facebook live streaming.
     *
     * @return self
     */
    public function setWorkplaceByFacebook($workplace_by_facebook)
    {
        $this->container['workplace_by_facebook'] = $workplace_by_facebook;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


