<?php
/**
 * AccountUpdateSettingsInMeeting
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * AccountUpdateSettingsInMeeting Class Doc Comment
 *
 * @category Class
 * @description In Meeting Account Settings
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountUpdateSettingsInMeeting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountUpdateSettings_in_meeting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alert_guest_join' => 'bool',
        'allow_host_to_enable_focus_mode' => 'bool',
        'allow_live_streaming' => 'bool',
        'allow_participants_chat_with' => 'int',
        'allow_participants_to_rename' => 'bool',
        'allow_show_zoom_windows' => 'bool',
        'allow_users_save_chats' => 'int',
        'annotation' => 'bool',
        'anonymous_question_answer' => 'bool',
        'attendee_on_hold' => 'bool',
        'attention_mode_focus_mode' => 'bool',
        'auto_answer' => 'bool',
        'auto_saving_chat' => 'bool',
        'breakout_room' => 'bool',
        'breakout_room_schedule' => 'bool',
        'chat' => 'bool',
        'closed_caption' => 'bool',
        'closed_captioning' => '\Zoom\Api\Model\AccountUpdateSettingsInMeetingClosedCaptioning',
        'co_host' => 'bool',
        'custom_data_center_regions' => 'bool',
        'custom_live_streaming_service' => 'bool',
        'custom_service_instructions' => 'string',
        'data_center_regions' => 'string[]',
        'disable_screen_sharing_for_host_meetings' => 'bool',
        'disable_screen_sharing_for_in_meeting_guests' => 'bool',
        'dscp_audio' => 'int',
        'dscp_marking' => 'bool',
        'dscp_video' => 'int',
        'e2e_encryption' => 'bool',
        'entry_exit_chime' => 'string',
        'far_end_camera_control' => 'bool',
        'feedback' => 'bool',
        'file_transfer' => 'bool',
        'group_hd' => 'bool',
        'join_from_desktop' => 'bool',
        'join_from_mobile' => 'bool',
        'language_interpretation' => '\Zoom\Api\Model\UpdateGroupSettingsRequestOneOfInMeetingLanguageInterpretation',
        'live_streaming_facebook' => 'bool',
        'live_streaming_youtube' => 'bool',
        'manual_captioning' => '\Zoom\Api\Model\GetGroupSettings200ResponseOneOfInMeetingManualCaptioning',
        'meeting_reactions' => 'bool',
        'meeting_survey' => 'bool',
        'original_audio' => 'bool',
        'p2p_connetion' => 'bool',
        'p2p_ports' => 'bool',
        'polling' => 'bool',
        'meeting_polling' => '\Zoom\Api\Model\AccountUpdateSettingsInMeetingMeetingPolling',
        'ports_range' => 'string',
        'post_meeting_feedback' => 'bool',
        'private_chat' => 'bool',
        'record_play_own_voice' => 'bool',
        'remote_control' => 'bool',
        'non_verbal_feedback' => 'bool',
        'remote_support' => 'bool',
        'request_permission_to_unmute_participants' => 'bool',
        'screen_sharing' => 'bool',
        'sending_default_email_invites' => 'bool',
        'show_a_join_from_your_browser_link' => 'bool',
        'show_meeting_control_toolbar' => 'bool',
        'slide_control' => 'bool',
        'stereo_audio' => 'bool',
        'use_html_format_email' => 'bool',
        'virtual_background' => 'bool',
        'virtual_background_settings' => '\Zoom\Api\Model\AccountUpdateSettingsInMeetingVirtualBackgroundSettings',
        'watermark' => 'bool',
        'webinar_chat' => '\Zoom\Api\Model\AccountUpdateSettingsInMeetingWebinarChat',
        'webinar_live_streaming' => '\Zoom\Api\Model\AccountUpdateSettingsInMeetingWebinarLiveStreaming',
        'webinar_polling' => '\Zoom\Api\Model\AccountUpdateSettingsInMeetingWebinarPolling',
        'webinar_question_answer' => 'bool',
        'webinar_survey' => 'bool',
        'whiteboard' => 'bool',
        'who_can_share_screen' => 'string',
        'who_can_share_screen_when_someone_is_sharing' => 'string',
        'participants_share_simultaneously' => 'string',
        'workplace_by_facebook' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alert_guest_join' => null,
        'allow_host_to_enable_focus_mode' => null,
        'allow_live_streaming' => null,
        'allow_participants_chat_with' => null,
        'allow_participants_to_rename' => null,
        'allow_show_zoom_windows' => null,
        'allow_users_save_chats' => null,
        'annotation' => null,
        'anonymous_question_answer' => null,
        'attendee_on_hold' => null,
        'attention_mode_focus_mode' => null,
        'auto_answer' => null,
        'auto_saving_chat' => null,
        'breakout_room' => null,
        'breakout_room_schedule' => null,
        'chat' => null,
        'closed_caption' => null,
        'closed_captioning' => null,
        'co_host' => null,
        'custom_data_center_regions' => null,
        'custom_live_streaming_service' => null,
        'custom_service_instructions' => null,
        'data_center_regions' => null,
        'disable_screen_sharing_for_host_meetings' => null,
        'disable_screen_sharing_for_in_meeting_guests' => null,
        'dscp_audio' => null,
        'dscp_marking' => null,
        'dscp_video' => null,
        'e2e_encryption' => null,
        'entry_exit_chime' => null,
        'far_end_camera_control' => null,
        'feedback' => null,
        'file_transfer' => null,
        'group_hd' => null,
        'join_from_desktop' => null,
        'join_from_mobile' => null,
        'language_interpretation' => null,
        'live_streaming_facebook' => null,
        'live_streaming_youtube' => null,
        'manual_captioning' => null,
        'meeting_reactions' => null,
        'meeting_survey' => null,
        'original_audio' => null,
        'p2p_connetion' => null,
        'p2p_ports' => null,
        'polling' => null,
        'meeting_polling' => null,
        'ports_range' => null,
        'post_meeting_feedback' => null,
        'private_chat' => null,
        'record_play_own_voice' => null,
        'remote_control' => null,
        'non_verbal_feedback' => null,
        'remote_support' => null,
        'request_permission_to_unmute_participants' => null,
        'screen_sharing' => null,
        'sending_default_email_invites' => null,
        'show_a_join_from_your_browser_link' => null,
        'show_meeting_control_toolbar' => null,
        'slide_control' => null,
        'stereo_audio' => null,
        'use_html_format_email' => null,
        'virtual_background' => null,
        'virtual_background_settings' => null,
        'watermark' => null,
        'webinar_chat' => null,
        'webinar_live_streaming' => null,
        'webinar_polling' => null,
        'webinar_question_answer' => null,
        'webinar_survey' => null,
        'whiteboard' => null,
        'who_can_share_screen' => null,
        'who_can_share_screen_when_someone_is_sharing' => null,
        'participants_share_simultaneously' => null,
        'workplace_by_facebook' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_guest_join' => 'alert_guest_join',
        'allow_host_to_enable_focus_mode' => 'allow_host_to_enable_focus_mode',
        'allow_live_streaming' => 'allow_live_streaming',
        'allow_participants_chat_with' => 'allow_participants_chat_with',
        'allow_participants_to_rename' => 'allow_participants_to_rename',
        'allow_show_zoom_windows' => 'allow_show_zoom_windows',
        'allow_users_save_chats' => 'allow_users_save_chats',
        'annotation' => 'annotation',
        'anonymous_question_answer' => 'anonymous_question_answer',
        'attendee_on_hold' => 'attendee_on_hold',
        'attention_mode_focus_mode' => 'attention_mode_focus_mode',
        'auto_answer' => 'auto_answer',
        'auto_saving_chat' => 'auto_saving_chat',
        'breakout_room' => 'breakout_room',
        'breakout_room_schedule' => 'breakout_room_schedule',
        'chat' => 'chat',
        'closed_caption' => 'closed_caption',
        'closed_captioning' => 'closed_captioning',
        'co_host' => 'co_host',
        'custom_data_center_regions' => 'custom_data_center_regions',
        'custom_live_streaming_service' => 'custom_live_streaming_service',
        'custom_service_instructions' => 'custom_service_instructions',
        'data_center_regions' => 'data_center_regions',
        'disable_screen_sharing_for_host_meetings' => 'disable_screen_sharing_for_host_meetings',
        'disable_screen_sharing_for_in_meeting_guests' => 'disable_screen_sharing_for_in_meeting_guests',
        'dscp_audio' => 'dscp_audio',
        'dscp_marking' => 'dscp_marking',
        'dscp_video' => 'dscp_video',
        'e2e_encryption' => 'e2e_encryption',
        'entry_exit_chime' => 'entry_exit_chime',
        'far_end_camera_control' => 'far_end_camera_control',
        'feedback' => 'feedback',
        'file_transfer' => 'file_transfer',
        'group_hd' => 'group_hd',
        'join_from_desktop' => 'join_from_desktop',
        'join_from_mobile' => 'join_from_mobile',
        'language_interpretation' => 'language_interpretation',
        'live_streaming_facebook' => 'live_streaming_facebook',
        'live_streaming_youtube' => 'live_streaming_youtube',
        'manual_captioning' => 'manual_captioning',
        'meeting_reactions' => 'meeting_reactions',
        'meeting_survey' => 'meeting_survey',
        'original_audio' => 'original_audio',
        'p2p_connetion' => 'p2p_connetion',
        'p2p_ports' => 'p2p_ports',
        'polling' => 'polling',
        'meeting_polling' => 'meeting_polling',
        'ports_range' => 'ports_range',
        'post_meeting_feedback' => 'post_meeting_feedback',
        'private_chat' => 'private_chat',
        'record_play_own_voice' => 'record_play_own_voice',
        'remote_control' => 'remote_control',
        'non_verbal_feedback' => 'non_verbal_feedback',
        'remote_support' => 'remote_support',
        'request_permission_to_unmute_participants' => 'request_permission_to_unmute_participants',
        'screen_sharing' => 'screen_sharing',
        'sending_default_email_invites' => 'sending_default_email_invites',
        'show_a_join_from_your_browser_link' => 'show_a_join_from_your_browser_link',
        'show_meeting_control_toolbar' => 'show_meeting_control_toolbar',
        'slide_control' => 'slide_control',
        'stereo_audio' => 'stereo_audio',
        'use_html_format_email' => 'use_html_format_email',
        'virtual_background' => 'virtual_background',
        'virtual_background_settings' => 'virtual_background_settings',
        'watermark' => 'watermark',
        'webinar_chat' => 'webinar_chat',
        'webinar_live_streaming' => 'webinar_live_streaming',
        'webinar_polling' => 'webinar_polling',
        'webinar_question_answer' => 'webinar_question_answer',
        'webinar_survey' => 'webinar_survey',
        'whiteboard' => 'whiteboard',
        'who_can_share_screen' => 'who_can_share_screen',
        'who_can_share_screen_when_someone_is_sharing' => 'who_can_share_screen_when_someone_is_sharing',
        'participants_share_simultaneously' => 'participants_share_simultaneously',
        'workplace_by_facebook' => 'workplace_by_facebook'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_guest_join' => 'setAlertGuestJoin',
        'allow_host_to_enable_focus_mode' => 'setAllowHostToEnableFocusMode',
        'allow_live_streaming' => 'setAllowLiveStreaming',
        'allow_participants_chat_with' => 'setAllowParticipantsChatWith',
        'allow_participants_to_rename' => 'setAllowParticipantsToRename',
        'allow_show_zoom_windows' => 'setAllowShowZoomWindows',
        'allow_users_save_chats' => 'setAllowUsersSaveChats',
        'annotation' => 'setAnnotation',
        'anonymous_question_answer' => 'setAnonymousQuestionAnswer',
        'attendee_on_hold' => 'setAttendeeOnHold',
        'attention_mode_focus_mode' => 'setAttentionModeFocusMode',
        'auto_answer' => 'setAutoAnswer',
        'auto_saving_chat' => 'setAutoSavingChat',
        'breakout_room' => 'setBreakoutRoom',
        'breakout_room_schedule' => 'setBreakoutRoomSchedule',
        'chat' => 'setChat',
        'closed_caption' => 'setClosedCaption',
        'closed_captioning' => 'setClosedCaptioning',
        'co_host' => 'setCoHost',
        'custom_data_center_regions' => 'setCustomDataCenterRegions',
        'custom_live_streaming_service' => 'setCustomLiveStreamingService',
        'custom_service_instructions' => 'setCustomServiceInstructions',
        'data_center_regions' => 'setDataCenterRegions',
        'disable_screen_sharing_for_host_meetings' => 'setDisableScreenSharingForHostMeetings',
        'disable_screen_sharing_for_in_meeting_guests' => 'setDisableScreenSharingForInMeetingGuests',
        'dscp_audio' => 'setDscpAudio',
        'dscp_marking' => 'setDscpMarking',
        'dscp_video' => 'setDscpVideo',
        'e2e_encryption' => 'setE2eEncryption',
        'entry_exit_chime' => 'setEntryExitChime',
        'far_end_camera_control' => 'setFarEndCameraControl',
        'feedback' => 'setFeedback',
        'file_transfer' => 'setFileTransfer',
        'group_hd' => 'setGroupHd',
        'join_from_desktop' => 'setJoinFromDesktop',
        'join_from_mobile' => 'setJoinFromMobile',
        'language_interpretation' => 'setLanguageInterpretation',
        'live_streaming_facebook' => 'setLiveStreamingFacebook',
        'live_streaming_youtube' => 'setLiveStreamingYoutube',
        'manual_captioning' => 'setManualCaptioning',
        'meeting_reactions' => 'setMeetingReactions',
        'meeting_survey' => 'setMeetingSurvey',
        'original_audio' => 'setOriginalAudio',
        'p2p_connetion' => 'setP2pConnetion',
        'p2p_ports' => 'setP2pPorts',
        'polling' => 'setPolling',
        'meeting_polling' => 'setMeetingPolling',
        'ports_range' => 'setPortsRange',
        'post_meeting_feedback' => 'setPostMeetingFeedback',
        'private_chat' => 'setPrivateChat',
        'record_play_own_voice' => 'setRecordPlayOwnVoice',
        'remote_control' => 'setRemoteControl',
        'non_verbal_feedback' => 'setNonVerbalFeedback',
        'remote_support' => 'setRemoteSupport',
        'request_permission_to_unmute_participants' => 'setRequestPermissionToUnmuteParticipants',
        'screen_sharing' => 'setScreenSharing',
        'sending_default_email_invites' => 'setSendingDefaultEmailInvites',
        'show_a_join_from_your_browser_link' => 'setShowAJoinFromYourBrowserLink',
        'show_meeting_control_toolbar' => 'setShowMeetingControlToolbar',
        'slide_control' => 'setSlideControl',
        'stereo_audio' => 'setStereoAudio',
        'use_html_format_email' => 'setUseHtmlFormatEmail',
        'virtual_background' => 'setVirtualBackground',
        'virtual_background_settings' => 'setVirtualBackgroundSettings',
        'watermark' => 'setWatermark',
        'webinar_chat' => 'setWebinarChat',
        'webinar_live_streaming' => 'setWebinarLiveStreaming',
        'webinar_polling' => 'setWebinarPolling',
        'webinar_question_answer' => 'setWebinarQuestionAnswer',
        'webinar_survey' => 'setWebinarSurvey',
        'whiteboard' => 'setWhiteboard',
        'who_can_share_screen' => 'setWhoCanShareScreen',
        'who_can_share_screen_when_someone_is_sharing' => 'setWhoCanShareScreenWhenSomeoneIsSharing',
        'participants_share_simultaneously' => 'setParticipantsShareSimultaneously',
        'workplace_by_facebook' => 'setWorkplaceByFacebook'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_guest_join' => 'getAlertGuestJoin',
        'allow_host_to_enable_focus_mode' => 'getAllowHostToEnableFocusMode',
        'allow_live_streaming' => 'getAllowLiveStreaming',
        'allow_participants_chat_with' => 'getAllowParticipantsChatWith',
        'allow_participants_to_rename' => 'getAllowParticipantsToRename',
        'allow_show_zoom_windows' => 'getAllowShowZoomWindows',
        'allow_users_save_chats' => 'getAllowUsersSaveChats',
        'annotation' => 'getAnnotation',
        'anonymous_question_answer' => 'getAnonymousQuestionAnswer',
        'attendee_on_hold' => 'getAttendeeOnHold',
        'attention_mode_focus_mode' => 'getAttentionModeFocusMode',
        'auto_answer' => 'getAutoAnswer',
        'auto_saving_chat' => 'getAutoSavingChat',
        'breakout_room' => 'getBreakoutRoom',
        'breakout_room_schedule' => 'getBreakoutRoomSchedule',
        'chat' => 'getChat',
        'closed_caption' => 'getClosedCaption',
        'closed_captioning' => 'getClosedCaptioning',
        'co_host' => 'getCoHost',
        'custom_data_center_regions' => 'getCustomDataCenterRegions',
        'custom_live_streaming_service' => 'getCustomLiveStreamingService',
        'custom_service_instructions' => 'getCustomServiceInstructions',
        'data_center_regions' => 'getDataCenterRegions',
        'disable_screen_sharing_for_host_meetings' => 'getDisableScreenSharingForHostMeetings',
        'disable_screen_sharing_for_in_meeting_guests' => 'getDisableScreenSharingForInMeetingGuests',
        'dscp_audio' => 'getDscpAudio',
        'dscp_marking' => 'getDscpMarking',
        'dscp_video' => 'getDscpVideo',
        'e2e_encryption' => 'getE2eEncryption',
        'entry_exit_chime' => 'getEntryExitChime',
        'far_end_camera_control' => 'getFarEndCameraControl',
        'feedback' => 'getFeedback',
        'file_transfer' => 'getFileTransfer',
        'group_hd' => 'getGroupHd',
        'join_from_desktop' => 'getJoinFromDesktop',
        'join_from_mobile' => 'getJoinFromMobile',
        'language_interpretation' => 'getLanguageInterpretation',
        'live_streaming_facebook' => 'getLiveStreamingFacebook',
        'live_streaming_youtube' => 'getLiveStreamingYoutube',
        'manual_captioning' => 'getManualCaptioning',
        'meeting_reactions' => 'getMeetingReactions',
        'meeting_survey' => 'getMeetingSurvey',
        'original_audio' => 'getOriginalAudio',
        'p2p_connetion' => 'getP2pConnetion',
        'p2p_ports' => 'getP2pPorts',
        'polling' => 'getPolling',
        'meeting_polling' => 'getMeetingPolling',
        'ports_range' => 'getPortsRange',
        'post_meeting_feedback' => 'getPostMeetingFeedback',
        'private_chat' => 'getPrivateChat',
        'record_play_own_voice' => 'getRecordPlayOwnVoice',
        'remote_control' => 'getRemoteControl',
        'non_verbal_feedback' => 'getNonVerbalFeedback',
        'remote_support' => 'getRemoteSupport',
        'request_permission_to_unmute_participants' => 'getRequestPermissionToUnmuteParticipants',
        'screen_sharing' => 'getScreenSharing',
        'sending_default_email_invites' => 'getSendingDefaultEmailInvites',
        'show_a_join_from_your_browser_link' => 'getShowAJoinFromYourBrowserLink',
        'show_meeting_control_toolbar' => 'getShowMeetingControlToolbar',
        'slide_control' => 'getSlideControl',
        'stereo_audio' => 'getStereoAudio',
        'use_html_format_email' => 'getUseHtmlFormatEmail',
        'virtual_background' => 'getVirtualBackground',
        'virtual_background_settings' => 'getVirtualBackgroundSettings',
        'watermark' => 'getWatermark',
        'webinar_chat' => 'getWebinarChat',
        'webinar_live_streaming' => 'getWebinarLiveStreaming',
        'webinar_polling' => 'getWebinarPolling',
        'webinar_question_answer' => 'getWebinarQuestionAnswer',
        'webinar_survey' => 'getWebinarSurvey',
        'whiteboard' => 'getWhiteboard',
        'who_can_share_screen' => 'getWhoCanShareScreen',
        'who_can_share_screen_when_someone_is_sharing' => 'getWhoCanShareScreenWhenSomeoneIsSharing',
        'participants_share_simultaneously' => 'getParticipantsShareSimultaneously',
        'workplace_by_facebook' => 'getWorkplaceByFacebook'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ALLOW_PARTICIPANTS_CHAT_WITH_1 = 1;
    public const ALLOW_PARTICIPANTS_CHAT_WITH_2 = 2;
    public const ALLOW_PARTICIPANTS_CHAT_WITH_3 = 3;
    public const ALLOW_PARTICIPANTS_CHAT_WITH_4 = 4;
    public const ALLOW_USERS_SAVE_CHATS_1 = 1;
    public const ALLOW_USERS_SAVE_CHATS_2 = 2;
    public const ALLOW_USERS_SAVE_CHATS_3 = 3;
    public const DATA_CENTER_REGIONS_AU = 'AU';
    public const DATA_CENTER_REGIONS_LA = 'LA';
    public const DATA_CENTER_REGIONS_CA = 'CA';
    public const DATA_CENTER_REGIONS_CN = 'CN';
    public const DATA_CENTER_REGIONS_DE = 'DE';
    public const DATA_CENTER_REGIONS_HK = 'HK';
    public const DATA_CENTER_REGIONS_IN = 'IN';
    public const DATA_CENTER_REGIONS_IE = 'IE';
    public const DATA_CENTER_REGIONS_TY = 'TY';
    public const DATA_CENTER_REGIONS_MX = 'MX';
    public const DATA_CENTER_REGIONS_NL = 'NL';
    public const DATA_CENTER_REGIONS_SG = 'SG';
    public const DATA_CENTER_REGIONS_US = 'US';
    public const ENTRY_EXIT_CHIME_HOST = 'host';
    public const ENTRY_EXIT_CHIME_ALL = 'all';
    public const ENTRY_EXIT_CHIME_NONE = 'none';
    public const WHO_CAN_SHARE_SCREEN_HOST = 'host';
    public const WHO_CAN_SHARE_SCREEN_ALL = 'all';
    public const WHO_CAN_SHARE_SCREEN_WHEN_SOMEONE_IS_SHARING_HOST = 'host';
    public const WHO_CAN_SHARE_SCREEN_WHEN_SOMEONE_IS_SHARING_ALL = 'all';
    public const PARTICIPANTS_SHARE_SIMULTANEOUSLY_MULTIPLE = 'multiple';
    public const PARTICIPANTS_SHARE_SIMULTANEOUSLY_ONE = 'one';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowParticipantsChatWithAllowableValues()
    {
        return [
            self::ALLOW_PARTICIPANTS_CHAT_WITH_1,
            self::ALLOW_PARTICIPANTS_CHAT_WITH_2,
            self::ALLOW_PARTICIPANTS_CHAT_WITH_3,
            self::ALLOW_PARTICIPANTS_CHAT_WITH_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowUsersSaveChatsAllowableValues()
    {
        return [
            self::ALLOW_USERS_SAVE_CHATS_1,
            self::ALLOW_USERS_SAVE_CHATS_2,
            self::ALLOW_USERS_SAVE_CHATS_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataCenterRegionsAllowableValues()
    {
        return [
            self::DATA_CENTER_REGIONS_AU,
            self::DATA_CENTER_REGIONS_LA,
            self::DATA_CENTER_REGIONS_CA,
            self::DATA_CENTER_REGIONS_CN,
            self::DATA_CENTER_REGIONS_DE,
            self::DATA_CENTER_REGIONS_HK,
            self::DATA_CENTER_REGIONS_IN,
            self::DATA_CENTER_REGIONS_IE,
            self::DATA_CENTER_REGIONS_TY,
            self::DATA_CENTER_REGIONS_MX,
            self::DATA_CENTER_REGIONS_NL,
            self::DATA_CENTER_REGIONS_SG,
            self::DATA_CENTER_REGIONS_US,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntryExitChimeAllowableValues()
    {
        return [
            self::ENTRY_EXIT_CHIME_HOST,
            self::ENTRY_EXIT_CHIME_ALL,
            self::ENTRY_EXIT_CHIME_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhoCanShareScreenAllowableValues()
    {
        return [
            self::WHO_CAN_SHARE_SCREEN_HOST,
            self::WHO_CAN_SHARE_SCREEN_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhoCanShareScreenWhenSomeoneIsSharingAllowableValues()
    {
        return [
            self::WHO_CAN_SHARE_SCREEN_WHEN_SOMEONE_IS_SHARING_HOST,
            self::WHO_CAN_SHARE_SCREEN_WHEN_SOMEONE_IS_SHARING_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParticipantsShareSimultaneouslyAllowableValues()
    {
        return [
            self::PARTICIPANTS_SHARE_SIMULTANEOUSLY_MULTIPLE,
            self::PARTICIPANTS_SHARE_SIMULTANEOUSLY_ONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_guest_join'] = $data['alert_guest_join'] ?? null;
        $this->container['allow_host_to_enable_focus_mode'] = $data['allow_host_to_enable_focus_mode'] ?? null;
        $this->container['allow_live_streaming'] = $data['allow_live_streaming'] ?? null;
        $this->container['allow_participants_chat_with'] = $data['allow_participants_chat_with'] ?? null;
        $this->container['allow_participants_to_rename'] = $data['allow_participants_to_rename'] ?? null;
        $this->container['allow_show_zoom_windows'] = $data['allow_show_zoom_windows'] ?? null;
        $this->container['allow_users_save_chats'] = $data['allow_users_save_chats'] ?? null;
        $this->container['annotation'] = $data['annotation'] ?? null;
        $this->container['anonymous_question_answer'] = $data['anonymous_question_answer'] ?? null;
        $this->container['attendee_on_hold'] = $data['attendee_on_hold'] ?? false;
        $this->container['attention_mode_focus_mode'] = $data['attention_mode_focus_mode'] ?? false;
        $this->container['auto_answer'] = $data['auto_answer'] ?? null;
        $this->container['auto_saving_chat'] = $data['auto_saving_chat'] ?? null;
        $this->container['breakout_room'] = $data['breakout_room'] ?? null;
        $this->container['breakout_room_schedule'] = $data['breakout_room_schedule'] ?? null;
        $this->container['chat'] = $data['chat'] ?? null;
        $this->container['closed_caption'] = $data['closed_caption'] ?? null;
        $this->container['closed_captioning'] = $data['closed_captioning'] ?? null;
        $this->container['co_host'] = $data['co_host'] ?? null;
        $this->container['custom_data_center_regions'] = $data['custom_data_center_regions'] ?? null;
        $this->container['custom_live_streaming_service'] = $data['custom_live_streaming_service'] ?? null;
        $this->container['custom_service_instructions'] = $data['custom_service_instructions'] ?? null;
        $this->container['data_center_regions'] = $data['data_center_regions'] ?? null;
        $this->container['disable_screen_sharing_for_host_meetings'] = $data['disable_screen_sharing_for_host_meetings'] ?? null;
        $this->container['disable_screen_sharing_for_in_meeting_guests'] = $data['disable_screen_sharing_for_in_meeting_guests'] ?? null;
        $this->container['dscp_audio'] = $data['dscp_audio'] ?? 56;
        $this->container['dscp_marking'] = $data['dscp_marking'] ?? null;
        $this->container['dscp_video'] = $data['dscp_video'] ?? 40;
        $this->container['e2e_encryption'] = $data['e2e_encryption'] ?? null;
        $this->container['entry_exit_chime'] = $data['entry_exit_chime'] ?? null;
        $this->container['far_end_camera_control'] = $data['far_end_camera_control'] ?? null;
        $this->container['feedback'] = $data['feedback'] ?? null;
        $this->container['file_transfer'] = $data['file_transfer'] ?? null;
        $this->container['group_hd'] = $data['group_hd'] ?? null;
        $this->container['join_from_desktop'] = $data['join_from_desktop'] ?? null;
        $this->container['join_from_mobile'] = $data['join_from_mobile'] ?? null;
        $this->container['language_interpretation'] = $data['language_interpretation'] ?? null;
        $this->container['live_streaming_facebook'] = $data['live_streaming_facebook'] ?? null;
        $this->container['live_streaming_youtube'] = $data['live_streaming_youtube'] ?? null;
        $this->container['manual_captioning'] = $data['manual_captioning'] ?? null;
        $this->container['meeting_reactions'] = $data['meeting_reactions'] ?? null;
        $this->container['meeting_survey'] = $data['meeting_survey'] ?? null;
        $this->container['original_audio'] = $data['original_audio'] ?? null;
        $this->container['p2p_connetion'] = $data['p2p_connetion'] ?? null;
        $this->container['p2p_ports'] = $data['p2p_ports'] ?? null;
        $this->container['polling'] = $data['polling'] ?? null;
        $this->container['meeting_polling'] = $data['meeting_polling'] ?? null;
        $this->container['ports_range'] = $data['ports_range'] ?? '';
        $this->container['post_meeting_feedback'] = $data['post_meeting_feedback'] ?? null;
        $this->container['private_chat'] = $data['private_chat'] ?? null;
        $this->container['record_play_own_voice'] = $data['record_play_own_voice'] ?? null;
        $this->container['remote_control'] = $data['remote_control'] ?? null;
        $this->container['non_verbal_feedback'] = $data['non_verbal_feedback'] ?? false;
        $this->container['remote_support'] = $data['remote_support'] ?? false;
        $this->container['request_permission_to_unmute_participants'] = $data['request_permission_to_unmute_participants'] ?? null;
        $this->container['screen_sharing'] = $data['screen_sharing'] ?? null;
        $this->container['sending_default_email_invites'] = $data['sending_default_email_invites'] ?? null;
        $this->container['show_a_join_from_your_browser_link'] = $data['show_a_join_from_your_browser_link'] ?? null;
        $this->container['show_meeting_control_toolbar'] = $data['show_meeting_control_toolbar'] ?? null;
        $this->container['slide_control'] = $data['slide_control'] ?? null;
        $this->container['stereo_audio'] = $data['stereo_audio'] ?? null;
        $this->container['use_html_format_email'] = $data['use_html_format_email'] ?? null;
        $this->container['virtual_background'] = $data['virtual_background'] ?? null;
        $this->container['virtual_background_settings'] = $data['virtual_background_settings'] ?? null;
        $this->container['watermark'] = $data['watermark'] ?? null;
        $this->container['webinar_chat'] = $data['webinar_chat'] ?? null;
        $this->container['webinar_live_streaming'] = $data['webinar_live_streaming'] ?? null;
        $this->container['webinar_polling'] = $data['webinar_polling'] ?? null;
        $this->container['webinar_question_answer'] = $data['webinar_question_answer'] ?? null;
        $this->container['webinar_survey'] = $data['webinar_survey'] ?? null;
        $this->container['whiteboard'] = $data['whiteboard'] ?? null;
        $this->container['who_can_share_screen'] = $data['who_can_share_screen'] ?? null;
        $this->container['who_can_share_screen_when_someone_is_sharing'] = $data['who_can_share_screen_when_someone_is_sharing'] ?? null;
        $this->container['participants_share_simultaneously'] = $data['participants_share_simultaneously'] ?? null;
        $this->container['workplace_by_facebook'] = $data['workplace_by_facebook'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAllowParticipantsChatWithAllowableValues();
        if (!is_null($this->container['allow_participants_chat_with']) && !in_array($this->container['allow_participants_chat_with'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_participants_chat_with', must be one of '%s'",
                $this->container['allow_participants_chat_with'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowUsersSaveChatsAllowableValues();
        if (!is_null($this->container['allow_users_save_chats']) && !in_array($this->container['allow_users_save_chats'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_users_save_chats', must be one of '%s'",
                $this->container['allow_users_save_chats'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dscp_audio']) && ($this->container['dscp_audio'] > 63)) {
            $invalidProperties[] = "invalid value for 'dscp_audio', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['dscp_audio']) && ($this->container['dscp_audio'] < 1)) {
            $invalidProperties[] = "invalid value for 'dscp_audio', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dscp_video']) && ($this->container['dscp_video'] > 63)) {
            $invalidProperties[] = "invalid value for 'dscp_video', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['dscp_video']) && ($this->container['dscp_video'] < 1)) {
            $invalidProperties[] = "invalid value for 'dscp_video', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getEntryExitChimeAllowableValues();
        if (!is_null($this->container['entry_exit_chime']) && !in_array($this->container['entry_exit_chime'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entry_exit_chime', must be one of '%s'",
                $this->container['entry_exit_chime'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWhoCanShareScreenAllowableValues();
        if (!is_null($this->container['who_can_share_screen']) && !in_array($this->container['who_can_share_screen'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'who_can_share_screen', must be one of '%s'",
                $this->container['who_can_share_screen'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWhoCanShareScreenWhenSomeoneIsSharingAllowableValues();
        if (!is_null($this->container['who_can_share_screen_when_someone_is_sharing']) && !in_array($this->container['who_can_share_screen_when_someone_is_sharing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'who_can_share_screen_when_someone_is_sharing', must be one of '%s'",
                $this->container['who_can_share_screen_when_someone_is_sharing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getParticipantsShareSimultaneouslyAllowableValues();
        if (!is_null($this->container['participants_share_simultaneously']) && !in_array($this->container['participants_share_simultaneously'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'participants_share_simultaneously', must be one of '%s'",
                $this->container['participants_share_simultaneously'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_guest_join
     *
     * @return bool|null
     */
    public function getAlertGuestJoin()
    {
        return $this->container['alert_guest_join'];
    }

    /**
     * Sets alert_guest_join
     *
     * @param bool|null $alert_guest_join Whether to enable [guest participant](https://support.zoom.us/hc/en-us/articles/115004791123-Identifying-guests-in-the-meeting-webinar) alerts.
     *
     * @return self
     */
    public function setAlertGuestJoin($alert_guest_join)
    {
        $this->container['alert_guest_join'] = $alert_guest_join;

        return $this;
    }

    /**
     * Gets allow_host_to_enable_focus_mode
     *
     * @return bool|null
     */
    public function getAllowHostToEnableFocusMode()
    {
        return $this->container['allow_host_to_enable_focus_mode'];
    }

    /**
     * Sets allow_host_to_enable_focus_mode
     *
     * @param bool|null $allow_host_to_enable_focus_mode Whether the host can enable [**Focus Mode**](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) when scheduling a meeting. This value defaults to `null`.
     *
     * @return self
     */
    public function setAllowHostToEnableFocusMode($allow_host_to_enable_focus_mode)
    {
        $this->container['allow_host_to_enable_focus_mode'] = $allow_host_to_enable_focus_mode;

        return $this;
    }

    /**
     * Gets allow_live_streaming
     *
     * @return bool|null
     */
    public function getAllowLiveStreaming()
    {
        return $this->container['allow_live_streaming'];
    }

    /**
     * Sets allow_live_streaming
     *
     * @param bool|null $allow_live_streaming Whether to allow livestreaming.
     *
     * @return self
     */
    public function setAllowLiveStreaming($allow_live_streaming)
    {
        $this->container['allow_live_streaming'] = $allow_live_streaming;

        return $this;
    }

    /**
     * Gets allow_participants_chat_with
     *
     * @return int|null
     */
    public function getAllowParticipantsChatWith()
    {
        return $this->container['allow_participants_chat_with'];
    }

    /**
     * Sets allow_participants_chat_with
     *
     * @param int|null $allow_participants_chat_with Whether to allow participants to only chat with certain groups:  * `1` — The participant cannot use chat.  * `2` — Host and co-hosts only.   * `3` — The participant can chat with other participants publicly.  * `4` - The participant can chat with other participants publicly and privately.    **Note:** This setting is only available with client versions 5.7.3 and above.
     *
     * @return self
     */
    public function setAllowParticipantsChatWith($allow_participants_chat_with)
    {
        $allowedValues = $this->getAllowParticipantsChatWithAllowableValues();
        if (!is_null($allow_participants_chat_with) && !in_array($allow_participants_chat_with, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_participants_chat_with', must be one of '%s'",
                    $allow_participants_chat_with,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_participants_chat_with'] = $allow_participants_chat_with;

        return $this;
    }

    /**
     * Gets allow_participants_to_rename
     *
     * @return bool|null
     */
    public function getAllowParticipantsToRename()
    {
        return $this->container['allow_participants_to_rename'];
    }

    /**
     * Sets allow_participants_to_rename
     *
     * @param bool|null $allow_participants_to_rename Whether to allow meeting participants to rename themselves during a meeting.
     *
     * @return self
     */
    public function setAllowParticipantsToRename($allow_participants_to_rename)
    {
        $this->container['allow_participants_to_rename'] = $allow_participants_to_rename;

        return $this;
    }

    /**
     * Gets allow_show_zoom_windows
     *
     * @return bool|null
     */
    public function getAllowShowZoomWindows()
    {
        return $this->container['allow_show_zoom_windows'];
    }

    /**
     * Sets allow_show_zoom_windows
     *
     * @param bool|null $allow_show_zoom_windows Whether to enable the [**Show Zoom windows during screen share**](https://support.zoom.us/hc/en-us/articles/360061383571-Showing-Zoom-windows-during-screen-share) feature.
     *
     * @return self
     */
    public function setAllowShowZoomWindows($allow_show_zoom_windows)
    {
        $this->container['allow_show_zoom_windows'] = $allow_show_zoom_windows;

        return $this;
    }

    /**
     * Gets allow_users_save_chats
     *
     * @return int|null
     */
    public function getAllowUsersSaveChats()
    {
        return $this->container['allow_users_save_chats'];
    }

    /**
     * Sets allow_users_save_chats
     *
     * @param int|null $allow_users_save_chats Whether to allow participants to save meeting chats:  * `1` — Participants cannot save meeting chats.  * `2` — Participants can only save host and co-host meeting chats.  * `3` — Participants can save all meeting chats.
     *
     * @return self
     */
    public function setAllowUsersSaveChats($allow_users_save_chats)
    {
        $allowedValues = $this->getAllowUsersSaveChatsAllowableValues();
        if (!is_null($allow_users_save_chats) && !in_array($allow_users_save_chats, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_users_save_chats', must be one of '%s'",
                    $allow_users_save_chats,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_users_save_chats'] = $allow_users_save_chats;

        return $this;
    }

    /**
     * Gets annotation
     *
     * @return bool|null
     */
    public function getAnnotation()
    {
        return $this->container['annotation'];
    }

    /**
     * Sets annotation
     *
     * @param bool|null $annotation Whether to allow meeting participants to use the [annotation tools](https://support.zoom.us/hc/en-us/articles/115005706806).
     *
     * @return self
     */
    public function setAnnotation($annotation)
    {
        $this->container['annotation'] = $annotation;

        return $this;
    }

    /**
     * Gets anonymous_question_answer
     *
     * @return bool|null
     */
    public function getAnonymousQuestionAnswer()
    {
        return $this->container['anonymous_question_answer'];
    }

    /**
     * Sets anonymous_question_answer
     *
     * @param bool|null $anonymous_question_answer Whether to enable anonymous Q&A.
     *
     * @return self
     */
    public function setAnonymousQuestionAnswer($anonymous_question_answer)
    {
        $this->container['anonymous_question_answer'] = $anonymous_question_answer;

        return $this;
    }

    /**
     * Gets attendee_on_hold
     *
     * @return bool|null
     * @deprecated
     */
    public function getAttendeeOnHold()
    {
        return $this->container['attendee_on_hold'];
    }

    /**
     * Sets attendee_on_hold
     *
     * @param bool|null $attendee_on_hold Whether to allow the host to put an attendee on hold. This value defaults to `false`. **This field has been deprecated and is no longer supported.**
     *
     * @return self
     * @deprecated
     */
    public function setAttendeeOnHold($attendee_on_hold)
    {
        $this->container['attendee_on_hold'] = $attendee_on_hold;

        return $this;
    }

    /**
     * Gets attention_mode_focus_mode
     *
     * @return bool|null
     */
    public function getAttentionModeFocusMode()
    {
        return $this->container['attention_mode_focus_mode'];
    }

    /**
     * Sets attention_mode_focus_mode
     *
     * @param bool|null $attention_mode_focus_mode Whether to enable [**Focus Mode**](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode). When enabled, this feature only displays the host and co-hosts' video and profile pictures during a meeting.    This value defaults to `false`.
     *
     * @return self
     */
    public function setAttentionModeFocusMode($attention_mode_focus_mode)
    {
        $this->container['attention_mode_focus_mode'] = $attention_mode_focus_mode;

        return $this;
    }

    /**
     * Gets auto_answer
     *
     * @return bool|null
     */
    public function getAutoAnswer()
    {
        return $this->container['auto_answer'];
    }

    /**
     * Sets auto_answer
     *
     * @param bool|null $auto_answer Whether to enable the [**Auto-answer group in chat**](https://support.zoom.us/hc/en-us/articles/203736135-Auto-answering-invitations-to-meetings) setting. Calls from these group members will be answered automatically.
     *
     * @return self
     */
    public function setAutoAnswer($auto_answer)
    {
        $this->container['auto_answer'] = $auto_answer;

        return $this;
    }

    /**
     * Gets auto_saving_chat
     *
     * @return bool|null
     */
    public function getAutoSavingChat()
    {
        return $this->container['auto_saving_chat'];
    }

    /**
     * Sets auto_saving_chat
     *
     * @param bool|null $auto_saving_chat Whether to automatically save all in-meeting chats.
     *
     * @return self
     */
    public function setAutoSavingChat($auto_saving_chat)
    {
        $this->container['auto_saving_chat'] = $auto_saving_chat;

        return $this;
    }

    /**
     * Gets breakout_room
     *
     * @return bool|null
     */
    public function getBreakoutRoom()
    {
        return $this->container['breakout_room'];
    }

    /**
     * Sets breakout_room
     *
     * @param bool|null $breakout_room Whether to allow the meeting host to split meeting participants into separate breakout rooms.
     *
     * @return self
     */
    public function setBreakoutRoom($breakout_room)
    {
        $this->container['breakout_room'] = $breakout_room;

        return $this;
    }

    /**
     * Gets breakout_room_schedule
     *
     * @return bool|null
     */
    public function getBreakoutRoomSchedule()
    {
        return $this->container['breakout_room_schedule'];
    }

    /**
     * Sets breakout_room_schedule
     *
     * @param bool|null $breakout_room_schedule Whether the host can assign participants to breakout rooms when scheduling. This feature is **only** available in version 4.5.0 or higher.
     *
     * @return self
     */
    public function setBreakoutRoomSchedule($breakout_room_schedule)
    {
        $this->container['breakout_room_schedule'] = $breakout_room_schedule;

        return $this;
    }

    /**
     * Gets chat
     *
     * @return bool|null
     */
    public function getChat()
    {
        return $this->container['chat'];
    }

    /**
     * Sets chat
     *
     * @param bool|null $chat Whether to enable chat during meeting for all participants.
     *
     * @return self
     */
    public function setChat($chat)
    {
        $this->container['chat'] = $chat;

        return $this;
    }

    /**
     * Gets closed_caption
     *
     * @return bool|null
     */
    public function getClosedCaption()
    {
        return $this->container['closed_caption'];
    }

    /**
     * Sets closed_caption
     *
     * @param bool|null $closed_caption Whether to enable closed captions.
     *
     * @return self
     */
    public function setClosedCaption($closed_caption)
    {
        $this->container['closed_caption'] = $closed_caption;

        return $this;
    }

    /**
     * Gets closed_captioning
     *
     * @return \Zoom\Api\Model\AccountUpdateSettingsInMeetingClosedCaptioning|null
     */
    public function getClosedCaptioning()
    {
        return $this->container['closed_captioning'];
    }

    /**
     * Sets closed_captioning
     *
     * @param \Zoom\Api\Model\AccountUpdateSettingsInMeetingClosedCaptioning|null $closed_captioning closed_captioning
     *
     * @return self
     */
    public function setClosedCaptioning($closed_captioning)
    {
        $this->container['closed_captioning'] = $closed_captioning;

        return $this;
    }

    /**
     * Gets co_host
     *
     * @return bool|null
     */
    public function getCoHost()
    {
        return $this->container['co_host'];
    }

    /**
     * Sets co_host
     *
     * @param bool|null $co_host Whether to allow the host to add co-hosts.
     *
     * @return self
     */
    public function setCoHost($co_host)
    {
        $this->container['co_host'] = $co_host;

        return $this;
    }

    /**
     * Gets custom_data_center_regions
     *
     * @return bool|null
     */
    public function getCustomDataCenterRegions()
    {
        return $this->container['custom_data_center_regions'];
    }

    /**
     * Sets custom_data_center_regions
     *
     * @param bool|null $custom_data_center_regions Whether to use custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-meetings-webinars):  * `true` — Users can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting real-time meeting traffic. The data center regions can be provided in the `data_center_regions` field.  * `false` — Only use the default data center regions.
     *
     * @return self
     */
    public function setCustomDataCenterRegions($custom_data_center_regions)
    {
        $this->container['custom_data_center_regions'] = $custom_data_center_regions;

        return $this;
    }

    /**
     * Gets custom_live_streaming_service
     *
     * @return bool|null
     */
    public function getCustomLiveStreamingService()
    {
        return $this->container['custom_live_streaming_service'];
    }

    /**
     * Sets custom_live_streaming_service
     *
     * @param bool|null $custom_live_streaming_service Whether to allow custom livestreaming.
     *
     * @return self
     */
    public function setCustomLiveStreamingService($custom_live_streaming_service)
    {
        $this->container['custom_live_streaming_service'] = $custom_live_streaming_service;

        return $this;
    }

    /**
     * Gets custom_service_instructions
     *
     * @return string|null
     */
    public function getCustomServiceInstructions()
    {
        return $this->container['custom_service_instructions'];
    }

    /**
     * Sets custom_service_instructions
     *
     * @param string|null $custom_service_instructions The specific instructions to configure a custom livestream.
     *
     * @return self
     */
    public function setCustomServiceInstructions($custom_service_instructions)
    {
        $this->container['custom_service_instructions'] = $custom_service_instructions;

        return $this;
    }

    /**
     * Gets data_center_regions
     *
     * @return string[]|null
     */
    public function getDataCenterRegions()
    {
        return $this->container['data_center_regions'];
    }

    /**
     * Sets data_center_regions
     *
     * @param string[]|null $data_center_regions If the value of `custom_data_center_regions` is `true`, a comma-separated list of the following [data center regions](https://support.zoom.us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to opt in to:  * `AU` — Australia. * `LA` — Latin America.  * `CA` — Canada.  * `CN` — China.  * `DE` — Germany.  * `HK` — Hong Kong SAR.  * `IN` — India.  * `IE` — Ireland.  * `TY` — Japan.  * `MX` — Mexico.  * `NL` — Netherlands.  * `SG` — Singapore.  * `US` — United States.
     *
     * @return self
     */
    public function setDataCenterRegions($data_center_regions)
    {
        $allowedValues = $this->getDataCenterRegionsAllowableValues();
        if (!is_null($data_center_regions) && array_diff($data_center_regions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_center_regions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_center_regions'] = $data_center_regions;

        return $this;
    }

    /**
     * Gets disable_screen_sharing_for_host_meetings
     *
     * @return bool|null
     */
    public function getDisableScreenSharingForHostMeetings()
    {
        return $this->container['disable_screen_sharing_for_host_meetings'];
    }

    /**
     * Sets disable_screen_sharing_for_host_meetings
     *
     * @param bool|null $disable_screen_sharing_for_host_meetings Whether to enable the **Disable desktop screen sharing for meetings you host** setting.
     *
     * @return self
     */
    public function setDisableScreenSharingForHostMeetings($disable_screen_sharing_for_host_meetings)
    {
        $this->container['disable_screen_sharing_for_host_meetings'] = $disable_screen_sharing_for_host_meetings;

        return $this;
    }

    /**
     * Gets disable_screen_sharing_for_in_meeting_guests
     *
     * @return bool|null
     */
    public function getDisableScreenSharingForInMeetingGuests()
    {
        return $this->container['disable_screen_sharing_for_in_meeting_guests'];
    }

    /**
     * Sets disable_screen_sharing_for_in_meeting_guests
     *
     * @param bool|null $disable_screen_sharing_for_in_meeting_guests Whether to enable the **Disable screen sharing when guests are in the meeting** setting.
     *
     * @return self
     */
    public function setDisableScreenSharingForInMeetingGuests($disable_screen_sharing_for_in_meeting_guests)
    {
        $this->container['disable_screen_sharing_for_in_meeting_guests'] = $disable_screen_sharing_for_in_meeting_guests;

        return $this;
    }

    /**
     * Gets dscp_audio
     *
     * @return int|null
     */
    public function getDscpAudio()
    {
        return $this->container['dscp_audio'];
    }

    /**
     * Sets dscp_audio
     *
     * @param int|null $dscp_audio The DSCP audio marking value. This value defaults to `56`.
     *
     * @return self
     */
    public function setDscpAudio($dscp_audio)
    {

        if (!is_null($dscp_audio) && ($dscp_audio > 63)) {
            throw new \InvalidArgumentException('invalid value for $dscp_audio when calling AccountUpdateSettingsInMeeting., must be smaller than or equal to 63.');
        }
        if (!is_null($dscp_audio) && ($dscp_audio < 1)) {
            throw new \InvalidArgumentException('invalid value for $dscp_audio when calling AccountUpdateSettingsInMeeting., must be bigger than or equal to 1.');
        }

        $this->container['dscp_audio'] = $dscp_audio;

        return $this;
    }

    /**
     * Gets dscp_marking
     *
     * @return bool|null
     */
    public function getDscpMarking()
    {
        return $this->container['dscp_marking'];
    }

    /**
     * Sets dscp_marking
     *
     * @param bool|null $dscp_marking Whether to enable [differentiated services code point (DSCP)](https://en.wikipedia.org/wiki/Differentiated_services) marking.
     *
     * @return self
     */
    public function setDscpMarking($dscp_marking)
    {
        $this->container['dscp_marking'] = $dscp_marking;

        return $this;
    }

    /**
     * Gets dscp_video
     *
     * @return int|null
     */
    public function getDscpVideo()
    {
        return $this->container['dscp_video'];
    }

    /**
     * Sets dscp_video
     *
     * @param int|null $dscp_video The DSCP video marking value. This value defaults to `40`.
     *
     * @return self
     */
    public function setDscpVideo($dscp_video)
    {

        if (!is_null($dscp_video) && ($dscp_video > 63)) {
            throw new \InvalidArgumentException('invalid value for $dscp_video when calling AccountUpdateSettingsInMeeting., must be smaller than or equal to 63.');
        }
        if (!is_null($dscp_video) && ($dscp_video < 1)) {
            throw new \InvalidArgumentException('invalid value for $dscp_video when calling AccountUpdateSettingsInMeeting., must be bigger than or equal to 1.');
        }

        $this->container['dscp_video'] = $dscp_video;

        return $this;
    }

    /**
     * Gets e2e_encryption
     *
     * @return bool|null
     */
    public function getE2eEncryption()
    {
        return $this->container['e2e_encryption'];
    }

    /**
     * Sets e2e_encryption
     *
     * @param bool|null $e2e_encryption Whether to require [AES encryption](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) for meetings.
     *
     * @return self
     */
    public function setE2eEncryption($e2e_encryption)
    {
        $this->container['e2e_encryption'] = $e2e_encryption;

        return $this;
    }

    /**
     * Gets entry_exit_chime
     *
     * @return string|null
     */
    public function getEntryExitChime()
    {
        return $this->container['entry_exit_chime'];
    }

    /**
     * Sets entry_exit_chime
     *
     * @param string|null $entry_exit_chime When to play the meeting entry/exit sound notification:  * `host` — Only when the host joins or leaves.  * `all` — When any participant joins or leaves.  * `none` - Disable the entry/exit sound notification.
     *
     * @return self
     */
    public function setEntryExitChime($entry_exit_chime)
    {
        $allowedValues = $this->getEntryExitChimeAllowableValues();
        if (!is_null($entry_exit_chime) && !in_array($entry_exit_chime, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entry_exit_chime', must be one of '%s'",
                    $entry_exit_chime,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entry_exit_chime'] = $entry_exit_chime;

        return $this;
    }

    /**
     * Gets far_end_camera_control
     *
     * @return bool|null
     */
    public function getFarEndCameraControl()
    {
        return $this->container['far_end_camera_control'];
    }

    /**
     * Sets far_end_camera_control
     *
     * @param bool|null $far_end_camera_control Whether to allow another user to take control of the user's camera.
     *
     * @return self
     */
    public function setFarEndCameraControl($far_end_camera_control)
    {
        $this->container['far_end_camera_control'] = $far_end_camera_control;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return bool|null
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param bool|null $feedback Whether to enable the [**Feedback to Zoom**](https://support.zoom.us/hc/en-us/articles/115005838023-Feedback-to-Zoom) setting.
     *
     * @return self
     */
    public function setFeedback($feedback)
    {
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets file_transfer
     *
     * @return bool|null
     */
    public function getFileTransfer()
    {
        return $this->container['file_transfer'];
    }

    /**
     * Sets file_transfer
     *
     * @param bool|null $file_transfer Whether to enable the [**Send files via meeting chat**](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting.
     *
     * @return self
     */
    public function setFileTransfer($file_transfer)
    {
        $this->container['file_transfer'] = $file_transfer;

        return $this;
    }

    /**
     * Gets group_hd
     *
     * @return bool|null
     */
    public function getGroupHd()
    {
        return $this->container['group_hd'];
    }

    /**
     * Sets group_hd
     *
     * @param bool|null $group_hd Whether to enable group HD video.
     *
     * @return self
     */
    public function setGroupHd($group_hd)
    {
        $this->container['group_hd'] = $group_hd;

        return $this;
    }

    /**
     * Gets join_from_desktop
     *
     * @return bool|null
     */
    public function getJoinFromDesktop()
    {
        return $this->container['join_from_desktop'];
    }

    /**
     * Sets join_from_desktop
     *
     * @param bool|null $join_from_desktop Whether to allow participants to join a meeting directly from their desktop browser. Note that the meeting experience from the desktop browser is limited.
     *
     * @return self
     */
    public function setJoinFromDesktop($join_from_desktop)
    {
        $this->container['join_from_desktop'] = $join_from_desktop;

        return $this;
    }

    /**
     * Gets join_from_mobile
     *
     * @return bool|null
     */
    public function getJoinFromMobile()
    {
        return $this->container['join_from_mobile'];
    }

    /**
     * Sets join_from_mobile
     *
     * @param bool|null $join_from_mobile Whether to allow participants to join a meeting directly from their mobile browser. Note that the meeting experience from the mobile browser is limited.
     *
     * @return self
     */
    public function setJoinFromMobile($join_from_mobile)
    {
        $this->container['join_from_mobile'] = $join_from_mobile;

        return $this;
    }

    /**
     * Gets language_interpretation
     *
     * @return \Zoom\Api\Model\UpdateGroupSettingsRequestOneOfInMeetingLanguageInterpretation|null
     */
    public function getLanguageInterpretation()
    {
        return $this->container['language_interpretation'];
    }

    /**
     * Sets language_interpretation
     *
     * @param \Zoom\Api\Model\UpdateGroupSettingsRequestOneOfInMeetingLanguageInterpretation|null $language_interpretation language_interpretation
     *
     * @return self
     */
    public function setLanguageInterpretation($language_interpretation)
    {
        $this->container['language_interpretation'] = $language_interpretation;

        return $this;
    }

    /**
     * Gets live_streaming_facebook
     *
     * @return bool|null
     */
    public function getLiveStreamingFacebook()
    {
        return $this->container['live_streaming_facebook'];
    }

    /**
     * Sets live_streaming_facebook
     *
     * @param bool|null $live_streaming_facebook Whether to allow Facebook livestreaming.
     *
     * @return self
     */
    public function setLiveStreamingFacebook($live_streaming_facebook)
    {
        $this->container['live_streaming_facebook'] = $live_streaming_facebook;

        return $this;
    }

    /**
     * Gets live_streaming_youtube
     *
     * @return bool|null
     */
    public function getLiveStreamingYoutube()
    {
        return $this->container['live_streaming_youtube'];
    }

    /**
     * Sets live_streaming_youtube
     *
     * @param bool|null $live_streaming_youtube Whether to allow YouTube livestreaming.
     *
     * @return self
     */
    public function setLiveStreamingYoutube($live_streaming_youtube)
    {
        $this->container['live_streaming_youtube'] = $live_streaming_youtube;

        return $this;
    }

    /**
     * Gets manual_captioning
     *
     * @return \Zoom\Api\Model\GetGroupSettings200ResponseOneOfInMeetingManualCaptioning|null
     */
    public function getManualCaptioning()
    {
        return $this->container['manual_captioning'];
    }

    /**
     * Sets manual_captioning
     *
     * @param \Zoom\Api\Model\GetGroupSettings200ResponseOneOfInMeetingManualCaptioning|null $manual_captioning manual_captioning
     *
     * @return self
     */
    public function setManualCaptioning($manual_captioning)
    {
        $this->container['manual_captioning'] = $manual_captioning;

        return $this;
    }

    /**
     * Gets meeting_reactions
     *
     * @return bool|null
     */
    public function getMeetingReactions()
    {
        return $this->container['meeting_reactions'];
    }

    /**
     * Sets meeting_reactions
     *
     * @param bool|null $meeting_reactions Whether meeting participants can [communicate using the emoji reactions](https://support.zoom.us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the **Reactions** menu in the meeting toolbar.
     *
     * @return self
     */
    public function setMeetingReactions($meeting_reactions)
    {
        $this->container['meeting_reactions'] = $meeting_reactions;

        return $this;
    }

    /**
     * Gets meeting_survey
     *
     * @return bool|null
     */
    public function getMeetingSurvey()
    {
        return $this->container['meeting_survey'];
    }

    /**
     * Sets meeting_survey
     *
     * @param bool|null $meeting_survey Whether to allow the host to present a survey to participants once a meeting has ended. This feature is only available in version 5.7.3 or higher.
     *
     * @return self
     */
    public function setMeetingSurvey($meeting_survey)
    {
        $this->container['meeting_survey'] = $meeting_survey;

        return $this;
    }

    /**
     * Gets original_audio
     *
     * @return bool|null
     */
    public function getOriginalAudio()
    {
        return $this->container['original_audio'];
    }

    /**
     * Sets original_audio
     *
     * @param bool|null $original_audio Whether to allow users to select original sound in their client settings.
     *
     * @return self
     */
    public function setOriginalAudio($original_audio)
    {
        $this->container['original_audio'] = $original_audio;

        return $this;
    }

    /**
     * Gets p2p_connetion
     *
     * @return bool|null
     */
    public function getP2pConnetion()
    {
        return $this->container['p2p_connetion'];
    }

    /**
     * Sets p2p_connetion
     *
     * @param bool|null $p2p_connetion Whether to enable the [**Peer to Peer connection while only 2 people are in a meeting**](https://support.zoom.us/hc/en-us/articles/360061410851-Enabling-Peer-to-Peer-connection-for-2-people-in-a-meeting) setting.
     *
     * @return self
     */
    public function setP2pConnetion($p2p_connetion)
    {
        $this->container['p2p_connetion'] = $p2p_connetion;

        return $this;
    }

    /**
     * Gets p2p_ports
     *
     * @return bool|null
     */
    public function getP2pPorts()
    {
        return $this->container['p2p_ports'];
    }

    /**
     * Sets p2p_ports
     *
     * @param bool|null $p2p_ports Whether to enable the **Listening ports range** setting.
     *
     * @return self
     */
    public function setP2pPorts($p2p_ports)
    {
        $this->container['p2p_ports'] = $p2p_ports;

        return $this;
    }

    /**
     * Gets polling
     *
     * @return bool|null
     */
    public function getPolling()
    {
        return $this->container['polling'];
    }

    /**
     * Sets polling
     *
     * @param bool|null $polling Whether to add polls to the meeting controls.
     *
     * @return self
     */
    public function setPolling($polling)
    {
        $this->container['polling'] = $polling;

        return $this;
    }

    /**
     * Gets meeting_polling
     *
     * @return \Zoom\Api\Model\AccountUpdateSettingsInMeetingMeetingPolling|null
     */
    public function getMeetingPolling()
    {
        return $this->container['meeting_polling'];
    }

    /**
     * Sets meeting_polling
     *
     * @param \Zoom\Api\Model\AccountUpdateSettingsInMeetingMeetingPolling|null $meeting_polling meeting_polling
     *
     * @return self
     */
    public function setMeetingPolling($meeting_polling)
    {
        $this->container['meeting_polling'] = $meeting_polling;

        return $this;
    }

    /**
     * Gets ports_range
     *
     * @return string|null
     */
    public function getPortsRange()
    {
        return $this->container['ports_range'];
    }

    /**
     * Sets ports_range
     *
     * @param string|null $ports_range When the `p2p_ports` value is `true`, a comma-separated list of the peer to peer listening ports range, between `1` to `65535`. This value defaults to an empty string.
     *
     * @return self
     */
    public function setPortsRange($ports_range)
    {
        $this->container['ports_range'] = $ports_range;

        return $this;
    }

    /**
     * Gets post_meeting_feedback
     *
     * @return bool|null
     */
    public function getPostMeetingFeedback()
    {
        return $this->container['post_meeting_feedback'];
    }

    /**
     * Sets post_meeting_feedback
     *
     * @param bool|null $post_meeting_feedback Whether to display a thumbs up or thumbs down feedback survey at the end of each meeting.
     *
     * @return self
     */
    public function setPostMeetingFeedback($post_meeting_feedback)
    {
        $this->container['post_meeting_feedback'] = $post_meeting_feedback;

        return $this;
    }

    /**
     * Gets private_chat
     *
     * @return bool|null
     */
    public function getPrivateChat()
    {
        return $this->container['private_chat'];
    }

    /**
     * Sets private_chat
     *
     * @param bool|null $private_chat Whether to [enable private chat](https://support.zoom.us/hc/en-us/articles/360060835932-Enabling-and-disabling-private-chat) between participants during meetings.
     *
     * @return self
     */
    public function setPrivateChat($private_chat)
    {
        $this->container['private_chat'] = $private_chat;

        return $this;
    }

    /**
     * Gets record_play_own_voice
     *
     * @return bool|null
     */
    public function getRecordPlayOwnVoice()
    {
        return $this->container['record_play_own_voice'];
    }

    /**
     * Sets record_play_own_voice
     *
     * @param bool|null $record_play_own_voice Whether to let the user record and play their own voice.
     *
     * @return self
     */
    public function setRecordPlayOwnVoice($record_play_own_voice)
    {
        $this->container['record_play_own_voice'] = $record_play_own_voice;

        return $this;
    }

    /**
     * Gets remote_control
     *
     * @return bool|null
     */
    public function getRemoteControl()
    {
        return $this->container['remote_control'];
    }

    /**
     * Sets remote_control
     *
     * @param bool|null $remote_control Whether to enable the [**Remote control**](https://support.zoom.us/hc/en-us/articles/201362673-Requesting-or-giving-remote-control) setting.
     *
     * @return self
     */
    public function setRemoteControl($remote_control)
    {
        $this->container['remote_control'] = $remote_control;

        return $this;
    }

    /**
     * Gets non_verbal_feedback
     *
     * @return bool|null
     */
    public function getNonVerbalFeedback()
    {
        return $this->container['non_verbal_feedback'];
    }

    /**
     * Sets non_verbal_feedback
     *
     * @param bool|null $non_verbal_feedback Whether to enable the [**Non-verbal feedback**](https://support.zoom.us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions-) setting.  This value defaults to `false`.
     *
     * @return self
     */
    public function setNonVerbalFeedback($non_verbal_feedback)
    {
        $this->container['non_verbal_feedback'] = $non_verbal_feedback;

        return $this;
    }

    /**
     * Gets remote_support
     *
     * @return bool|null
     */
    public function getRemoteSupport()
    {
        return $this->container['remote_support'];
    }

    /**
     * Sets remote_support
     *
     * @param bool|null $remote_support Whether to enable the [**Remote support**](https://support.zoom.us/hc/en-us/articles/360060951012-Enabling-remote-support) setting. This value defaults to `false`.
     *
     * @return self
     */
    public function setRemoteSupport($remote_support)
    {
        $this->container['remote_support'] = $remote_support;

        return $this;
    }

    /**
     * Gets request_permission_to_unmute_participants
     *
     * @return bool|null
     */
    public function getRequestPermissionToUnmuteParticipants()
    {
        return $this->container['request_permission_to_unmute_participants'];
    }

    /**
     * Sets request_permission_to_unmute_participants
     *
     * @param bool|null $request_permission_to_unmute_participants Whether to enable the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting) setting.
     *
     * @return self
     */
    public function setRequestPermissionToUnmuteParticipants($request_permission_to_unmute_participants)
    {
        $this->container['request_permission_to_unmute_participants'] = $request_permission_to_unmute_participants;

        return $this;
    }

    /**
     * Gets screen_sharing
     *
     * @return bool|null
     */
    public function getScreenSharing()
    {
        return $this->container['screen_sharing'];
    }

    /**
     * Sets screen_sharing
     *
     * @param bool|null $screen_sharing Whether to allow hosts and participants to share their screen or content during meetings.
     *
     * @return self
     */
    public function setScreenSharing($screen_sharing)
    {
        $this->container['screen_sharing'] = $screen_sharing;

        return $this;
    }

    /**
     * Gets sending_default_email_invites
     *
     * @return bool|null
     */
    public function getSendingDefaultEmailInvites()
    {
        return $this->container['sending_default_email_invites'];
    }

    /**
     * Sets sending_default_email_invites
     *
     * @param bool|null $sending_default_email_invites Whether to enable the [**Only show default email when sending email invites**](https://support.zoom.us/hc/en-us/articles/360061433531-Showing-default-email-when-sending-email-invites) setting.
     *
     * @return self
     */
    public function setSendingDefaultEmailInvites($sending_default_email_invites)
    {
        $this->container['sending_default_email_invites'] = $sending_default_email_invites;

        return $this;
    }

    /**
     * Gets show_a_join_from_your_browser_link
     *
     * @return bool|null
     */
    public function getShowAJoinFromYourBrowserLink()
    {
        return $this->container['show_a_join_from_your_browser_link'];
    }

    /**
     * Sets show_a_join_from_your_browser_link
     *
     * @param bool|null $show_a_join_from_your_browser_link Whether to allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.
     *
     * @return self
     */
    public function setShowAJoinFromYourBrowserLink($show_a_join_from_your_browser_link)
    {
        $this->container['show_a_join_from_your_browser_link'] = $show_a_join_from_your_browser_link;

        return $this;
    }

    /**
     * Gets show_meeting_control_toolbar
     *
     * @return bool|null
     */
    public function getShowMeetingControlToolbar()
    {
        return $this->container['show_meeting_control_toolbar'];
    }

    /**
     * Sets show_meeting_control_toolbar
     *
     * @param bool|null $show_meeting_control_toolbar Whether to display the in-meeting control toolbar.
     *
     * @return self
     */
    public function setShowMeetingControlToolbar($show_meeting_control_toolbar)
    {
        $this->container['show_meeting_control_toolbar'] = $show_meeting_control_toolbar;

        return $this;
    }

    /**
     * Gets slide_control
     *
     * @return bool|null
     */
    public function getSlideControl()
    {
        return $this->container['slide_control'];
    }

    /**
     * Sets slide_control
     *
     * @param bool|null $slide_control Whether the person sharing during a presentation can allow others to control the slide presentation. This feature is only available in version 5.8.3 or higher.
     *
     * @return self
     */
    public function setSlideControl($slide_control)
    {
        $this->container['slide_control'] = $slide_control;

        return $this;
    }

    /**
     * Gets stereo_audio
     *
     * @return bool|null
     */
    public function getStereoAudio()
    {
        return $this->container['stereo_audio'];
    }

    /**
     * Sets stereo_audio
     *
     * @param bool|null $stereo_audio Whether to allow users to select stereo audio in their client settings.
     *
     * @return self
     */
    public function setStereoAudio($stereo_audio)
    {
        $this->container['stereo_audio'] = $stereo_audio;

        return $this;
    }

    /**
     * Gets use_html_format_email
     *
     * @return bool|null
     */
    public function getUseHtmlFormatEmail()
    {
        return $this->container['use_html_format_email'];
    }

    /**
     * Sets use_html_format_email
     *
     * @param bool|null $use_html_format_email Whether to enable the use of HTML-formatted emails for the Outlook plugin.
     *
     * @return self
     */
    public function setUseHtmlFormatEmail($use_html_format_email)
    {
        $this->container['use_html_format_email'] = $use_html_format_email;

        return $this;
    }

    /**
     * Gets virtual_background
     *
     * @return bool|null
     */
    public function getVirtualBackground()
    {
        return $this->container['virtual_background'];
    }

    /**
     * Sets virtual_background
     *
     * @param bool|null $virtual_background Whether to enable Virtual Backgrounds.
     *
     * @return self
     */
    public function setVirtualBackground($virtual_background)
    {
        $this->container['virtual_background'] = $virtual_background;

        return $this;
    }

    /**
     * Gets virtual_background_settings
     *
     * @return \Zoom\Api\Model\AccountUpdateSettingsInMeetingVirtualBackgroundSettings|null
     */
    public function getVirtualBackgroundSettings()
    {
        return $this->container['virtual_background_settings'];
    }

    /**
     * Sets virtual_background_settings
     *
     * @param \Zoom\Api\Model\AccountUpdateSettingsInMeetingVirtualBackgroundSettings|null $virtual_background_settings virtual_background_settings
     *
     * @return self
     */
    public function setVirtualBackgroundSettings($virtual_background_settings)
    {
        $this->container['virtual_background_settings'] = $virtual_background_settings;

        return $this;
    }

    /**
     * Gets watermark
     *
     * @return bool|null
     */
    public function getWatermark()
    {
        return $this->container['watermark'];
    }

    /**
     * Sets watermark
     *
     * @param bool|null $watermark Whether to include a [watermark](https://support.zoom.us/hc/en-us/articles/209605273-Adding-an-image-watermark) when viewing a shared screen.
     *
     * @return self
     */
    public function setWatermark($watermark)
    {
        $this->container['watermark'] = $watermark;

        return $this;
    }

    /**
     * Gets webinar_chat
     *
     * @return \Zoom\Api\Model\AccountUpdateSettingsInMeetingWebinarChat|null
     */
    public function getWebinarChat()
    {
        return $this->container['webinar_chat'];
    }

    /**
     * Sets webinar_chat
     *
     * @param \Zoom\Api\Model\AccountUpdateSettingsInMeetingWebinarChat|null $webinar_chat webinar_chat
     *
     * @return self
     */
    public function setWebinarChat($webinar_chat)
    {
        $this->container['webinar_chat'] = $webinar_chat;

        return $this;
    }

    /**
     * Gets webinar_live_streaming
     *
     * @return \Zoom\Api\Model\AccountUpdateSettingsInMeetingWebinarLiveStreaming|null
     */
    public function getWebinarLiveStreaming()
    {
        return $this->container['webinar_live_streaming'];
    }

    /**
     * Sets webinar_live_streaming
     *
     * @param \Zoom\Api\Model\AccountUpdateSettingsInMeetingWebinarLiveStreaming|null $webinar_live_streaming webinar_live_streaming
     *
     * @return self
     */
    public function setWebinarLiveStreaming($webinar_live_streaming)
    {
        $this->container['webinar_live_streaming'] = $webinar_live_streaming;

        return $this;
    }

    /**
     * Gets webinar_polling
     *
     * @return \Zoom\Api\Model\AccountUpdateSettingsInMeetingWebinarPolling|null
     */
    public function getWebinarPolling()
    {
        return $this->container['webinar_polling'];
    }

    /**
     * Sets webinar_polling
     *
     * @param \Zoom\Api\Model\AccountUpdateSettingsInMeetingWebinarPolling|null $webinar_polling webinar_polling
     *
     * @return self
     */
    public function setWebinarPolling($webinar_polling)
    {
        $this->container['webinar_polling'] = $webinar_polling;

        return $this;
    }

    /**
     * Gets webinar_question_answer
     *
     * @return bool|null
     */
    public function getWebinarQuestionAnswer()
    {
        return $this->container['webinar_question_answer'];
    }

    /**
     * Sets webinar_question_answer
     *
     * @param bool|null $webinar_question_answer Whether attendees can ask the host and panelists questions in the webinar.
     *
     * @return self
     */
    public function setWebinarQuestionAnswer($webinar_question_answer)
    {
        $this->container['webinar_question_answer'] = $webinar_question_answer;

        return $this;
    }

    /**
     * Gets webinar_survey
     *
     * @return bool|null
     */
    public function getWebinarSurvey()
    {
        return $this->container['webinar_survey'];
    }

    /**
     * Sets webinar_survey
     *
     * @param bool|null $webinar_survey Whether to allow the host to present surveys to attendees once a webinar has ended.
     *
     * @return self
     */
    public function setWebinarSurvey($webinar_survey)
    {
        $this->container['webinar_survey'] = $webinar_survey;

        return $this;
    }

    /**
     * Gets whiteboard
     *
     * @return bool|null
     */
    public function getWhiteboard()
    {
        return $this->container['whiteboard'];
    }

    /**
     * Sets whiteboard
     *
     * @param bool|null $whiteboard Whether to enable the [**Zoom Whiteboard**](https://support.zoom.us/hc/en-us/articles/4410916881421) feature.
     *
     * @return self
     */
    public function setWhiteboard($whiteboard)
    {
        $this->container['whiteboard'] = $whiteboard;

        return $this;
    }

    /**
     * Gets who_can_share_screen
     *
     * @return string|null
     */
    public function getWhoCanShareScreen()
    {
        return $this->container['who_can_share_screen'];
    }

    /**
     * Sets who_can_share_screen
     *
     * @param string|null $who_can_share_screen The type of user who can share their screen or content during meetings:  * `host` — Only hosts can screen share.  * `all` — Both hosts and participants can screen share.
     *
     * @return self
     */
    public function setWhoCanShareScreen($who_can_share_screen)
    {
        $allowedValues = $this->getWhoCanShareScreenAllowableValues();
        if (!is_null($who_can_share_screen) && !in_array($who_can_share_screen, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'who_can_share_screen', must be one of '%s'",
                    $who_can_share_screen,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['who_can_share_screen'] = $who_can_share_screen;

        return $this;
    }

    /**
     * Gets who_can_share_screen_when_someone_is_sharing
     *
     * @return string|null
     */
    public function getWhoCanShareScreenWhenSomeoneIsSharing()
    {
        return $this->container['who_can_share_screen_when_someone_is_sharing'];
    }

    /**
     * Sets who_can_share_screen_when_someone_is_sharing
     *
     * @param string|null $who_can_share_screen_when_someone_is_sharing The type of user that can begin sharing their screen when someone else in the meeting is sharing their screen:  * `host` — Only hosts can screen share when someone else is sharing.  * `all` — Both hosts and participants can screen share when someone else is sharing.
     *
     * @return self
     */
    public function setWhoCanShareScreenWhenSomeoneIsSharing($who_can_share_screen_when_someone_is_sharing)
    {
        $allowedValues = $this->getWhoCanShareScreenWhenSomeoneIsSharingAllowableValues();
        if (!is_null($who_can_share_screen_when_someone_is_sharing) && !in_array($who_can_share_screen_when_someone_is_sharing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'who_can_share_screen_when_someone_is_sharing', must be one of '%s'",
                    $who_can_share_screen_when_someone_is_sharing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['who_can_share_screen_when_someone_is_sharing'] = $who_can_share_screen_when_someone_is_sharing;

        return $this;
    }

    /**
     * Gets participants_share_simultaneously
     *
     * @return string|null
     */
    public function getParticipantsShareSimultaneously()
    {
        return $this->container['participants_share_simultaneously'];
    }

    /**
     * Sets participants_share_simultaneously
     *
     * @param string|null $participants_share_simultaneously Indicates how many participants can share at the same time. The value can be one of the following:<br> `one`: Only one participant can share at a time .<br> `multiple`: Multiple participants can share simultaneously (dual monitors recommended).
     *
     * @return self
     */
    public function setParticipantsShareSimultaneously($participants_share_simultaneously)
    {
        $allowedValues = $this->getParticipantsShareSimultaneouslyAllowableValues();
        if (!is_null($participants_share_simultaneously) && !in_array($participants_share_simultaneously, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'participants_share_simultaneously', must be one of '%s'",
                    $participants_share_simultaneously,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['participants_share_simultaneously'] = $participants_share_simultaneously;

        return $this;
    }

    /**
     * Gets workplace_by_facebook
     *
     * @return bool|null
     */
    public function getWorkplaceByFacebook()
    {
        return $this->container['workplace_by_facebook'];
    }

    /**
     * Sets workplace_by_facebook
     *
     * @param bool|null $workplace_by_facebook Whether to allow Workplace by Facebook livestreaming.
     *
     * @return self
     */
    public function setWorkplaceByFacebook($workplace_by_facebook)
    {
        $this->container['workplace_by_facebook'] = $workplace_by_facebook;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


