<?php
/**
 * GetZRSettings200ResponseOneOfZoomRooms
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * GetZRSettings200ResponseOneOfZoomRooms Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetZRSettings200ResponseOneOfZoomRooms implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getZRSettings_200_response_oneOf_zoom_rooms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_multiple_content_sharing' => 'bool',
        'remote_support' => 'bool',
        'audio_device_daily_auto_test' => 'bool',
        'auto_direct_sharing' => 'bool',
        'auto_start_scheduled_meeting' => 'bool',
        'auto_stop_scheduled_meeting' => 'bool',
        'count_attendees_number_in_room' => 'bool',
        'display_feedback_survey' => 'bool',
        'display_meeting_list' => 'bool',
        'display_top_banner' => 'bool',
        'encrypt_shared_screen_content' => 'bool',
        'hide_id_for_private_meeting' => 'bool',
        'hide_share_instruction' => 'bool',
        'send_whiteboard_to_internal_contact_only' => 'bool',
        'show_alert_before_meeting' => 'bool',
        'show_call_history_in_room' => 'bool',
        'show_contact_list_on_controller' => 'bool',
        'show_non_video_participants' => 'bool',
        'start_airplay_manually' => 'bool',
        'start_airplay_mirroring' => 'bool',
        'support_join_3rd_party_meeting' => 'bool',
        'transform_meeting_to_private' => 'bool',
        'upcoming_meeting_alert' => 'bool',
        'weekly_system_restart' => 'bool',
        'entry_exit_chime' => 'string',
        'record_play_own_voice' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_multiple_content_sharing' => null,
        'remote_support' => null,
        'audio_device_daily_auto_test' => null,
        'auto_direct_sharing' => null,
        'auto_start_scheduled_meeting' => null,
        'auto_stop_scheduled_meeting' => null,
        'count_attendees_number_in_room' => null,
        'display_feedback_survey' => null,
        'display_meeting_list' => null,
        'display_top_banner' => null,
        'encrypt_shared_screen_content' => null,
        'hide_id_for_private_meeting' => null,
        'hide_share_instruction' => null,
        'send_whiteboard_to_internal_contact_only' => null,
        'show_alert_before_meeting' => null,
        'show_call_history_in_room' => null,
        'show_contact_list_on_controller' => null,
        'show_non_video_participants' => null,
        'start_airplay_manually' => null,
        'start_airplay_mirroring' => null,
        'support_join_3rd_party_meeting' => null,
        'transform_meeting_to_private' => null,
        'upcoming_meeting_alert' => null,
        'weekly_system_restart' => null,
        'entry_exit_chime' => null,
        'record_play_own_voice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_multiple_content_sharing' => 'allow_multiple_content_sharing',
        'remote_support' => 'remote_support',
        'audio_device_daily_auto_test' => 'audio_device_daily_auto_test',
        'auto_direct_sharing' => 'auto_direct_sharing',
        'auto_start_scheduled_meeting' => 'auto_start_scheduled_meeting',
        'auto_stop_scheduled_meeting' => 'auto_stop_scheduled_meeting',
        'count_attendees_number_in_room' => 'count_attendees_number_in_room',
        'display_feedback_survey' => 'display_feedback_survey',
        'display_meeting_list' => 'display_meeting_list',
        'display_top_banner' => 'display_top_banner',
        'encrypt_shared_screen_content' => 'encrypt_shared_screen_content',
        'hide_id_for_private_meeting' => 'hide_id_for_private_meeting',
        'hide_share_instruction' => 'hide_share_instruction',
        'send_whiteboard_to_internal_contact_only' => 'send_whiteboard_to_internal_contact_only',
        'show_alert_before_meeting' => 'show_alert_before_meeting',
        'show_call_history_in_room' => 'show_call_history_in_room',
        'show_contact_list_on_controller' => 'show_contact_list_on_controller',
        'show_non_video_participants' => 'show_non_video_participants',
        'start_airplay_manually' => 'start_airplay_manually',
        'start_airplay_mirroring' => 'start_airplay_mirroring',
        'support_join_3rd_party_meeting' => 'support_join_3rd_party_meeting',
        'transform_meeting_to_private' => 'transform_meeting_to_private',
        'upcoming_meeting_alert' => 'upcoming_meeting_alert',
        'weekly_system_restart' => 'weekly_system_restart',
        'entry_exit_chime' => 'entry_exit_chime',
        'record_play_own_voice' => 'record_play_own_voice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_multiple_content_sharing' => 'setAllowMultipleContentSharing',
        'remote_support' => 'setRemoteSupport',
        'audio_device_daily_auto_test' => 'setAudioDeviceDailyAutoTest',
        'auto_direct_sharing' => 'setAutoDirectSharing',
        'auto_start_scheduled_meeting' => 'setAutoStartScheduledMeeting',
        'auto_stop_scheduled_meeting' => 'setAutoStopScheduledMeeting',
        'count_attendees_number_in_room' => 'setCountAttendeesNumberInRoom',
        'display_feedback_survey' => 'setDisplayFeedbackSurvey',
        'display_meeting_list' => 'setDisplayMeetingList',
        'display_top_banner' => 'setDisplayTopBanner',
        'encrypt_shared_screen_content' => 'setEncryptSharedScreenContent',
        'hide_id_for_private_meeting' => 'setHideIdForPrivateMeeting',
        'hide_share_instruction' => 'setHideShareInstruction',
        'send_whiteboard_to_internal_contact_only' => 'setSendWhiteboardToInternalContactOnly',
        'show_alert_before_meeting' => 'setShowAlertBeforeMeeting',
        'show_call_history_in_room' => 'setShowCallHistoryInRoom',
        'show_contact_list_on_controller' => 'setShowContactListOnController',
        'show_non_video_participants' => 'setShowNonVideoParticipants',
        'start_airplay_manually' => 'setStartAirplayManually',
        'start_airplay_mirroring' => 'setStartAirplayMirroring',
        'support_join_3rd_party_meeting' => 'setSupportJoin3rdPartyMeeting',
        'transform_meeting_to_private' => 'setTransformMeetingToPrivate',
        'upcoming_meeting_alert' => 'setUpcomingMeetingAlert',
        'weekly_system_restart' => 'setWeeklySystemRestart',
        'entry_exit_chime' => 'setEntryExitChime',
        'record_play_own_voice' => 'setRecordPlayOwnVoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_multiple_content_sharing' => 'getAllowMultipleContentSharing',
        'remote_support' => 'getRemoteSupport',
        'audio_device_daily_auto_test' => 'getAudioDeviceDailyAutoTest',
        'auto_direct_sharing' => 'getAutoDirectSharing',
        'auto_start_scheduled_meeting' => 'getAutoStartScheduledMeeting',
        'auto_stop_scheduled_meeting' => 'getAutoStopScheduledMeeting',
        'count_attendees_number_in_room' => 'getCountAttendeesNumberInRoom',
        'display_feedback_survey' => 'getDisplayFeedbackSurvey',
        'display_meeting_list' => 'getDisplayMeetingList',
        'display_top_banner' => 'getDisplayTopBanner',
        'encrypt_shared_screen_content' => 'getEncryptSharedScreenContent',
        'hide_id_for_private_meeting' => 'getHideIdForPrivateMeeting',
        'hide_share_instruction' => 'getHideShareInstruction',
        'send_whiteboard_to_internal_contact_only' => 'getSendWhiteboardToInternalContactOnly',
        'show_alert_before_meeting' => 'getShowAlertBeforeMeeting',
        'show_call_history_in_room' => 'getShowCallHistoryInRoom',
        'show_contact_list_on_controller' => 'getShowContactListOnController',
        'show_non_video_participants' => 'getShowNonVideoParticipants',
        'start_airplay_manually' => 'getStartAirplayManually',
        'start_airplay_mirroring' => 'getStartAirplayMirroring',
        'support_join_3rd_party_meeting' => 'getSupportJoin3rdPartyMeeting',
        'transform_meeting_to_private' => 'getTransformMeetingToPrivate',
        'upcoming_meeting_alert' => 'getUpcomingMeetingAlert',
        'weekly_system_restart' => 'getWeeklySystemRestart',
        'entry_exit_chime' => 'getEntryExitChime',
        'record_play_own_voice' => 'getRecordPlayOwnVoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ENTRY_EXIT_CHIME_HOST = 'host';
    public const ENTRY_EXIT_CHIME_ALL = 'all';
    public const ENTRY_EXIT_CHIME_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntryExitChimeAllowableValues()
    {
        return [
            self::ENTRY_EXIT_CHIME_HOST,
            self::ENTRY_EXIT_CHIME_ALL,
            self::ENTRY_EXIT_CHIME_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_multiple_content_sharing'] = $data['allow_multiple_content_sharing'] ?? null;
        $this->container['remote_support'] = $data['remote_support'] ?? false;
        $this->container['audio_device_daily_auto_test'] = $data['audio_device_daily_auto_test'] ?? null;
        $this->container['auto_direct_sharing'] = $data['auto_direct_sharing'] ?? null;
        $this->container['auto_start_scheduled_meeting'] = $data['auto_start_scheduled_meeting'] ?? null;
        $this->container['auto_stop_scheduled_meeting'] = $data['auto_stop_scheduled_meeting'] ?? null;
        $this->container['count_attendees_number_in_room'] = $data['count_attendees_number_in_room'] ?? null;
        $this->container['display_feedback_survey'] = $data['display_feedback_survey'] ?? null;
        $this->container['display_meeting_list'] = $data['display_meeting_list'] ?? null;
        $this->container['display_top_banner'] = $data['display_top_banner'] ?? null;
        $this->container['encrypt_shared_screen_content'] = $data['encrypt_shared_screen_content'] ?? null;
        $this->container['hide_id_for_private_meeting'] = $data['hide_id_for_private_meeting'] ?? null;
        $this->container['hide_share_instruction'] = $data['hide_share_instruction'] ?? null;
        $this->container['send_whiteboard_to_internal_contact_only'] = $data['send_whiteboard_to_internal_contact_only'] ?? null;
        $this->container['show_alert_before_meeting'] = $data['show_alert_before_meeting'] ?? null;
        $this->container['show_call_history_in_room'] = $data['show_call_history_in_room'] ?? null;
        $this->container['show_contact_list_on_controller'] = $data['show_contact_list_on_controller'] ?? null;
        $this->container['show_non_video_participants'] = $data['show_non_video_participants'] ?? null;
        $this->container['start_airplay_manually'] = $data['start_airplay_manually'] ?? null;
        $this->container['start_airplay_mirroring'] = $data['start_airplay_mirroring'] ?? null;
        $this->container['support_join_3rd_party_meeting'] = $data['support_join_3rd_party_meeting'] ?? null;
        $this->container['transform_meeting_to_private'] = $data['transform_meeting_to_private'] ?? null;
        $this->container['upcoming_meeting_alert'] = $data['upcoming_meeting_alert'] ?? null;
        $this->container['weekly_system_restart'] = $data['weekly_system_restart'] ?? null;
        $this->container['entry_exit_chime'] = $data['entry_exit_chime'] ?? null;
        $this->container['record_play_own_voice'] = $data['record_play_own_voice'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEntryExitChimeAllowableValues();
        if (!is_null($this->container['entry_exit_chime']) && !in_array($this->container['entry_exit_chime'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entry_exit_chime', must be one of '%s'",
                $this->container['entry_exit_chime'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_multiple_content_sharing
     *
     * @return bool|null
     */
    public function getAllowMultipleContentSharing()
    {
        return $this->container['allow_multiple_content_sharing'];
    }

    /**
     * Sets allow_multiple_content_sharing
     *
     * @param bool|null $allow_multiple_content_sharing Enable multiple participants to [share content simultaneously](https://support.zoom.us/hc/en-us/articles/360017767812-Sharing-Multiple-Screens-in-a-Zoom-Room) by default.
     *
     * @return self
     */
    public function setAllowMultipleContentSharing($allow_multiple_content_sharing)
    {
        $this->container['allow_multiple_content_sharing'] = $allow_multiple_content_sharing;

        return $this;
    }

    /**
     * Gets remote_support
     *
     * @return bool|null
     */
    public function getRemoteSupport()
    {
        return $this->container['remote_support'];
    }

    /**
     * Sets remote_support
     *
     * @param bool|null $remote_support Whether to enable the [**Remote support**](https://support.zoom.us/hc/en-us/articles/360060951012-Enabling-remote-support) setting. This value defaults to `false`. By enabling this setting, the setting `allow_multiple_content_sharing` will not work.
     *
     * @return self
     */
    public function setRemoteSupport($remote_support)
    {
        $this->container['remote_support'] = $remote_support;

        return $this;
    }

    /**
     * Gets audio_device_daily_auto_test
     *
     * @return bool|null
     */
    public function getAudioDeviceDailyAutoTest()
    {
        return $this->container['audio_device_daily_auto_test'];
    }

    /**
     * Sets audio_device_daily_auto_test
     *
     * @param bool|null $audio_device_daily_auto_test Enable [automated audio test](https://support.zoom.us/hc/en-us/articles/360000319683-Zoom-Rooms-Daily-Audio-Testing) to ensure high quality audio.
     *
     * @return self
     */
    public function setAudioDeviceDailyAutoTest($audio_device_daily_auto_test)
    {
        $this->container['audio_device_daily_auto_test'] = $audio_device_daily_auto_test;

        return $this;
    }

    /**
     * Gets auto_direct_sharing
     *
     * @return bool|null
     */
    public function getAutoDirectSharing()
    {
        return $this->container['auto_direct_sharing'];
    }

    /**
     * Sets auto_direct_sharing
     *
     * @param bool|null $auto_direct_sharing Enable participants in a Zoom Room to share their laptop screen on the Zoom Room TV without entering a meeting ID or sharing code.
     *
     * @return self
     */
    public function setAutoDirectSharing($auto_direct_sharing)
    {
        $this->container['auto_direct_sharing'] = $auto_direct_sharing;

        return $this;
    }

    /**
     * Gets auto_start_scheduled_meeting
     *
     * @return bool|null
     */
    public function getAutoStartScheduledMeeting()
    {
        return $this->container['auto_start_scheduled_meeting'];
    }

    /**
     * Sets auto_start_scheduled_meeting
     *
     * @param bool|null $auto_start_scheduled_meeting Automatically start scheduled meetings according to the start time listed on the calendar associated with the room. A meeting alert will appear 10 minutes prior to the scheduled time on the TV.
     *
     * @return self
     */
    public function setAutoStartScheduledMeeting($auto_start_scheduled_meeting)
    {
        $this->container['auto_start_scheduled_meeting'] = $auto_start_scheduled_meeting;

        return $this;
    }

    /**
     * Gets auto_stop_scheduled_meeting
     *
     * @return bool|null
     */
    public function getAutoStopScheduledMeeting()
    {
        return $this->container['auto_stop_scheduled_meeting'];
    }

    /**
     * Sets auto_stop_scheduled_meeting
     *
     * @param bool|null $auto_stop_scheduled_meeting Automatically stop the meeting at the end time as scheduled and listed in the calendar associated with the room.
     *
     * @return self
     */
    public function setAutoStopScheduledMeeting($auto_stop_scheduled_meeting)
    {
        $this->container['auto_stop_scheduled_meeting'] = $auto_stop_scheduled_meeting;

        return $this;
    }

    /**
     * Gets count_attendees_number_in_room
     *
     * @return bool|null
     */
    public function getCountAttendeesNumberInRoom()
    {
        return $this->container['count_attendees_number_in_room'];
    }

    /**
     * Sets count_attendees_number_in_room
     *
     * @param bool|null $count_attendees_number_in_room Use facial detection technology to [determine and display the attendees count](https://support.zoom.us/hc/en-us/articles/360031027111-Count-Attendees-in-Zoom-Rooms) after meetings on Dashboard.
     *
     * @return self
     */
    public function setCountAttendeesNumberInRoom($count_attendees_number_in_room)
    {
        $this->container['count_attendees_number_in_room'] = $count_attendees_number_in_room;

        return $this;
    }

    /**
     * Gets display_feedback_survey
     *
     * @return bool|null
     */
    public function getDisplayFeedbackSurvey()
    {
        return $this->container['display_feedback_survey'];
    }

    /**
     * Sets display_feedback_survey
     *
     * @param bool|null $display_feedback_survey Display a [survey](https://support.zoom.us/hc/en-us/articles/214193146-End-of-Meeting-Attendee-Feedback) at the end of each meeting regarding the audio and video quality on the Zoom Rooms Controller.
     *
     * @return self
     */
    public function setDisplayFeedbackSurvey($display_feedback_survey)
    {
        $this->container['display_feedback_survey'] = $display_feedback_survey;

        return $this;
    }

    /**
     * Gets display_meeting_list
     *
     * @return bool|null
     */
    public function getDisplayMeetingList()
    {
        return $this->container['display_meeting_list'];
    }

    /**
     * Sets display_meeting_list
     *
     * @param bool|null $display_meeting_list Show the same information on the TV that is shown on the controller.
     *
     * @return self
     */
    public function setDisplayMeetingList($display_meeting_list)
    {
        $this->container['display_meeting_list'] = $display_meeting_list;

        return $this;
    }

    /**
     * Gets display_top_banner
     *
     * @return bool|null
     */
    public function getDisplayTopBanner()
    {
        return $this->container['display_top_banner'];
    }

    /**
     * Sets display_top_banner
     *
     * @param bool|null $display_top_banner Allow to display room name, time and sharing key on the top portion of TV.
     *
     * @return self
     */
    public function setDisplayTopBanner($display_top_banner)
    {
        $this->container['display_top_banner'] = $display_top_banner;

        return $this;
    }

    /**
     * Gets encrypt_shared_screen_content
     *
     * @return bool|null
     */
    public function getEncryptSharedScreenContent()
    {
        return $this->container['encrypt_shared_screen_content'];
    }

    /**
     * Sets encrypt_shared_screen_content
     *
     * @param bool|null $encrypt_shared_screen_content Encrypt screen and content shared in meetings.
     *
     * @return self
     */
    public function setEncryptSharedScreenContent($encrypt_shared_screen_content)
    {
        $this->container['encrypt_shared_screen_content'] = $encrypt_shared_screen_content;

        return $this;
    }

    /**
     * Gets hide_id_for_private_meeting
     *
     * @return bool|null
     */
    public function getHideIdForPrivateMeeting()
    {
        return $this->container['hide_id_for_private_meeting'];
    }

    /**
     * Sets hide_id_for_private_meeting
     *
     * @param bool|null $hide_id_for_private_meeting If enabled, the meeting host and meeting ID (in addition to the meeting topic) are hidden from the Zoom Rooms display for private meetings. This affects meetings that were originally scheduled as private, as well as public meetings that were transformed to private.
     *
     * @return self
     */
    public function setHideIdForPrivateMeeting($hide_id_for_private_meeting)
    {
        $this->container['hide_id_for_private_meeting'] = $hide_id_for_private_meeting;

        return $this;
    }

    /**
     * Gets hide_share_instruction
     *
     * @return bool|null
     */
    public function getHideShareInstruction()
    {
        return $this->container['hide_share_instruction'];
    }

    /**
     * Sets hide_share_instruction
     *
     * @param bool|null $hide_share_instruction Hide share instructions from TV.
     *
     * @return self
     */
    public function setHideShareInstruction($hide_share_instruction)
    {
        $this->container['hide_share_instruction'] = $hide_share_instruction;

        return $this;
    }

    /**
     * Gets send_whiteboard_to_internal_contact_only
     *
     * @return bool|null
     */
    public function getSendWhiteboardToInternalContactOnly()
    {
        return $this->container['send_whiteboard_to_internal_contact_only'];
    }

    /**
     * Sets send_whiteboard_to_internal_contact_only
     *
     * @param bool|null $send_whiteboard_to_internal_contact_only Restrict[ sending Whiteboard sessions](https://support.zoom.us/hc/en-us/articles/115004797286-Using-the-Whiteboard-in-Zoom-Rooms-for-Touch#h_781274b3-5237-4320-8826-be2120b00e21) to contacts or internal users only.
     *
     * @return self
     */
    public function setSendWhiteboardToInternalContactOnly($send_whiteboard_to_internal_contact_only)
    {
        $this->container['send_whiteboard_to_internal_contact_only'] = $send_whiteboard_to_internal_contact_only;

        return $this;
    }

    /**
     * Gets show_alert_before_meeting
     *
     * @return bool|null
     */
    public function getShowAlertBeforeMeeting()
    {
        return $this->container['show_alert_before_meeting'];
    }

    /**
     * Sets show_alert_before_meeting
     *
     * @param bool|null $show_alert_before_meeting If enabled, the upcoming meeting alert message will be shown on the TV display. The value of the `upcoming_meeting_alert` field should be set to `true` to use this field.
     *
     * @return self
     */
    public function setShowAlertBeforeMeeting($show_alert_before_meeting)
    {
        $this->container['show_alert_before_meeting'] = $show_alert_before_meeting;

        return $this;
    }

    /**
     * Gets show_call_history_in_room
     *
     * @return bool|null
     */
    public function getShowCallHistoryInRoom()
    {
        return $this->container['show_call_history_in_room'];
    }

    /**
     * Sets show_call_history_in_room
     *
     * @param bool|null $show_call_history_in_room Allow users to see call history of joined meetings and phone calls from the Zoom Rooms controller.
     *
     * @return self
     */
    public function setShowCallHistoryInRoom($show_call_history_in_room)
    {
        $this->container['show_call_history_in_room'] = $show_call_history_in_room;

        return $this;
    }

    /**
     * Gets show_contact_list_on_controller
     *
     * @return bool|null
     */
    public function getShowContactListOnController()
    {
        return $this->container['show_contact_list_on_controller'];
    }

    /**
     * Sets show_contact_list_on_controller
     *
     * @param bool|null $show_contact_list_on_controller If enabled, you can invite participants from the contact list during a meeting or when starting a meeting
     *
     * @return self
     */
    public function setShowContactListOnController($show_contact_list_on_controller)
    {
        $this->container['show_contact_list_on_controller'] = $show_contact_list_on_controller;

        return $this;
    }

    /**
     * Gets show_non_video_participants
     *
     * @return bool|null
     */
    public function getShowNonVideoParticipants()
    {
        return $this->container['show_non_video_participants'];
    }

    /**
     * Sets show_non_video_participants
     *
     * @param bool|null $show_non_video_participants When enabled, meeting participants that are audio only or have their video turned off will also be shown on the Zoom Rooms display by default.
     *
     * @return self
     */
    public function setShowNonVideoParticipants($show_non_video_participants)
    {
        $this->container['show_non_video_participants'] = $show_non_video_participants;

        return $this;
    }

    /**
     * Gets start_airplay_manually
     *
     * @return bool|null
     */
    public function getStartAirplayManually()
    {
        return $this->container['start_airplay_manually'];
    }

    /**
     * Sets start_airplay_manually
     *
     * @param bool|null $start_airplay_manually Require the AirPlay service to be [started by an administrator](https://support.zoom.us/hc/en-us/articles/204726885-Screen-Share-Using-Airplay-Mirroring#h_a342ad38-4e46-47a8-a1d9-cded3b144b39) rather than always being available.
     *
     * @return self
     */
    public function setStartAirplayManually($start_airplay_manually)
    {
        $this->container['start_airplay_manually'] = $start_airplay_manually;

        return $this;
    }

    /**
     * Gets start_airplay_mirroring
     *
     * @return bool|null
     */
    public function getStartAirplayMirroring()
    {
        return $this->container['start_airplay_mirroring'];
    }

    /**
     * Sets start_airplay_mirroring
     *
     * @param bool|null $start_airplay_mirroring Allow users to share content via Apple Screen Mirroring (called Airplay on iOS 11 or earlier) in Zoom Rooms
     *
     * @return self
     */
    public function setStartAirplayMirroring($start_airplay_mirroring)
    {
        $this->container['start_airplay_mirroring'] = $start_airplay_mirroring;

        return $this;
    }

    /**
     * Gets support_join_3rd_party_meeting
     *
     * @return bool|null
     */
    public function getSupportJoin3rdPartyMeeting()
    {
        return $this->container['support_join_3rd_party_meeting'];
    }

    /**
     * Sets support_join_3rd_party_meeting
     *
     * @param bool|null $support_join_3rd_party_meeting Integrate with Skype for Business, GoToMeeting, or WebEx and show the meeting dial-in button on the meeting list tab for Zoom Rooms Controllers.
     *
     * @return self
     */
    public function setSupportJoin3rdPartyMeeting($support_join_3rd_party_meeting)
    {
        $this->container['support_join_3rd_party_meeting'] = $support_join_3rd_party_meeting;

        return $this;
    }

    /**
     * Gets transform_meeting_to_private
     *
     * @return bool|null
     */
    public function getTransformMeetingToPrivate()
    {
        return $this->container['transform_meeting_to_private'];
    }

    /**
     * Sets transform_meeting_to_private
     *
     * @param bool|null $transform_meeting_to_private If enabled, all meetings in this room will be treated as [private meetings](https://support.zoom.us/hc/en-us/articles/115001051063-Zoom-Rooms-Private-Meetings), and the Zoom Room will display \"Your Name's Meeting\" instead of the real meeting topic.
     *
     * @return self
     */
    public function setTransformMeetingToPrivate($transform_meeting_to_private)
    {
        $this->container['transform_meeting_to_private'] = $transform_meeting_to_private;

        return $this;
    }

    /**
     * Gets upcoming_meeting_alert
     *
     * @return bool|null
     */
    public function getUpcomingMeetingAlert()
    {
        return $this->container['upcoming_meeting_alert'];
    }

    /**
     * Sets upcoming_meeting_alert
     *
     * @param bool|null $upcoming_meeting_alert If enabled, a reminder will display 10 minutes prior to the next scheduled meeting on the controller.
     *
     * @return self
     */
    public function setUpcomingMeetingAlert($upcoming_meeting_alert)
    {
        $this->container['upcoming_meeting_alert'] = $upcoming_meeting_alert;

        return $this;
    }

    /**
     * Gets weekly_system_restart
     *
     * @return bool|null
     */
    public function getWeeklySystemRestart()
    {
        return $this->container['weekly_system_restart'];
    }

    /**
     * Sets weekly_system_restart
     *
     * @param bool|null $weekly_system_restart [Restart](https://support.zoom.us/hc/en-us/articles/205418949-Zoom-Rooms-Weekly-System-Restart) the Zoom Rooms computer and controller once a week.
     *
     * @return self
     */
    public function setWeeklySystemRestart($weekly_system_restart)
    {
        $this->container['weekly_system_restart'] = $weekly_system_restart;

        return $this;
    }

    /**
     * Gets entry_exit_chime
     *
     * @return string|null
     */
    public function getEntryExitChime()
    {
        return $this->container['entry_exit_chime'];
    }

    /**
     * Sets entry_exit_chime
     *
     * @param string|null $entry_exit_chime The sound that plays when participants join or leave a meeting:  * `host` — Chime when host joins or leaves a meeting.  * `all` — Chime when any participant joins or leaves a meeting.  * `none` — Do not chime.
     *
     * @return self
     */
    public function setEntryExitChime($entry_exit_chime)
    {
        $allowedValues = $this->getEntryExitChimeAllowableValues();
        if (!is_null($entry_exit_chime) && !in_array($entry_exit_chime, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entry_exit_chime', must be one of '%s'",
                    $entry_exit_chime,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entry_exit_chime'] = $entry_exit_chime;

        return $this;
    }

    /**
     * Gets record_play_own_voice
     *
     * @return bool|null
     */
    public function getRecordPlayOwnVoice()
    {
        return $this->container['record_play_own_voice'];
    }

    /**
     * Sets record_play_own_voice
     *
     * @param bool|null $record_play_own_voice When a participant joins by telephone, whether recording and playing the participant's own voice is enabled.
     *
     * @return self
     */
    public function setRecordPlayOwnVoice($record_play_own_voice)
    {
        $this->container['record_play_own_voice'] = $record_play_own_voice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


