<?php
/**
 * TheParticipantQOSSummaryDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * TheParticipantQOSSummaryDetails Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TheParticipantQOSSummaryDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'The_Participant_QOS_Summary_details_';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'min_bitrate' => 'string',
        'avg_bitrate' => 'string',
        'max_bitrate' => 'string',
        'min_latency' => 'string',
        'avg_latency' => 'string',
        'max_latency' => 'string',
        'min_jitter' => 'string',
        'avg_jitter' => 'string',
        'max_jitter' => 'string',
        'min_loss' => 'string',
        'avg_loss' => 'string',
        'max_loss' => 'string',
        'resolution' => 'string',
        'min_frame_rate' => 'string',
        'avg_frame_rate' => 'string',
        'max_frame_rate' => 'string',
        'zoom_min_cpu_usage' => 'string',
        'zoom_avg_cpu_usage' => 'string',
        'zoom_max_cpu_usage' => 'string',
        'system_max_cpu_usage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'min_bitrate' => null,
        'avg_bitrate' => null,
        'max_bitrate' => null,
        'min_latency' => null,
        'avg_latency' => null,
        'max_latency' => null,
        'min_jitter' => null,
        'avg_jitter' => null,
        'max_jitter' => null,
        'min_loss' => null,
        'avg_loss' => null,
        'max_loss' => null,
        'resolution' => null,
        'min_frame_rate' => null,
        'avg_frame_rate' => null,
        'max_frame_rate' => null,
        'zoom_min_cpu_usage' => null,
        'zoom_avg_cpu_usage' => null,
        'zoom_max_cpu_usage' => null,
        'system_max_cpu_usage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'min_bitrate' => 'min_bitrate',
        'avg_bitrate' => 'avg_bitrate',
        'max_bitrate' => 'max_bitrate',
        'min_latency' => 'min_latency',
        'avg_latency' => 'avg_latency',
        'max_latency' => 'max_latency',
        'min_jitter' => 'min_jitter',
        'avg_jitter' => 'avg_jitter',
        'max_jitter' => 'max_jitter',
        'min_loss' => 'min_loss',
        'avg_loss' => 'avg_loss',
        'max_loss' => 'max_loss',
        'resolution' => 'resolution',
        'min_frame_rate' => 'min_frame_rate',
        'avg_frame_rate' => 'avg_frame_rate',
        'max_frame_rate' => 'max_frame_rate',
        'zoom_min_cpu_usage' => 'zoom_min_cpu_usage',
        'zoom_avg_cpu_usage' => 'zoom_avg_cpu_usage',
        'zoom_max_cpu_usage' => 'zoom_max_cpu_usage',
        'system_max_cpu_usage' => 'system_max_cpu_usage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'min_bitrate' => 'setMinBitrate',
        'avg_bitrate' => 'setAvgBitrate',
        'max_bitrate' => 'setMaxBitrate',
        'min_latency' => 'setMinLatency',
        'avg_latency' => 'setAvgLatency',
        'max_latency' => 'setMaxLatency',
        'min_jitter' => 'setMinJitter',
        'avg_jitter' => 'setAvgJitter',
        'max_jitter' => 'setMaxJitter',
        'min_loss' => 'setMinLoss',
        'avg_loss' => 'setAvgLoss',
        'max_loss' => 'setMaxLoss',
        'resolution' => 'setResolution',
        'min_frame_rate' => 'setMinFrameRate',
        'avg_frame_rate' => 'setAvgFrameRate',
        'max_frame_rate' => 'setMaxFrameRate',
        'zoom_min_cpu_usage' => 'setZoomMinCpuUsage',
        'zoom_avg_cpu_usage' => 'setZoomAvgCpuUsage',
        'zoom_max_cpu_usage' => 'setZoomMaxCpuUsage',
        'system_max_cpu_usage' => 'setSystemMaxCpuUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'min_bitrate' => 'getMinBitrate',
        'avg_bitrate' => 'getAvgBitrate',
        'max_bitrate' => 'getMaxBitrate',
        'min_latency' => 'getMinLatency',
        'avg_latency' => 'getAvgLatency',
        'max_latency' => 'getMaxLatency',
        'min_jitter' => 'getMinJitter',
        'avg_jitter' => 'getAvgJitter',
        'max_jitter' => 'getMaxJitter',
        'min_loss' => 'getMinLoss',
        'avg_loss' => 'getAvgLoss',
        'max_loss' => 'getMaxLoss',
        'resolution' => 'getResolution',
        'min_frame_rate' => 'getMinFrameRate',
        'avg_frame_rate' => 'getAvgFrameRate',
        'max_frame_rate' => 'getMaxFrameRate',
        'zoom_min_cpu_usage' => 'getZoomMinCpuUsage',
        'zoom_avg_cpu_usage' => 'getZoomAvgCpuUsage',
        'zoom_max_cpu_usage' => 'getZoomMaxCpuUsage',
        'system_max_cpu_usage' => 'getSystemMaxCpuUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['min_bitrate'] = $data['min_bitrate'] ?? null;
        $this->container['avg_bitrate'] = $data['avg_bitrate'] ?? null;
        $this->container['max_bitrate'] = $data['max_bitrate'] ?? null;
        $this->container['min_latency'] = $data['min_latency'] ?? null;
        $this->container['avg_latency'] = $data['avg_latency'] ?? null;
        $this->container['max_latency'] = $data['max_latency'] ?? null;
        $this->container['min_jitter'] = $data['min_jitter'] ?? null;
        $this->container['avg_jitter'] = $data['avg_jitter'] ?? null;
        $this->container['max_jitter'] = $data['max_jitter'] ?? null;
        $this->container['min_loss'] = $data['min_loss'] ?? null;
        $this->container['avg_loss'] = $data['avg_loss'] ?? null;
        $this->container['max_loss'] = $data['max_loss'] ?? null;
        $this->container['resolution'] = $data['resolution'] ?? null;
        $this->container['min_frame_rate'] = $data['min_frame_rate'] ?? null;
        $this->container['avg_frame_rate'] = $data['avg_frame_rate'] ?? null;
        $this->container['max_frame_rate'] = $data['max_frame_rate'] ?? null;
        $this->container['zoom_min_cpu_usage'] = $data['zoom_min_cpu_usage'] ?? null;
        $this->container['zoom_avg_cpu_usage'] = $data['zoom_avg_cpu_usage'] ?? null;
        $this->container['zoom_max_cpu_usage'] = $data['zoom_max_cpu_usage'] ?? null;
        $this->container['system_max_cpu_usage'] = $data['system_max_cpu_usage'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets min_bitrate
     *
     * @return string|null
     */
    public function getMinBitrate()
    {
        return $this->container['min_bitrate'];
    }

    /**
     * Sets min_bitrate
     *
     * @param string|null $min_bitrate The minimum amount of bitrate, in kbps.
     *
     * @return self
     */
    public function setMinBitrate($min_bitrate)
    {
        $this->container['min_bitrate'] = $min_bitrate;

        return $this;
    }

    /**
     * Gets avg_bitrate
     *
     * @return string|null
     */
    public function getAvgBitrate()
    {
        return $this->container['avg_bitrate'];
    }

    /**
     * Sets avg_bitrate
     *
     * @param string|null $avg_bitrate The average amount of bitrate, in kbps.
     *
     * @return self
     */
    public function setAvgBitrate($avg_bitrate)
    {
        $this->container['avg_bitrate'] = $avg_bitrate;

        return $this;
    }

    /**
     * Gets max_bitrate
     *
     * @return string|null
     */
    public function getMaxBitrate()
    {
        return $this->container['max_bitrate'];
    }

    /**
     * Sets max_bitrate
     *
     * @param string|null $max_bitrate The maximum amount of bitrate, in kbps.
     *
     * @return self
     */
    public function setMaxBitrate($max_bitrate)
    {
        $this->container['max_bitrate'] = $max_bitrate;

        return $this;
    }

    /**
     * Gets min_latency
     *
     * @return string|null
     */
    public function getMinLatency()
    {
        return $this->container['min_latency'];
    }

    /**
     * Sets min_latency
     *
     * @param string|null $min_latency The minimum amount of latency, in milliseconds.
     *
     * @return self
     */
    public function setMinLatency($min_latency)
    {
        $this->container['min_latency'] = $min_latency;

        return $this;
    }

    /**
     * Gets avg_latency
     *
     * @return string|null
     */
    public function getAvgLatency()
    {
        return $this->container['avg_latency'];
    }

    /**
     * Sets avg_latency
     *
     * @param string|null $avg_latency The average amount of latency, in milliseconds.
     *
     * @return self
     */
    public function setAvgLatency($avg_latency)
    {
        $this->container['avg_latency'] = $avg_latency;

        return $this;
    }

    /**
     * Gets max_latency
     *
     * @return string|null
     */
    public function getMaxLatency()
    {
        return $this->container['max_latency'];
    }

    /**
     * Sets max_latency
     *
     * @param string|null $max_latency The maximum amount of latency, in milliseconds.
     *
     * @return self
     */
    public function setMaxLatency($max_latency)
    {
        $this->container['max_latency'] = $max_latency;

        return $this;
    }

    /**
     * Gets min_jitter
     *
     * @return string|null
     */
    public function getMinJitter()
    {
        return $this->container['min_jitter'];
    }

    /**
     * Sets min_jitter
     *
     * @param string|null $min_jitter The minimum amount of jitter, in milliseconds.
     *
     * @return self
     */
    public function setMinJitter($min_jitter)
    {
        $this->container['min_jitter'] = $min_jitter;

        return $this;
    }

    /**
     * Gets avg_jitter
     *
     * @return string|null
     */
    public function getAvgJitter()
    {
        return $this->container['avg_jitter'];
    }

    /**
     * Sets avg_jitter
     *
     * @param string|null $avg_jitter The average amount of jitter, in milliseconds.
     *
     * @return self
     */
    public function setAvgJitter($avg_jitter)
    {
        $this->container['avg_jitter'] = $avg_jitter;

        return $this;
    }

    /**
     * Gets max_jitter
     *
     * @return string|null
     */
    public function getMaxJitter()
    {
        return $this->container['max_jitter'];
    }

    /**
     * Sets max_jitter
     *
     * @param string|null $max_jitter The maximum amount of jitter, in milliseconds.
     *
     * @return self
     */
    public function setMaxJitter($max_jitter)
    {
        $this->container['max_jitter'] = $max_jitter;

        return $this;
    }

    /**
     * Gets min_loss
     *
     * @return string|null
     */
    public function getMinLoss()
    {
        return $this->container['min_loss'];
    }

    /**
     * Sets min_loss
     *
     * @param string|null $min_loss The minimum amount of packet loss.
     *
     * @return self
     */
    public function setMinLoss($min_loss)
    {
        $this->container['min_loss'] = $min_loss;

        return $this;
    }

    /**
     * Gets avg_loss
     *
     * @return string|null
     */
    public function getAvgLoss()
    {
        return $this->container['avg_loss'];
    }

    /**
     * Sets avg_loss
     *
     * @param string|null $avg_loss The average amount of packet loss.
     *
     * @return self
     */
    public function setAvgLoss($avg_loss)
    {
        $this->container['avg_loss'] = $avg_loss;

        return $this;
    }

    /**
     * Gets max_loss
     *
     * @return string|null
     */
    public function getMaxLoss()
    {
        return $this->container['max_loss'];
    }

    /**
     * Sets max_loss
     *
     * @param string|null $max_loss The maximum amount of packet loss.
     *
     * @return self
     */
    public function setMaxLoss($max_loss)
    {
        $this->container['max_loss'] = $max_loss;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return string|null
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param string|null $resolution The number of pixels in each dimension that the video camera can display.
     *
     * @return self
     */
    public function setResolution($resolution)
    {
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets min_frame_rate
     *
     * @return string|null
     */
    public function getMinFrameRate()
    {
        return $this->container['min_frame_rate'];
    }

    /**
     * Sets min_frame_rate
     *
     * @param string|null $min_frame_rate The minimum amount of frame rate, in frames per second (fps).
     *
     * @return self
     */
    public function setMinFrameRate($min_frame_rate)
    {
        $this->container['min_frame_rate'] = $min_frame_rate;

        return $this;
    }

    /**
     * Gets avg_frame_rate
     *
     * @return string|null
     */
    public function getAvgFrameRate()
    {
        return $this->container['avg_frame_rate'];
    }

    /**
     * Sets avg_frame_rate
     *
     * @param string|null $avg_frame_rate The average amount of frame rate, in fps.
     *
     * @return self
     */
    public function setAvgFrameRate($avg_frame_rate)
    {
        $this->container['avg_frame_rate'] = $avg_frame_rate;

        return $this;
    }

    /**
     * Gets max_frame_rate
     *
     * @return string|null
     */
    public function getMaxFrameRate()
    {
        return $this->container['max_frame_rate'];
    }

    /**
     * Sets max_frame_rate
     *
     * @param string|null $max_frame_rate The maximum amount of frame rate, in fps.
     *
     * @return self
     */
    public function setMaxFrameRate($max_frame_rate)
    {
        $this->container['max_frame_rate'] = $max_frame_rate;

        return $this;
    }

    /**
     * Gets zoom_min_cpu_usage
     *
     * @return string|null
     */
    public function getZoomMinCpuUsage()
    {
        return $this->container['zoom_min_cpu_usage'];
    }

    /**
     * Sets zoom_min_cpu_usage
     *
     * @param string|null $zoom_min_cpu_usage Zoom's minimum CPU usage.
     *
     * @return self
     */
    public function setZoomMinCpuUsage($zoom_min_cpu_usage)
    {
        $this->container['zoom_min_cpu_usage'] = $zoom_min_cpu_usage;

        return $this;
    }

    /**
     * Gets zoom_avg_cpu_usage
     *
     * @return string|null
     */
    public function getZoomAvgCpuUsage()
    {
        return $this->container['zoom_avg_cpu_usage'];
    }

    /**
     * Sets zoom_avg_cpu_usage
     *
     * @param string|null $zoom_avg_cpu_usage Zoom's average CPU usage.
     *
     * @return self
     */
    public function setZoomAvgCpuUsage($zoom_avg_cpu_usage)
    {
        $this->container['zoom_avg_cpu_usage'] = $zoom_avg_cpu_usage;

        return $this;
    }

    /**
     * Gets zoom_max_cpu_usage
     *
     * @return string|null
     */
    public function getZoomMaxCpuUsage()
    {
        return $this->container['zoom_max_cpu_usage'];
    }

    /**
     * Sets zoom_max_cpu_usage
     *
     * @param string|null $zoom_max_cpu_usage Zoom's maximum CPU usage.
     *
     * @return self
     */
    public function setZoomMaxCpuUsage($zoom_max_cpu_usage)
    {
        $this->container['zoom_max_cpu_usage'] = $zoom_max_cpu_usage;

        return $this;
    }

    /**
     * Gets system_max_cpu_usage
     *
     * @return string|null
     */
    public function getSystemMaxCpuUsage()
    {
        return $this->container['system_max_cpu_usage'];
    }

    /**
     * Sets system_max_cpu_usage
     *
     * @param string|null $system_max_cpu_usage The system's maximum CPU usage.
     *
     * @return self
     */
    public function setSystemMaxCpuUsage($system_max_cpu_usage)
    {
        $this->container['system_max_cpu_usage'] = $system_max_cpu_usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


