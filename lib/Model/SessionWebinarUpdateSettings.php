<?php
/**
 * SessionWebinarUpdateSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * SessionWebinarUpdateSettings Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SessionWebinarUpdateSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SessionWebinarUpdate_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_multiple_devices' => 'bool',
        'alternative_hosts' => 'string',
        'alternative_host_update_polls' => 'bool',
        'approval_type' => 'int',
        'attendees_and_panelists_reminder_email_notification' => '\Zoom\Api\Model\CreateWebinarSettingsAttendeesAndPanelistsReminderEmailNotification',
        'audio' => 'string',
        'authentication_domains' => 'string',
        'authentication_name' => 'string',
        'authentication_option' => 'string',
        'auto_recording' => 'string',
        'close_registration' => 'bool',
        'contact_email' => 'string',
        'contact_name' => 'string',
        'email_language' => 'string',
        'enforce_login' => 'bool',
        'enforce_login_domains' => 'string',
        'follow_up_absentees_email_notification' => '\Zoom\Api\Model\CreateWebinarSettingsFollowUpAbsenteesEmailNotification',
        'follow_up_attendees_email_notification' => '\Zoom\Api\Model\CreateWebinarSettingsFollowUpAttendeesEmailNotification',
        'global_dial_in_countries' => 'string[]',
        'hd_video' => 'bool',
        'hd_video_for_attendees' => 'bool',
        'host_video' => 'bool',
        'language_interpretation' => '\Zoom\Api\Model\CreateWebinarSettingsLanguageInterpretation',
        'panelist_authentication' => 'bool',
        'meeting_authentication' => 'bool',
        'add_watermark' => 'bool',
        'add_audio_watermark' => 'bool',
        'notify_registrants' => 'bool',
        'on_demand' => 'bool',
        'panelists_invitation_email_notification' => 'bool',
        'panelists_video' => 'bool',
        'post_webinar_survey' => 'bool',
        'practice_session' => 'bool',
        'question_and_answer' => '\Zoom\Api\Model\CreateWebinarSettingsQuestionAndAnswer',
        'registrants_confirmation_email' => 'bool',
        'registrants_email_notification' => 'bool',
        'registrants_restrict_number' => 'int',
        'registration_type' => 'int',
        'send_1080p_video_to_attendees' => 'bool',
        'show_share_button' => 'bool',
        'survey_url' => 'string',
        'enable_session_branding' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_multiple_devices' => null,
        'alternative_hosts' => null,
        'alternative_host_update_polls' => null,
        'approval_type' => null,
        'attendees_and_panelists_reminder_email_notification' => null,
        'audio' => null,
        'authentication_domains' => null,
        'authentication_name' => null,
        'authentication_option' => null,
        'auto_recording' => null,
        'close_registration' => null,
        'contact_email' => null,
        'contact_name' => null,
        'email_language' => null,
        'enforce_login' => null,
        'enforce_login_domains' => null,
        'follow_up_absentees_email_notification' => null,
        'follow_up_attendees_email_notification' => null,
        'global_dial_in_countries' => null,
        'hd_video' => null,
        'hd_video_for_attendees' => null,
        'host_video' => null,
        'language_interpretation' => null,
        'panelist_authentication' => null,
        'meeting_authentication' => null,
        'add_watermark' => null,
        'add_audio_watermark' => null,
        'notify_registrants' => null,
        'on_demand' => null,
        'panelists_invitation_email_notification' => null,
        'panelists_video' => null,
        'post_webinar_survey' => null,
        'practice_session' => null,
        'question_and_answer' => null,
        'registrants_confirmation_email' => null,
        'registrants_email_notification' => null,
        'registrants_restrict_number' => null,
        'registration_type' => null,
        'send_1080p_video_to_attendees' => null,
        'show_share_button' => null,
        'survey_url' => null,
        'enable_session_branding' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_multiple_devices' => 'allow_multiple_devices',
        'alternative_hosts' => 'alternative_hosts',
        'alternative_host_update_polls' => 'alternative_host_update_polls',
        'approval_type' => 'approval_type',
        'attendees_and_panelists_reminder_email_notification' => 'attendees_and_panelists_reminder_email_notification',
        'audio' => 'audio',
        'authentication_domains' => 'authentication_domains',
        'authentication_name' => 'authentication_name',
        'authentication_option' => 'authentication_option',
        'auto_recording' => 'auto_recording',
        'close_registration' => 'close_registration',
        'contact_email' => 'contact_email',
        'contact_name' => 'contact_name',
        'email_language' => 'email_language',
        'enforce_login' => 'enforce_login',
        'enforce_login_domains' => 'enforce_login_domains',
        'follow_up_absentees_email_notification' => 'follow_up_absentees_email_notification',
        'follow_up_attendees_email_notification' => 'follow_up_attendees_email_notification',
        'global_dial_in_countries' => 'global_dial_in_countries',
        'hd_video' => 'hd_video',
        'hd_video_for_attendees' => 'hd_video_for_attendees',
        'host_video' => 'host_video',
        'language_interpretation' => 'language_interpretation',
        'panelist_authentication' => 'panelist_authentication',
        'meeting_authentication' => 'meeting_authentication',
        'add_watermark' => 'add_watermark',
        'add_audio_watermark' => 'add_audio_watermark',
        'notify_registrants' => 'notify_registrants',
        'on_demand' => 'on_demand',
        'panelists_invitation_email_notification' => 'panelists_invitation_email_notification',
        'panelists_video' => 'panelists_video',
        'post_webinar_survey' => 'post_webinar_survey',
        'practice_session' => 'practice_session',
        'question_and_answer' => 'question_and_answer',
        'registrants_confirmation_email' => 'registrants_confirmation_email',
        'registrants_email_notification' => 'registrants_email_notification',
        'registrants_restrict_number' => 'registrants_restrict_number',
        'registration_type' => 'registration_type',
        'send_1080p_video_to_attendees' => 'send_1080p_video_to_attendees',
        'show_share_button' => 'show_share_button',
        'survey_url' => 'survey_url',
        'enable_session_branding' => 'enable_session_branding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_multiple_devices' => 'setAllowMultipleDevices',
        'alternative_hosts' => 'setAlternativeHosts',
        'alternative_host_update_polls' => 'setAlternativeHostUpdatePolls',
        'approval_type' => 'setApprovalType',
        'attendees_and_panelists_reminder_email_notification' => 'setAttendeesAndPanelistsReminderEmailNotification',
        'audio' => 'setAudio',
        'authentication_domains' => 'setAuthenticationDomains',
        'authentication_name' => 'setAuthenticationName',
        'authentication_option' => 'setAuthenticationOption',
        'auto_recording' => 'setAutoRecording',
        'close_registration' => 'setCloseRegistration',
        'contact_email' => 'setContactEmail',
        'contact_name' => 'setContactName',
        'email_language' => 'setEmailLanguage',
        'enforce_login' => 'setEnforceLogin',
        'enforce_login_domains' => 'setEnforceLoginDomains',
        'follow_up_absentees_email_notification' => 'setFollowUpAbsenteesEmailNotification',
        'follow_up_attendees_email_notification' => 'setFollowUpAttendeesEmailNotification',
        'global_dial_in_countries' => 'setGlobalDialInCountries',
        'hd_video' => 'setHdVideo',
        'hd_video_for_attendees' => 'setHdVideoForAttendees',
        'host_video' => 'setHostVideo',
        'language_interpretation' => 'setLanguageInterpretation',
        'panelist_authentication' => 'setPanelistAuthentication',
        'meeting_authentication' => 'setMeetingAuthentication',
        'add_watermark' => 'setAddWatermark',
        'add_audio_watermark' => 'setAddAudioWatermark',
        'notify_registrants' => 'setNotifyRegistrants',
        'on_demand' => 'setOnDemand',
        'panelists_invitation_email_notification' => 'setPanelistsInvitationEmailNotification',
        'panelists_video' => 'setPanelistsVideo',
        'post_webinar_survey' => 'setPostWebinarSurvey',
        'practice_session' => 'setPracticeSession',
        'question_and_answer' => 'setQuestionAndAnswer',
        'registrants_confirmation_email' => 'setRegistrantsConfirmationEmail',
        'registrants_email_notification' => 'setRegistrantsEmailNotification',
        'registrants_restrict_number' => 'setRegistrantsRestrictNumber',
        'registration_type' => 'setRegistrationType',
        'send_1080p_video_to_attendees' => 'setSend1080pVideoToAttendees',
        'show_share_button' => 'setShowShareButton',
        'survey_url' => 'setSurveyUrl',
        'enable_session_branding' => 'setEnableSessionBranding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_multiple_devices' => 'getAllowMultipleDevices',
        'alternative_hosts' => 'getAlternativeHosts',
        'alternative_host_update_polls' => 'getAlternativeHostUpdatePolls',
        'approval_type' => 'getApprovalType',
        'attendees_and_panelists_reminder_email_notification' => 'getAttendeesAndPanelistsReminderEmailNotification',
        'audio' => 'getAudio',
        'authentication_domains' => 'getAuthenticationDomains',
        'authentication_name' => 'getAuthenticationName',
        'authentication_option' => 'getAuthenticationOption',
        'auto_recording' => 'getAutoRecording',
        'close_registration' => 'getCloseRegistration',
        'contact_email' => 'getContactEmail',
        'contact_name' => 'getContactName',
        'email_language' => 'getEmailLanguage',
        'enforce_login' => 'getEnforceLogin',
        'enforce_login_domains' => 'getEnforceLoginDomains',
        'follow_up_absentees_email_notification' => 'getFollowUpAbsenteesEmailNotification',
        'follow_up_attendees_email_notification' => 'getFollowUpAttendeesEmailNotification',
        'global_dial_in_countries' => 'getGlobalDialInCountries',
        'hd_video' => 'getHdVideo',
        'hd_video_for_attendees' => 'getHdVideoForAttendees',
        'host_video' => 'getHostVideo',
        'language_interpretation' => 'getLanguageInterpretation',
        'panelist_authentication' => 'getPanelistAuthentication',
        'meeting_authentication' => 'getMeetingAuthentication',
        'add_watermark' => 'getAddWatermark',
        'add_audio_watermark' => 'getAddAudioWatermark',
        'notify_registrants' => 'getNotifyRegistrants',
        'on_demand' => 'getOnDemand',
        'panelists_invitation_email_notification' => 'getPanelistsInvitationEmailNotification',
        'panelists_video' => 'getPanelistsVideo',
        'post_webinar_survey' => 'getPostWebinarSurvey',
        'practice_session' => 'getPracticeSession',
        'question_and_answer' => 'getQuestionAndAnswer',
        'registrants_confirmation_email' => 'getRegistrantsConfirmationEmail',
        'registrants_email_notification' => 'getRegistrantsEmailNotification',
        'registrants_restrict_number' => 'getRegistrantsRestrictNumber',
        'registration_type' => 'getRegistrationType',
        'send_1080p_video_to_attendees' => 'getSend1080pVideoToAttendees',
        'show_share_button' => 'getShowShareButton',
        'survey_url' => 'getSurveyUrl',
        'enable_session_branding' => 'getEnableSessionBranding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const APPROVAL_TYPE_0 = 0;
    public const APPROVAL_TYPE_1 = 1;
    public const APPROVAL_TYPE_2 = 2;
    public const AUDIO_BOTH = 'both';
    public const AUDIO_TELEPHONY = 'telephony';
    public const AUDIO_VOIP = 'voip';
    public const AUTO_RECORDING_LOCAL = 'local';
    public const AUTO_RECORDING_CLOUD = 'cloud';
    public const AUTO_RECORDING_NONE = 'none';
    public const REGISTRATION_TYPE_1 = 1;
    public const REGISTRATION_TYPE_2 = 2;
    public const REGISTRATION_TYPE_3 = 3;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApprovalTypeAllowableValues()
    {
        return [
            self::APPROVAL_TYPE_0,
            self::APPROVAL_TYPE_1,
            self::APPROVAL_TYPE_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAudioAllowableValues()
    {
        return [
            self::AUDIO_BOTH,
            self::AUDIO_TELEPHONY,
            self::AUDIO_VOIP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoRecordingAllowableValues()
    {
        return [
            self::AUTO_RECORDING_LOCAL,
            self::AUTO_RECORDING_CLOUD,
            self::AUTO_RECORDING_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegistrationTypeAllowableValues()
    {
        return [
            self::REGISTRATION_TYPE_1,
            self::REGISTRATION_TYPE_2,
            self::REGISTRATION_TYPE_3,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_multiple_devices'] = $data['allow_multiple_devices'] ?? null;
        $this->container['alternative_hosts'] = $data['alternative_hosts'] ?? null;
        $this->container['alternative_host_update_polls'] = $data['alternative_host_update_polls'] ?? null;
        $this->container['approval_type'] = $data['approval_type'] ?? self::APPROVAL_TYPE_2;
        $this->container['attendees_and_panelists_reminder_email_notification'] = $data['attendees_and_panelists_reminder_email_notification'] ?? null;
        $this->container['audio'] = $data['audio'] ?? 'both';
        $this->container['authentication_domains'] = $data['authentication_domains'] ?? null;
        $this->container['authentication_name'] = $data['authentication_name'] ?? null;
        $this->container['authentication_option'] = $data['authentication_option'] ?? null;
        $this->container['auto_recording'] = $data['auto_recording'] ?? 'none';
        $this->container['close_registration'] = $data['close_registration'] ?? null;
        $this->container['contact_email'] = $data['contact_email'] ?? null;
        $this->container['contact_name'] = $data['contact_name'] ?? null;
        $this->container['email_language'] = $data['email_language'] ?? null;
        $this->container['enforce_login'] = $data['enforce_login'] ?? null;
        $this->container['enforce_login_domains'] = $data['enforce_login_domains'] ?? null;
        $this->container['follow_up_absentees_email_notification'] = $data['follow_up_absentees_email_notification'] ?? null;
        $this->container['follow_up_attendees_email_notification'] = $data['follow_up_attendees_email_notification'] ?? null;
        $this->container['global_dial_in_countries'] = $data['global_dial_in_countries'] ?? null;
        $this->container['hd_video'] = $data['hd_video'] ?? false;
        $this->container['hd_video_for_attendees'] = $data['hd_video_for_attendees'] ?? false;
        $this->container['host_video'] = $data['host_video'] ?? null;
        $this->container['language_interpretation'] = $data['language_interpretation'] ?? null;
        $this->container['panelist_authentication'] = $data['panelist_authentication'] ?? null;
        $this->container['meeting_authentication'] = $data['meeting_authentication'] ?? null;
        $this->container['add_watermark'] = $data['add_watermark'] ?? null;
        $this->container['add_audio_watermark'] = $data['add_audio_watermark'] ?? null;
        $this->container['notify_registrants'] = $data['notify_registrants'] ?? null;
        $this->container['on_demand'] = $data['on_demand'] ?? false;
        $this->container['panelists_invitation_email_notification'] = $data['panelists_invitation_email_notification'] ?? null;
        $this->container['panelists_video'] = $data['panelists_video'] ?? null;
        $this->container['post_webinar_survey'] = $data['post_webinar_survey'] ?? null;
        $this->container['practice_session'] = $data['practice_session'] ?? false;
        $this->container['question_and_answer'] = $data['question_and_answer'] ?? null;
        $this->container['registrants_confirmation_email'] = $data['registrants_confirmation_email'] ?? null;
        $this->container['registrants_email_notification'] = $data['registrants_email_notification'] ?? null;
        $this->container['registrants_restrict_number'] = $data['registrants_restrict_number'] ?? 0;
        $this->container['registration_type'] = $data['registration_type'] ?? self::REGISTRATION_TYPE_1;
        $this->container['send_1080p_video_to_attendees'] = $data['send_1080p_video_to_attendees'] ?? false;
        $this->container['show_share_button'] = $data['show_share_button'] ?? null;
        $this->container['survey_url'] = $data['survey_url'] ?? null;
        $this->container['enable_session_branding'] = $data['enable_session_branding'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getApprovalTypeAllowableValues();
        if (!is_null($this->container['approval_type']) && !in_array($this->container['approval_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'approval_type', must be one of '%s'",
                $this->container['approval_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAudioAllowableValues();
        if (!is_null($this->container['audio']) && !in_array($this->container['audio'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'audio', must be one of '%s'",
                $this->container['audio'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoRecordingAllowableValues();
        if (!is_null($this->container['auto_recording']) && !in_array($this->container['auto_recording'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_recording', must be one of '%s'",
                $this->container['auto_recording'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['registrants_restrict_number']) && ($this->container['registrants_restrict_number'] > 20000)) {
            $invalidProperties[] = "invalid value for 'registrants_restrict_number', must be smaller than or equal to 20000.";
        }

        if (!is_null($this->container['registrants_restrict_number']) && ($this->container['registrants_restrict_number'] < 0)) {
            $invalidProperties[] = "invalid value for 'registrants_restrict_number', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getRegistrationTypeAllowableValues();
        if (!is_null($this->container['registration_type']) && !in_array($this->container['registration_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'registration_type', must be one of '%s'",
                $this->container['registration_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_multiple_devices
     *
     * @return bool|null
     */
    public function getAllowMultipleDevices()
    {
        return $this->container['allow_multiple_devices'];
    }

    /**
     * Sets allow_multiple_devices
     *
     * @param bool|null $allow_multiple_devices Allow attendees to join from multiple devices.
     *
     * @return self
     */
    public function setAllowMultipleDevices($allow_multiple_devices)
    {
        $this->container['allow_multiple_devices'] = $allow_multiple_devices;

        return $this;
    }

    /**
     * Gets alternative_hosts
     *
     * @return string|null
     */
    public function getAlternativeHosts()
    {
        return $this->container['alternative_hosts'];
    }

    /**
     * Sets alternative_hosts
     *
     * @param string|null $alternative_hosts Alternative host emails or IDs. Multiple values separated by comma.
     *
     * @return self
     */
    public function setAlternativeHosts($alternative_hosts)
    {
        $this->container['alternative_hosts'] = $alternative_hosts;

        return $this;
    }

    /**
     * Gets alternative_host_update_polls
     *
     * @return bool|null
     */
    public function getAlternativeHostUpdatePolls()
    {
        return $this->container['alternative_host_update_polls'];
    }

    /**
     * Sets alternative_host_update_polls
     *
     * @param bool|null $alternative_host_update_polls Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
     *
     * @return self
     */
    public function setAlternativeHostUpdatePolls($alternative_host_update_polls)
    {
        $this->container['alternative_host_update_polls'] = $alternative_host_update_polls;

        return $this;
    }

    /**
     * Gets approval_type
     *
     * @return int|null
     */
    public function getApprovalType()
    {
        return $this->container['approval_type'];
    }

    /**
     * Sets approval_type
     *
     * @param int|null $approval_type `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
     *
     * @return self
     */
    public function setApprovalType($approval_type)
    {
        $allowedValues = $this->getApprovalTypeAllowableValues();
        if (!is_null($approval_type) && !in_array($approval_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'approval_type', must be one of '%s'",
                    $approval_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['approval_type'] = $approval_type;

        return $this;
    }

    /**
     * Gets attendees_and_panelists_reminder_email_notification
     *
     * @return \Zoom\Api\Model\CreateWebinarSettingsAttendeesAndPanelistsReminderEmailNotification|null
     */
    public function getAttendeesAndPanelistsReminderEmailNotification()
    {
        return $this->container['attendees_and_panelists_reminder_email_notification'];
    }

    /**
     * Sets attendees_and_panelists_reminder_email_notification
     *
     * @param \Zoom\Api\Model\CreateWebinarSettingsAttendeesAndPanelistsReminderEmailNotification|null $attendees_and_panelists_reminder_email_notification attendees_and_panelists_reminder_email_notification
     *
     * @return self
     */
    public function setAttendeesAndPanelistsReminderEmailNotification($attendees_and_panelists_reminder_email_notification)
    {
        $this->container['attendees_and_panelists_reminder_email_notification'] = $attendees_and_panelists_reminder_email_notification;

        return $this;
    }

    /**
     * Gets audio
     *
     * @return string|null
     */
    public function getAudio()
    {
        return $this->container['audio'];
    }

    /**
     * Sets audio
     *
     * @param string|null $audio Determine how participants can join the audio portion of the webinar.
     *
     * @return self
     */
    public function setAudio($audio)
    {
        $allowedValues = $this->getAudioAllowableValues();
        if (!is_null($audio) && !in_array($audio, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'audio', must be one of '%s'",
                    $audio,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['audio'] = $audio;

        return $this;
    }

    /**
     * Gets authentication_domains
     *
     * @return string|null
     */
    public function getAuthenticationDomains()
    {
        return $this->container['authentication_domains'];
    }

    /**
     * Sets authentication_domains
     *
     * @param string|null $authentication_domains If user has configured [\"Sign Into Zoom with Specified Domains\"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
     *
     * @return self
     */
    public function setAuthenticationDomains($authentication_domains)
    {
        $this->container['authentication_domains'] = $authentication_domains;

        return $this;
    }

    /**
     * Gets authentication_name
     *
     * @return string|null
     */
    public function getAuthenticationName()
    {
        return $this->container['authentication_name'];
    }

    /**
     * Sets authentication_name
     *
     * @param string|null $authentication_name Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
     *
     * @return self
     */
    public function setAuthenticationName($authentication_name)
    {
        $this->container['authentication_name'] = $authentication_name;

        return $this;
    }

    /**
     * Gets authentication_option
     *
     * @return string|null
     */
    public function getAuthenticationOption()
    {
        return $this->container['authentication_option'];
    }

    /**
     * Sets authentication_option
     *
     * @param string|null $authentication_option Webinar authentication option id.
     *
     * @return self
     */
    public function setAuthenticationOption($authentication_option)
    {
        $this->container['authentication_option'] = $authentication_option;

        return $this;
    }

    /**
     * Gets auto_recording
     *
     * @return string|null
     */
    public function getAutoRecording()
    {
        return $this->container['auto_recording'];
    }

    /**
     * Sets auto_recording
     *
     * @param string|null $auto_recording Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
     *
     * @return self
     */
    public function setAutoRecording($auto_recording)
    {
        $allowedValues = $this->getAutoRecordingAllowableValues();
        if (!is_null($auto_recording) && !in_array($auto_recording, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_recording', must be one of '%s'",
                    $auto_recording,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_recording'] = $auto_recording;

        return $this;
    }

    /**
     * Gets close_registration
     *
     * @return bool|null
     */
    public function getCloseRegistration()
    {
        return $this->container['close_registration'];
    }

    /**
     * Sets close_registration
     *
     * @param bool|null $close_registration Close registration after event date.
     *
     * @return self
     */
    public function setCloseRegistration($close_registration)
    {
        $this->container['close_registration'] = $close_registration;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email Contact email for registration
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name Contact name for registration
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets email_language
     *
     * @return string|null
     */
    public function getEmailLanguage()
    {
        return $this->container['email_language'];
    }

    /**
     * Sets email_language
     *
     * @param string|null $email_language Set the email language to one of the following: `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
     *
     * @return self
     */
    public function setEmailLanguage($email_language)
    {
        $this->container['email_language'] = $email_language;

        return $this;
    }

    /**
     * Gets enforce_login
     *
     * @return bool|null
     * @deprecated
     */
    public function getEnforceLogin()
    {
        return $this->container['enforce_login'];
    }

    /**
     * Sets enforce_login
     *
     * @param bool|null $enforce_login Only signed in users can join this meeting.  **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the \"meeting_authentication\", \"authentication_option\" and \"authentication_domains\" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
     *
     * @return self
     * @deprecated
     */
    public function setEnforceLogin($enforce_login)
    {
        $this->container['enforce_login'] = $enforce_login;

        return $this;
    }

    /**
     * Gets enforce_login_domains
     *
     * @return string|null
     * @deprecated
     */
    public function getEnforceLoginDomains()
    {
        return $this->container['enforce_login_domains'];
    }

    /**
     * Sets enforce_login_domains
     *
     * @param string|null $enforce_login_domains Only signed in users with specified domains can join meetings.  **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the \"meeting_authentication\", \"authentication_option\" and \"authentication_domains\" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
     *
     * @return self
     * @deprecated
     */
    public function setEnforceLoginDomains($enforce_login_domains)
    {
        $this->container['enforce_login_domains'] = $enforce_login_domains;

        return $this;
    }

    /**
     * Gets follow_up_absentees_email_notification
     *
     * @return \Zoom\Api\Model\CreateWebinarSettingsFollowUpAbsenteesEmailNotification|null
     */
    public function getFollowUpAbsenteesEmailNotification()
    {
        return $this->container['follow_up_absentees_email_notification'];
    }

    /**
     * Sets follow_up_absentees_email_notification
     *
     * @param \Zoom\Api\Model\CreateWebinarSettingsFollowUpAbsenteesEmailNotification|null $follow_up_absentees_email_notification follow_up_absentees_email_notification
     *
     * @return self
     */
    public function setFollowUpAbsenteesEmailNotification($follow_up_absentees_email_notification)
    {
        $this->container['follow_up_absentees_email_notification'] = $follow_up_absentees_email_notification;

        return $this;
    }

    /**
     * Gets follow_up_attendees_email_notification
     *
     * @return \Zoom\Api\Model\CreateWebinarSettingsFollowUpAttendeesEmailNotification|null
     */
    public function getFollowUpAttendeesEmailNotification()
    {
        return $this->container['follow_up_attendees_email_notification'];
    }

    /**
     * Sets follow_up_attendees_email_notification
     *
     * @param \Zoom\Api\Model\CreateWebinarSettingsFollowUpAttendeesEmailNotification|null $follow_up_attendees_email_notification follow_up_attendees_email_notification
     *
     * @return self
     */
    public function setFollowUpAttendeesEmailNotification($follow_up_attendees_email_notification)
    {
        $this->container['follow_up_attendees_email_notification'] = $follow_up_attendees_email_notification;

        return $this;
    }

    /**
     * Gets global_dial_in_countries
     *
     * @return string[]|null
     */
    public function getGlobalDialInCountries()
    {
        return $this->container['global_dial_in_countries'];
    }

    /**
     * Sets global_dial_in_countries
     *
     * @param string[]|null $global_dial_in_countries List of global dial-in countries
     *
     * @return self
     */
    public function setGlobalDialInCountries($global_dial_in_countries)
    {
        $this->container['global_dial_in_countries'] = $global_dial_in_countries;

        return $this;
    }

    /**
     * Gets hd_video
     *
     * @return bool|null
     */
    public function getHdVideo()
    {
        return $this->container['hd_video'];
    }

    /**
     * Sets hd_video
     *
     * @param bool|null $hd_video Default to HD video.
     *
     * @return self
     */
    public function setHdVideo($hd_video)
    {
        $this->container['hd_video'] = $hd_video;

        return $this;
    }

    /**
     * Gets hd_video_for_attendees
     *
     * @return bool|null
     */
    public function getHdVideoForAttendees()
    {
        return $this->container['hd_video_for_attendees'];
    }

    /**
     * Sets hd_video_for_attendees
     *
     * @param bool|null $hd_video_for_attendees Whether HD video for attendees is enabled.
     *
     * @return self
     */
    public function setHdVideoForAttendees($hd_video_for_attendees)
    {
        $this->container['hd_video_for_attendees'] = $hd_video_for_attendees;

        return $this;
    }

    /**
     * Gets host_video
     *
     * @return bool|null
     */
    public function getHostVideo()
    {
        return $this->container['host_video'];
    }

    /**
     * Sets host_video
     *
     * @param bool|null $host_video Start video when host joins webinar.
     *
     * @return self
     */
    public function setHostVideo($host_video)
    {
        $this->container['host_video'] = $host_video;

        return $this;
    }

    /**
     * Gets language_interpretation
     *
     * @return \Zoom\Api\Model\CreateWebinarSettingsLanguageInterpretation|null
     */
    public function getLanguageInterpretation()
    {
        return $this->container['language_interpretation'];
    }

    /**
     * Sets language_interpretation
     *
     * @param \Zoom\Api\Model\CreateWebinarSettingsLanguageInterpretation|null $language_interpretation language_interpretation
     *
     * @return self
     */
    public function setLanguageInterpretation($language_interpretation)
    {
        $this->container['language_interpretation'] = $language_interpretation;

        return $this;
    }

    /**
     * Gets panelist_authentication
     *
     * @return bool|null
     */
    public function getPanelistAuthentication()
    {
        return $this->container['panelist_authentication'];
    }

    /**
     * Sets panelist_authentication
     *
     * @param bool|null $panelist_authentication Require panelists to authenticate to join
     *
     * @return self
     */
    public function setPanelistAuthentication($panelist_authentication)
    {
        $this->container['panelist_authentication'] = $panelist_authentication;

        return $this;
    }

    /**
     * Gets meeting_authentication
     *
     * @return bool|null
     */
    public function getMeetingAuthentication()
    {
        return $this->container['meeting_authentication'];
    }

    /**
     * Sets meeting_authentication
     *
     * @param bool|null $meeting_authentication Only authenticated users can join Webinar.
     *
     * @return self
     */
    public function setMeetingAuthentication($meeting_authentication)
    {
        $this->container['meeting_authentication'] = $meeting_authentication;

        return $this;
    }

    /**
     * Gets add_watermark
     *
     * @return bool|null
     */
    public function getAddWatermark()
    {
        return $this->container['add_watermark'];
    }

    /**
     * Sets add_watermark
     *
     * @param bool|null $add_watermark Add watermark that identifies the viewing participant.
     *
     * @return self
     */
    public function setAddWatermark($add_watermark)
    {
        $this->container['add_watermark'] = $add_watermark;

        return $this;
    }

    /**
     * Gets add_audio_watermark
     *
     * @return bool|null
     */
    public function getAddAudioWatermark()
    {
        return $this->container['add_audio_watermark'];
    }

    /**
     * Sets add_audio_watermark
     *
     * @param bool|null $add_audio_watermark Add audio watermark that identifies the participants.
     *
     * @return self
     */
    public function setAddAudioWatermark($add_audio_watermark)
    {
        $this->container['add_audio_watermark'] = $add_audio_watermark;

        return $this;
    }

    /**
     * Gets notify_registrants
     *
     * @return bool|null
     */
    public function getNotifyRegistrants()
    {
        return $this->container['notify_registrants'];
    }

    /**
     * Sets notify_registrants
     *
     * @param bool|null $notify_registrants Send notification email to registrants when the host updates a webinar.
     *
     * @return self
     */
    public function setNotifyRegistrants($notify_registrants)
    {
        $this->container['notify_registrants'] = $notify_registrants;

        return $this;
    }

    /**
     * Gets on_demand
     *
     * @return bool|null
     */
    public function getOnDemand()
    {
        return $this->container['on_demand'];
    }

    /**
     * Sets on_demand
     *
     * @param bool|null $on_demand Make the webinar on-demand
     *
     * @return self
     */
    public function setOnDemand($on_demand)
    {
        $this->container['on_demand'] = $on_demand;

        return $this;
    }

    /**
     * Gets panelists_invitation_email_notification
     *
     * @return bool|null
     */
    public function getPanelistsInvitationEmailNotification()
    {
        return $this->container['panelists_invitation_email_notification'];
    }

    /**
     * Sets panelists_invitation_email_notification
     *
     * @param bool|null $panelists_invitation_email_notification Send invitation email to panelists (If `false`, do not send invitation email to panelists).
     *
     * @return self
     */
    public function setPanelistsInvitationEmailNotification($panelists_invitation_email_notification)
    {
        $this->container['panelists_invitation_email_notification'] = $panelists_invitation_email_notification;

        return $this;
    }

    /**
     * Gets panelists_video
     *
     * @return bool|null
     */
    public function getPanelistsVideo()
    {
        return $this->container['panelists_video'];
    }

    /**
     * Sets panelists_video
     *
     * @param bool|null $panelists_video Start video when panelists join webinar.
     *
     * @return self
     */
    public function setPanelistsVideo($panelists_video)
    {
        $this->container['panelists_video'] = $panelists_video;

        return $this;
    }

    /**
     * Gets post_webinar_survey
     *
     * @return bool|null
     */
    public function getPostWebinarSurvey()
    {
        return $this->container['post_webinar_survey'];
    }

    /**
     * Sets post_webinar_survey
     *
     * @param bool|null $post_webinar_survey Zoom will open a survey page in attendees' browsers after leaving the webinar
     *
     * @return self
     */
    public function setPostWebinarSurvey($post_webinar_survey)
    {
        $this->container['post_webinar_survey'] = $post_webinar_survey;

        return $this;
    }

    /**
     * Gets practice_session
     *
     * @return bool|null
     */
    public function getPracticeSession()
    {
        return $this->container['practice_session'];
    }

    /**
     * Sets practice_session
     *
     * @param bool|null $practice_session Enable practice session.
     *
     * @return self
     */
    public function setPracticeSession($practice_session)
    {
        $this->container['practice_session'] = $practice_session;

        return $this;
    }

    /**
     * Gets question_and_answer
     *
     * @return \Zoom\Api\Model\CreateWebinarSettingsQuestionAndAnswer|null
     */
    public function getQuestionAndAnswer()
    {
        return $this->container['question_and_answer'];
    }

    /**
     * Sets question_and_answer
     *
     * @param \Zoom\Api\Model\CreateWebinarSettingsQuestionAndAnswer|null $question_and_answer question_and_answer
     *
     * @return self
     */
    public function setQuestionAndAnswer($question_and_answer)
    {
        $this->container['question_and_answer'] = $question_and_answer;

        return $this;
    }

    /**
     * Gets registrants_confirmation_email
     *
     * @return bool|null
     */
    public function getRegistrantsConfirmationEmail()
    {
        return $this->container['registrants_confirmation_email'];
    }

    /**
     * Sets registrants_confirmation_email
     *
     * @param bool|null $registrants_confirmation_email Send confirmation email to registrants.
     *
     * @return self
     */
    public function setRegistrantsConfirmationEmail($registrants_confirmation_email)
    {
        $this->container['registrants_confirmation_email'] = $registrants_confirmation_email;

        return $this;
    }

    /**
     * Gets registrants_email_notification
     *
     * @return bool|null
     */
    public function getRegistrantsEmailNotification()
    {
        return $this->container['registrants_email_notification'];
    }

    /**
     * Sets registrants_email_notification
     *
     * @param bool|null $registrants_email_notification Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
     *
     * @return self
     */
    public function setRegistrantsEmailNotification($registrants_email_notification)
    {
        $this->container['registrants_email_notification'] = $registrants_email_notification;

        return $this;
    }

    /**
     * Gets registrants_restrict_number
     *
     * @return int|null
     */
    public function getRegistrantsRestrictNumber()
    {
        return $this->container['registrants_restrict_number'];
    }

    /**
     * Sets registrants_restrict_number
     *
     * @param int|null $registrants_restrict_number Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
     *
     * @return self
     */
    public function setRegistrantsRestrictNumber($registrants_restrict_number)
    {

        if (!is_null($registrants_restrict_number) && ($registrants_restrict_number > 20000)) {
            throw new \InvalidArgumentException('invalid value for $registrants_restrict_number when calling SessionWebinarUpdateSettings., must be smaller than or equal to 20000.');
        }
        if (!is_null($registrants_restrict_number) && ($registrants_restrict_number < 0)) {
            throw new \InvalidArgumentException('invalid value for $registrants_restrict_number when calling SessionWebinarUpdateSettings., must be bigger than or equal to 0.');
        }

        $this->container['registrants_restrict_number'] = $registrants_restrict_number;

        return $this;
    }

    /**
     * Gets registration_type
     *
     * @return int|null
     */
    public function getRegistrationType()
    {
        return $this->container['registration_type'];
    }

    /**
     * Sets registration_type
     *
     * @param int|null $registration_type Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
     *
     * @return self
     */
    public function setRegistrationType($registration_type)
    {
        $allowedValues = $this->getRegistrationTypeAllowableValues();
        if (!is_null($registration_type) && !in_array($registration_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'registration_type', must be one of '%s'",
                    $registration_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['registration_type'] = $registration_type;

        return $this;
    }

    /**
     * Gets send_1080p_video_to_attendees
     *
     * @return bool|null
     */
    public function getSend1080pVideoToAttendees()
    {
        return $this->container['send_1080p_video_to_attendees'];
    }

    /**
     * Sets send_1080p_video_to_attendees
     *
     * @param bool|null $send_1080p_video_to_attendees Always send 1080p video to attendees.
     *
     * @return self
     */
    public function setSend1080pVideoToAttendees($send_1080p_video_to_attendees)
    {
        $this->container['send_1080p_video_to_attendees'] = $send_1080p_video_to_attendees;

        return $this;
    }

    /**
     * Gets show_share_button
     *
     * @return bool|null
     */
    public function getShowShareButton()
    {
        return $this->container['show_share_button'];
    }

    /**
     * Sets show_share_button
     *
     * @param bool|null $show_share_button Show social share buttons on the registration page.
     *
     * @return self
     */
    public function setShowShareButton($show_share_button)
    {
        $this->container['show_share_button'] = $show_share_button;

        return $this;
    }

    /**
     * Gets survey_url
     *
     * @return string|null
     */
    public function getSurveyUrl()
    {
        return $this->container['survey_url'];
    }

    /**
     * Sets survey_url
     *
     * @param string|null $survey_url Survey url for post webinar survey
     *
     * @return self
     */
    public function setSurveyUrl($survey_url)
    {
        $this->container['survey_url'] = $survey_url;

        return $this;
    }

    /**
     * Gets enable_session_branding
     *
     * @return bool|null
     */
    public function getEnableSessionBranding()
    {
        return $this->container['enable_session_branding'];
    }

    /**
     * Sets enable_session_branding
     *
     * @param bool|null $enable_session_branding Whether the **Webinar Session Branding** setting is enabled. This setting lets hosts visually customize a webinar by setting a session background. This also lets hosts use [Webinar Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) to set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.
     *
     * @return self
     */
    public function setEnableSessionBranding($enable_session_branding)
    {
        $this->container['enable_session_branding'] = $enable_session_branding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


