<?php
/**
 * CreateWebinarSettingsQuestionAndAnswer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * CreateWebinarSettingsQuestionAndAnswer Class Doc Comment
 *
 * @category Class
 * @description [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text&#x3D;Overview,and%20upvote%20each%20other&#39;s%20questions.) for webinar.
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateWebinarSettingsQuestionAndAnswer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateWebinarSettings_question_and_answer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_anonymous_questions' => 'bool',
        'answer_questions' => 'string',
        'attendees_can_comment' => 'bool',
        'attendees_can_upvote' => 'bool',
        'enable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_anonymous_questions' => null,
        'answer_questions' => null,
        'attendees_can_comment' => null,
        'attendees_can_upvote' => null,
        'enable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_anonymous_questions' => 'allow_anonymous_questions',
        'answer_questions' => 'answer_questions',
        'attendees_can_comment' => 'attendees_can_comment',
        'attendees_can_upvote' => 'attendees_can_upvote',
        'enable' => 'enable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_anonymous_questions' => 'setAllowAnonymousQuestions',
        'answer_questions' => 'setAnswerQuestions',
        'attendees_can_comment' => 'setAttendeesCanComment',
        'attendees_can_upvote' => 'setAttendeesCanUpvote',
        'enable' => 'setEnable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_anonymous_questions' => 'getAllowAnonymousQuestions',
        'answer_questions' => 'getAnswerQuestions',
        'attendees_can_comment' => 'getAttendeesCanComment',
        'attendees_can_upvote' => 'getAttendeesCanUpvote',
        'enable' => 'getEnable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ANSWER_QUESTIONS_ONLY = 'only';
    public const ANSWER_QUESTIONS_ALL = 'all';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAnswerQuestionsAllowableValues()
    {
        return [
            self::ANSWER_QUESTIONS_ONLY,
            self::ANSWER_QUESTIONS_ALL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_anonymous_questions'] = $data['allow_anonymous_questions'] ?? null;
        $this->container['answer_questions'] = $data['answer_questions'] ?? null;
        $this->container['attendees_can_comment'] = $data['attendees_can_comment'] ?? null;
        $this->container['attendees_can_upvote'] = $data['attendees_can_upvote'] ?? null;
        $this->container['enable'] = $data['enable'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAnswerQuestionsAllowableValues();
        if (!is_null($this->container['answer_questions']) && !in_array($this->container['answer_questions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'answer_questions', must be one of '%s'",
                $this->container['answer_questions'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_anonymous_questions
     *
     * @return bool|null
     */
    public function getAllowAnonymousQuestions()
    {
        return $this->container['allow_anonymous_questions'];
    }

    /**
     * Sets allow_anonymous_questions
     *
     * @param bool|null $allow_anonymous_questions * `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..  * `false`: Do not allow anonymous questions.
     *
     * @return self
     */
    public function setAllowAnonymousQuestions($allow_anonymous_questions)
    {
        $this->container['allow_anonymous_questions'] = $allow_anonymous_questions;

        return $this;
    }

    /**
     * Gets answer_questions
     *
     * @return string|null
     */
    public function getAnswerQuestions()
    {
        return $this->container['answer_questions'];
    }

    /**
     * Sets answer_questions
     *
     * @param string|null $answer_questions Indicate whether you want attendees to be able to view answered questions only or view all questions.  * `only`: Attendees are able to view answered questions only.  *  `all`: Attendees are able to view all questions submitted in the Q&A.
     *
     * @return self
     */
    public function setAnswerQuestions($answer_questions)
    {
        $allowedValues = $this->getAnswerQuestionsAllowableValues();
        if (!is_null($answer_questions) && !in_array($answer_questions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'answer_questions', must be one of '%s'",
                    $answer_questions,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['answer_questions'] = $answer_questions;

        return $this;
    }

    /**
     * Gets attendees_can_comment
     *
     * @return bool|null
     */
    public function getAttendeesCanComment()
    {
        return $this->container['attendees_can_comment'];
    }

    /**
     * Sets attendees_can_comment
     *
     * @param bool|null $attendees_can_comment * `true`: Attendees can answer questions or leave a comment in the question thread.  * `false`: Attendees can not answer questions or leave a comment in the question thread
     *
     * @return self
     */
    public function setAttendeesCanComment($attendees_can_comment)
    {
        $this->container['attendees_can_comment'] = $attendees_can_comment;

        return $this;
    }

    /**
     * Gets attendees_can_upvote
     *
     * @return bool|null
     */
    public function getAttendeesCanUpvote()
    {
        return $this->container['attendees_can_upvote'];
    }

    /**
     * Sets attendees_can_upvote
     *
     * @param bool|null $attendees_can_upvote * `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&A window.  * `false`: Attendees can not click the thumbs up button on questions.
     *
     * @return self
     */
    public function setAttendeesCanUpvote($attendees_can_upvote)
    {
        $this->container['attendees_can_upvote'] = $attendees_can_upvote;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool|null
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool|null $enable * `true`: Enable [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.  * `false`: Disable Q&A for webinar.
     *
     * @return self
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


