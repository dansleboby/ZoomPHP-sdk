<?php
/**
 * Tsp200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * Tsp200Response Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Tsp200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tsp_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dial_in_number_unrestricted' => 'bool',
        'dial_in_numbers' => '\Zoom\Api\Model\Tsp200ResponseDialInNumbersInner[]',
        'enable' => 'bool',
        'master_account_setting_extended' => 'bool',
        'modify_credential_forbidden' => 'bool',
        'tsp_bridge' => 'string',
        'tsp_enabled' => 'bool',
        'tsp_provider' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dial_in_number_unrestricted' => null,
        'dial_in_numbers' => null,
        'enable' => null,
        'master_account_setting_extended' => null,
        'modify_credential_forbidden' => null,
        'tsp_bridge' => null,
        'tsp_enabled' => null,
        'tsp_provider' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dial_in_number_unrestricted' => 'dial_in_number_unrestricted',
        'dial_in_numbers' => 'dial_in_numbers',
        'enable' => 'enable',
        'master_account_setting_extended' => 'master_account_setting_extended',
        'modify_credential_forbidden' => 'modify_credential_forbidden',
        'tsp_bridge' => 'tsp_bridge',
        'tsp_enabled' => 'tsp_enabled',
        'tsp_provider' => 'tsp_provider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dial_in_number_unrestricted' => 'setDialInNumberUnrestricted',
        'dial_in_numbers' => 'setDialInNumbers',
        'enable' => 'setEnable',
        'master_account_setting_extended' => 'setMasterAccountSettingExtended',
        'modify_credential_forbidden' => 'setModifyCredentialForbidden',
        'tsp_bridge' => 'setTspBridge',
        'tsp_enabled' => 'setTspEnabled',
        'tsp_provider' => 'setTspProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dial_in_number_unrestricted' => 'getDialInNumberUnrestricted',
        'dial_in_numbers' => 'getDialInNumbers',
        'enable' => 'getEnable',
        'master_account_setting_extended' => 'getMasterAccountSettingExtended',
        'modify_credential_forbidden' => 'getModifyCredentialForbidden',
        'tsp_bridge' => 'getTspBridge',
        'tsp_enabled' => 'getTspEnabled',
        'tsp_provider' => 'getTspProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TSP_BRIDGE_US_TSP_TB = 'US_TSP_TB';
    public const TSP_BRIDGE_EU_TSP_TB = 'EU_TSP_TB';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTspBridgeAllowableValues()
    {
        return [
            self::TSP_BRIDGE_US_TSP_TB,
            self::TSP_BRIDGE_EU_TSP_TB,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dial_in_number_unrestricted'] = $data['dial_in_number_unrestricted'] ?? null;
        $this->container['dial_in_numbers'] = $data['dial_in_numbers'] ?? null;
        $this->container['enable'] = $data['enable'] ?? null;
        $this->container['master_account_setting_extended'] = $data['master_account_setting_extended'] ?? null;
        $this->container['modify_credential_forbidden'] = $data['modify_credential_forbidden'] ?? null;
        $this->container['tsp_bridge'] = $data['tsp_bridge'] ?? null;
        $this->container['tsp_enabled'] = $data['tsp_enabled'] ?? null;
        $this->container['tsp_provider'] = $data['tsp_provider'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTspBridgeAllowableValues();
        if (!is_null($this->container['tsp_bridge']) && !in_array($this->container['tsp_bridge'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tsp_bridge', must be one of '%s'",
                $this->container['tsp_bridge'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dial_in_number_unrestricted
     *
     * @return bool|null
     */
    public function getDialInNumberUnrestricted()
    {
        return $this->container['dial_in_number_unrestricted'];
    }

    /**
     * Sets dial_in_number_unrestricted
     *
     * @param bool|null $dial_in_number_unrestricted Control restriction on account users adding a TSP number outside of account's dial in numbers.
     *
     * @return self
     */
    public function setDialInNumberUnrestricted($dial_in_number_unrestricted)
    {
        $this->container['dial_in_number_unrestricted'] = $dial_in_number_unrestricted;

        return $this;
    }

    /**
     * Gets dial_in_numbers
     *
     * @return \Zoom\Api\Model\Tsp200ResponseDialInNumbersInner[]|null
     */
    public function getDialInNumbers()
    {
        return $this->container['dial_in_numbers'];
    }

    /**
     * Sets dial_in_numbers
     *
     * @param \Zoom\Api\Model\Tsp200ResponseDialInNumbersInner[]|null $dial_in_numbers dial_in_numbers
     *
     * @return self
     */
    public function setDialInNumbers($dial_in_numbers)
    {
        $this->container['dial_in_numbers'] = $dial_in_numbers;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool|null
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool|null $enable Enable Telephony Service Provider for account users.
     *
     * @return self
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets master_account_setting_extended
     *
     * @return bool|null
     */
    public function getMasterAccountSettingExtended()
    {
        return $this->container['master_account_setting_extended'];
    }

    /**
     * Sets master_account_setting_extended
     *
     * @param bool|null $master_account_setting_extended For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account.
     *
     * @return self
     */
    public function setMasterAccountSettingExtended($master_account_setting_extended)
    {
        $this->container['master_account_setting_extended'] = $master_account_setting_extended;

        return $this;
    }

    /**
     * Gets modify_credential_forbidden
     *
     * @return bool|null
     */
    public function getModifyCredentialForbidden()
    {
        return $this->container['modify_credential_forbidden'];
    }

    /**
     * Sets modify_credential_forbidden
     *
     * @param bool|null $modify_credential_forbidden Control restriction on account users being able to modify their TSP credentials.
     *
     * @return self
     */
    public function setModifyCredentialForbidden($modify_credential_forbidden)
    {
        $this->container['modify_credential_forbidden'] = $modify_credential_forbidden;

        return $this;
    }

    /**
     * Gets tsp_bridge
     *
     * @return string|null
     */
    public function getTspBridge()
    {
        return $this->container['tsp_bridge'];
    }

    /**
     * Sets tsp_bridge
     *
     * @param string|null $tsp_bridge Telephony bridge zone
     *
     * @return self
     */
    public function setTspBridge($tsp_bridge)
    {
        $allowedValues = $this->getTspBridgeAllowableValues();
        if (!is_null($tsp_bridge) && !in_array($tsp_bridge, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tsp_bridge', must be one of '%s'",
                    $tsp_bridge,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tsp_bridge'] = $tsp_bridge;

        return $this;
    }

    /**
     * Gets tsp_enabled
     *
     * @return bool|null
     */
    public function getTspEnabled()
    {
        return $this->container['tsp_enabled'];
    }

    /**
     * Sets tsp_enabled
     *
     * @param bool|null $tsp_enabled Enable TSP feature for account. This has to be enabled to use any other tsp settings/features.
     *
     * @return self
     */
    public function setTspEnabled($tsp_enabled)
    {
        $this->container['tsp_enabled'] = $tsp_enabled;

        return $this;
    }

    /**
     * Gets tsp_provider
     *
     * @return string|null
     */
    public function getTspProvider()
    {
        return $this->container['tsp_provider'];
    }

    /**
     * Sets tsp_provider
     *
     * @param string|null $tsp_provider Telephony Service Provider.
     *
     * @return self
     */
    public function setTspProvider($tsp_provider)
    {
        $this->container['tsp_provider'] = $tsp_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


