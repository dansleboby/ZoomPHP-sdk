<?php
/**
 * GetGroupSettings200ResponseOneOfRecording
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * GetGroupSettings200ResponseOneOfRecording Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetGroupSettings200ResponseOneOfRecording implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getGroupSettings_200_response_oneOf_recording';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_user_access_recording' => 'bool',
        'archive' => '\Zoom\Api\Model\GetGroupSettings200ResponseOneOfRecordingArchive',
        'auto_recording' => 'string',
        'cloud_recording' => 'bool',
        'cloud_recording_download' => 'bool',
        'cloud_recording_download_host' => 'bool',
        'host_delete_cloud_recording' => 'bool',
        'record_files_separately' => '\Zoom\Api\Model\GetGroupSettings200ResponseOneOfRecordingRecordFilesSeparately',
        'display_participant_name' => 'bool',
        'recording_thumbnails' => 'bool',
        'optimize_recording_for_3rd_party_video_editor' => 'bool',
        'recording_highlight' => 'bool',
        'save_panelist_chat' => 'bool',
        'save_poll_results' => 'bool',
        'save_close_caption' => 'bool',
        'ip_address_access_control' => '\Zoom\Api\Model\GetGroupLockSettings200ResponseOneOfRecordingIpAddressAccessControl',
        'local_recording' => 'bool',
        'prevent_host_access_recording' => 'bool',
        'record_audio_file' => 'bool',
        'record_gallery_view' => 'bool',
        'record_speaker_view' => 'bool',
        'recording_audio_transcript' => 'bool',
        'save_chat_text' => 'bool',
        'show_timestamp' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_user_access_recording' => null,
        'archive' => null,
        'auto_recording' => null,
        'cloud_recording' => null,
        'cloud_recording_download' => null,
        'cloud_recording_download_host' => null,
        'host_delete_cloud_recording' => null,
        'record_files_separately' => null,
        'display_participant_name' => null,
        'recording_thumbnails' => null,
        'optimize_recording_for_3rd_party_video_editor' => null,
        'recording_highlight' => null,
        'save_panelist_chat' => null,
        'save_poll_results' => null,
        'save_close_caption' => null,
        'ip_address_access_control' => null,
        'local_recording' => null,
        'prevent_host_access_recording' => null,
        'record_audio_file' => null,
        'record_gallery_view' => null,
        'record_speaker_view' => null,
        'recording_audio_transcript' => null,
        'save_chat_text' => null,
        'show_timestamp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_user_access_recording' => 'account_user_access_recording',
        'archive' => 'archive',
        'auto_recording' => 'auto_recording',
        'cloud_recording' => 'cloud_recording',
        'cloud_recording_download' => 'cloud_recording_download',
        'cloud_recording_download_host' => 'cloud_recording_download_host',
        'host_delete_cloud_recording' => 'host_delete_cloud_recording',
        'record_files_separately' => 'record_files_separately',
        'display_participant_name' => 'display_participant_name',
        'recording_thumbnails' => 'recording_thumbnails',
        'optimize_recording_for_3rd_party_video_editor' => 'optimize_recording_for_3rd_party_video_editor',
        'recording_highlight' => 'recording_highlight',
        'save_panelist_chat' => 'save_panelist_chat',
        'save_poll_results' => 'save_poll_results',
        'save_close_caption' => 'save_close_caption',
        'ip_address_access_control' => 'ip_address_access_control',
        'local_recording' => 'local_recording',
        'prevent_host_access_recording' => 'prevent_host_access_recording',
        'record_audio_file' => 'record_audio_file',
        'record_gallery_view' => 'record_gallery_view',
        'record_speaker_view' => 'record_speaker_view',
        'recording_audio_transcript' => 'recording_audio_transcript',
        'save_chat_text' => 'save_chat_text',
        'show_timestamp' => 'show_timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_user_access_recording' => 'setAccountUserAccessRecording',
        'archive' => 'setArchive',
        'auto_recording' => 'setAutoRecording',
        'cloud_recording' => 'setCloudRecording',
        'cloud_recording_download' => 'setCloudRecordingDownload',
        'cloud_recording_download_host' => 'setCloudRecordingDownloadHost',
        'host_delete_cloud_recording' => 'setHostDeleteCloudRecording',
        'record_files_separately' => 'setRecordFilesSeparately',
        'display_participant_name' => 'setDisplayParticipantName',
        'recording_thumbnails' => 'setRecordingThumbnails',
        'optimize_recording_for_3rd_party_video_editor' => 'setOptimizeRecordingFor3rdPartyVideoEditor',
        'recording_highlight' => 'setRecordingHighlight',
        'save_panelist_chat' => 'setSavePanelistChat',
        'save_poll_results' => 'setSavePollResults',
        'save_close_caption' => 'setSaveCloseCaption',
        'ip_address_access_control' => 'setIpAddressAccessControl',
        'local_recording' => 'setLocalRecording',
        'prevent_host_access_recording' => 'setPreventHostAccessRecording',
        'record_audio_file' => 'setRecordAudioFile',
        'record_gallery_view' => 'setRecordGalleryView',
        'record_speaker_view' => 'setRecordSpeakerView',
        'recording_audio_transcript' => 'setRecordingAudioTranscript',
        'save_chat_text' => 'setSaveChatText',
        'show_timestamp' => 'setShowTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_user_access_recording' => 'getAccountUserAccessRecording',
        'archive' => 'getArchive',
        'auto_recording' => 'getAutoRecording',
        'cloud_recording' => 'getCloudRecording',
        'cloud_recording_download' => 'getCloudRecordingDownload',
        'cloud_recording_download_host' => 'getCloudRecordingDownloadHost',
        'host_delete_cloud_recording' => 'getHostDeleteCloudRecording',
        'record_files_separately' => 'getRecordFilesSeparately',
        'display_participant_name' => 'getDisplayParticipantName',
        'recording_thumbnails' => 'getRecordingThumbnails',
        'optimize_recording_for_3rd_party_video_editor' => 'getOptimizeRecordingFor3rdPartyVideoEditor',
        'recording_highlight' => 'getRecordingHighlight',
        'save_panelist_chat' => 'getSavePanelistChat',
        'save_poll_results' => 'getSavePollResults',
        'save_close_caption' => 'getSaveCloseCaption',
        'ip_address_access_control' => 'getIpAddressAccessControl',
        'local_recording' => 'getLocalRecording',
        'prevent_host_access_recording' => 'getPreventHostAccessRecording',
        'record_audio_file' => 'getRecordAudioFile',
        'record_gallery_view' => 'getRecordGalleryView',
        'record_speaker_view' => 'getRecordSpeakerView',
        'recording_audio_transcript' => 'getRecordingAudioTranscript',
        'save_chat_text' => 'getSaveChatText',
        'show_timestamp' => 'getShowTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_user_access_recording'] = $data['account_user_access_recording'] ?? null;
        $this->container['archive'] = $data['archive'] ?? null;
        $this->container['auto_recording'] = $data['auto_recording'] ?? null;
        $this->container['cloud_recording'] = $data['cloud_recording'] ?? null;
        $this->container['cloud_recording_download'] = $data['cloud_recording_download'] ?? null;
        $this->container['cloud_recording_download_host'] = $data['cloud_recording_download_host'] ?? null;
        $this->container['host_delete_cloud_recording'] = $data['host_delete_cloud_recording'] ?? null;
        $this->container['record_files_separately'] = $data['record_files_separately'] ?? null;
        $this->container['display_participant_name'] = $data['display_participant_name'] ?? null;
        $this->container['recording_thumbnails'] = $data['recording_thumbnails'] ?? null;
        $this->container['optimize_recording_for_3rd_party_video_editor'] = $data['optimize_recording_for_3rd_party_video_editor'] ?? null;
        $this->container['recording_highlight'] = $data['recording_highlight'] ?? null;
        $this->container['save_panelist_chat'] = $data['save_panelist_chat'] ?? null;
        $this->container['save_poll_results'] = $data['save_poll_results'] ?? null;
        $this->container['save_close_caption'] = $data['save_close_caption'] ?? null;
        $this->container['ip_address_access_control'] = $data['ip_address_access_control'] ?? null;
        $this->container['local_recording'] = $data['local_recording'] ?? null;
        $this->container['prevent_host_access_recording'] = $data['prevent_host_access_recording'] ?? null;
        $this->container['record_audio_file'] = $data['record_audio_file'] ?? null;
        $this->container['record_gallery_view'] = $data['record_gallery_view'] ?? null;
        $this->container['record_speaker_view'] = $data['record_speaker_view'] ?? null;
        $this->container['recording_audio_transcript'] = $data['recording_audio_transcript'] ?? null;
        $this->container['save_chat_text'] = $data['save_chat_text'] ?? null;
        $this->container['show_timestamp'] = $data['show_timestamp'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_user_access_recording
     *
     * @return bool|null
     */
    public function getAccountUserAccessRecording()
    {
        return $this->container['account_user_access_recording'];
    }

    /**
     * Sets account_user_access_recording
     *
     * @param bool|null $account_user_access_recording Make cloud recordings accessible to account members only.
     *
     * @return self
     */
    public function setAccountUserAccessRecording($account_user_access_recording)
    {
        $this->container['account_user_access_recording'] = $account_user_access_recording;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return \Zoom\Api\Model\GetGroupSettings200ResponseOneOfRecordingArchive|null
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param \Zoom\Api\Model\GetGroupSettings200ResponseOneOfRecordingArchive|null $archive archive
     *
     * @return self
     */
    public function setArchive($archive)
    {
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets auto_recording
     *
     * @return string|null
     */
    public function getAutoRecording()
    {
        return $this->container['auto_recording'];
    }

    /**
     * Sets auto_recording
     *
     * @param string|null $auto_recording Record meetings automatically as they start.
     *
     * @return self
     */
    public function setAutoRecording($auto_recording)
    {
        $this->container['auto_recording'] = $auto_recording;

        return $this;
    }

    /**
     * Gets cloud_recording
     *
     * @return bool|null
     */
    public function getCloudRecording()
    {
        return $this->container['cloud_recording'];
    }

    /**
     * Sets cloud_recording
     *
     * @param bool|null $cloud_recording Allow hosts to record and save the meeting / webinar in the cloud.
     *
     * @return self
     */
    public function setCloudRecording($cloud_recording)
    {
        $this->container['cloud_recording'] = $cloud_recording;

        return $this;
    }

    /**
     * Gets cloud_recording_download
     *
     * @return bool|null
     */
    public function getCloudRecordingDownload()
    {
        return $this->container['cloud_recording_download'];
    }

    /**
     * Sets cloud_recording_download
     *
     * @param bool|null $cloud_recording_download Allow anyone with a link to the cloud recording to download.
     *
     * @return self
     */
    public function setCloudRecordingDownload($cloud_recording_download)
    {
        $this->container['cloud_recording_download'] = $cloud_recording_download;

        return $this;
    }

    /**
     * Gets cloud_recording_download_host
     *
     * @return bool|null
     */
    public function getCloudRecordingDownloadHost()
    {
        return $this->container['cloud_recording_download_host'];
    }

    /**
     * Sets cloud_recording_download_host
     *
     * @param bool|null $cloud_recording_download_host Allow only the host with a link to the cloud recording to download.
     *
     * @return self
     */
    public function setCloudRecordingDownloadHost($cloud_recording_download_host)
    {
        $this->container['cloud_recording_download_host'] = $cloud_recording_download_host;

        return $this;
    }

    /**
     * Gets host_delete_cloud_recording
     *
     * @return bool|null
     */
    public function getHostDeleteCloudRecording()
    {
        return $this->container['host_delete_cloud_recording'];
    }

    /**
     * Sets host_delete_cloud_recording
     *
     * @param bool|null $host_delete_cloud_recording Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
     *
     * @return self
     */
    public function setHostDeleteCloudRecording($host_delete_cloud_recording)
    {
        $this->container['host_delete_cloud_recording'] = $host_delete_cloud_recording;

        return $this;
    }

    /**
     * Gets record_files_separately
     *
     * @return \Zoom\Api\Model\GetGroupSettings200ResponseOneOfRecordingRecordFilesSeparately|null
     */
    public function getRecordFilesSeparately()
    {
        return $this->container['record_files_separately'];
    }

    /**
     * Sets record_files_separately
     *
     * @param \Zoom\Api\Model\GetGroupSettings200ResponseOneOfRecordingRecordFilesSeparately|null $record_files_separately record_files_separately
     *
     * @return self
     */
    public function setRecordFilesSeparately($record_files_separately)
    {
        $this->container['record_files_separately'] = $record_files_separately;

        return $this;
    }

    /**
     * Gets display_participant_name
     *
     * @return bool|null
     */
    public function getDisplayParticipantName()
    {
        return $this->container['display_participant_name'];
    }

    /**
     * Sets display_participant_name
     *
     * @param bool|null $display_participant_name Whether participants' names display in the recording.
     *
     * @return self
     */
    public function setDisplayParticipantName($display_participant_name)
    {
        $this->container['display_participant_name'] = $display_participant_name;

        return $this;
    }

    /**
     * Gets recording_thumbnails
     *
     * @return bool|null
     */
    public function getRecordingThumbnails()
    {
        return $this->container['recording_thumbnails'];
    }

    /**
     * Sets recording_thumbnails
     *
     * @param bool|null $recording_thumbnails Whether thumbnails of the presenter are recorded when they are sharing their screen.
     *
     * @return self
     */
    public function setRecordingThumbnails($recording_thumbnails)
    {
        $this->container['recording_thumbnails'] = $recording_thumbnails;

        return $this;
    }

    /**
     * Gets optimize_recording_for_3rd_party_video_editor
     *
     * @return bool|null
     */
    public function getOptimizeRecordingFor3rdPartyVideoEditor()
    {
        return $this->container['optimize_recording_for_3rd_party_video_editor'];
    }

    /**
     * Sets optimize_recording_for_3rd_party_video_editor
     *
     * @param bool|null $optimize_recording_for_3rd_party_video_editor Whether recordings will be optimized for a 3rd party video editor. This can increase the file size and the time it takes to generate recording files.
     *
     * @return self
     */
    public function setOptimizeRecordingFor3rdPartyVideoEditor($optimize_recording_for_3rd_party_video_editor)
    {
        $this->container['optimize_recording_for_3rd_party_video_editor'] = $optimize_recording_for_3rd_party_video_editor;

        return $this;
    }

    /**
     * Gets recording_highlight
     *
     * @return bool|null
     */
    public function getRecordingHighlight()
    {
        return $this->container['recording_highlight'];
    }

    /**
     * Sets recording_highlight
     *
     * @param bool|null $recording_highlight Whether the [recording highlights](https://support.zoom.us/hc/en-us/articles/360060802432) feature is enabled.
     *
     * @return self
     */
    public function setRecordingHighlight($recording_highlight)
    {
        $this->container['recording_highlight'] = $recording_highlight;

        return $this;
    }

    /**
     * Gets save_panelist_chat
     *
     * @return bool|null
     */
    public function getSavePanelistChat()
    {
        return $this->container['save_panelist_chat'];
    }

    /**
     * Sets save_panelist_chat
     *
     * @param bool|null $save_panelist_chat Whether panelist chats are saved to the recording.
     *
     * @return self
     */
    public function setSavePanelistChat($save_panelist_chat)
    {
        $this->container['save_panelist_chat'] = $save_panelist_chat;

        return $this;
    }

    /**
     * Gets save_poll_results
     *
     * @return bool|null
     */
    public function getSavePollResults()
    {
        return $this->container['save_poll_results'];
    }

    /**
     * Sets save_poll_results
     *
     * @param bool|null $save_poll_results Whether poll results shared during the meeting or webinar are saved. This also includes poll results shared during the meeting or webinar.
     *
     * @return self
     */
    public function setSavePollResults($save_poll_results)
    {
        $this->container['save_poll_results'] = $save_poll_results;

        return $this;
    }

    /**
     * Gets save_close_caption
     *
     * @return bool|null
     */
    public function getSaveCloseCaption()
    {
        return $this->container['save_close_caption'];
    }

    /**
     * Sets save_close_caption
     *
     * @param bool|null $save_close_caption Whether [closed captions](https://support.zoom.us/hc/en-us/articles/207279736) are saved as a VTT (Video Track Text) file.
     *
     * @return self
     */
    public function setSaveCloseCaption($save_close_caption)
    {
        $this->container['save_close_caption'] = $save_close_caption;

        return $this;
    }

    /**
     * Gets ip_address_access_control
     *
     * @return \Zoom\Api\Model\GetGroupLockSettings200ResponseOneOfRecordingIpAddressAccessControl|null
     */
    public function getIpAddressAccessControl()
    {
        return $this->container['ip_address_access_control'];
    }

    /**
     * Sets ip_address_access_control
     *
     * @param \Zoom\Api\Model\GetGroupLockSettings200ResponseOneOfRecordingIpAddressAccessControl|null $ip_address_access_control ip_address_access_control
     *
     * @return self
     */
    public function setIpAddressAccessControl($ip_address_access_control)
    {
        $this->container['ip_address_access_control'] = $ip_address_access_control;

        return $this;
    }

    /**
     * Gets local_recording
     *
     * @return bool|null
     */
    public function getLocalRecording()
    {
        return $this->container['local_recording'];
    }

    /**
     * Sets local_recording
     *
     * @param bool|null $local_recording Allow hosts and participants to record the meeting to a local file.
     *
     * @return self
     */
    public function setLocalRecording($local_recording)
    {
        $this->container['local_recording'] = $local_recording;

        return $this;
    }

    /**
     * Gets prevent_host_access_recording
     *
     * @return bool|null
     */
    public function getPreventHostAccessRecording()
    {
        return $this->container['prevent_host_access_recording'];
    }

    /**
     * Sets prevent_host_access_recording
     *
     * @param bool|null $prevent_host_access_recording If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.
     *
     * @return self
     */
    public function setPreventHostAccessRecording($prevent_host_access_recording)
    {
        $this->container['prevent_host_access_recording'] = $prevent_host_access_recording;

        return $this;
    }

    /**
     * Gets record_audio_file
     *
     * @return bool|null
     */
    public function getRecordAudioFile()
    {
        return $this->container['record_audio_file'];
    }

    /**
     * Sets record_audio_file
     *
     * @param bool|null $record_audio_file Whether to record one audio file for all participants.
     *
     * @return self
     */
    public function setRecordAudioFile($record_audio_file)
    {
        $this->container['record_audio_file'] = $record_audio_file;

        return $this;
    }

    /**
     * Gets record_gallery_view
     *
     * @return bool|null
     */
    public function getRecordGalleryView()
    {
        return $this->container['record_gallery_view'];
    }

    /**
     * Sets record_gallery_view
     *
     * @param bool|null $record_gallery_view When someone is sharing their screen, active speaker will show on the top right corner of the shared screen.
     *
     * @return self
     */
    public function setRecordGalleryView($record_gallery_view)
    {
        $this->container['record_gallery_view'] = $record_gallery_view;

        return $this;
    }

    /**
     * Gets record_speaker_view
     *
     * @return bool|null
     */
    public function getRecordSpeakerView()
    {
        return $this->container['record_speaker_view'];
    }

    /**
     * Sets record_speaker_view
     *
     * @param bool|null $record_speaker_view Record active speaker with shared screen.
     *
     * @return self
     */
    public function setRecordSpeakerView($record_speaker_view)
    {
        $this->container['record_speaker_view'] = $record_speaker_view;

        return $this;
    }

    /**
     * Gets recording_audio_transcript
     *
     * @return bool|null
     */
    public function getRecordingAudioTranscript()
    {
        return $this->container['recording_audio_transcript'];
    }

    /**
     * Sets recording_audio_transcript
     *
     * @param bool|null $recording_audio_transcript Automatically transcribe the audio of a meeting or webinar for cloud recordings.
     *
     * @return self
     */
    public function setRecordingAudioTranscript($recording_audio_transcript)
    {
        $this->container['recording_audio_transcript'] = $recording_audio_transcript;

        return $this;
    }

    /**
     * Gets save_chat_text
     *
     * @return bool|null
     */
    public function getSaveChatText()
    {
        return $this->container['save_chat_text'];
    }

    /**
     * Sets save_chat_text
     *
     * @param bool|null $save_chat_text Save chat messages from the meeting / webinar.
     *
     * @return self
     */
    public function setSaveChatText($save_chat_text)
    {
        $this->container['save_chat_text'] = $save_chat_text;

        return $this;
    }

    /**
     * Gets show_timestamp
     *
     * @return bool|null
     */
    public function getShowTimestamp()
    {
        return $this->container['show_timestamp'];
    }

    /**
     * Sets show_timestamp
     *
     * @param bool|null $show_timestamp Add a timestamp to the recording.
     *
     * @return self
     */
    public function setShowTimestamp($show_timestamp)
    {
        $this->container['show_timestamp'] = $show_timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


