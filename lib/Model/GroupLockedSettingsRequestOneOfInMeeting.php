<?php
/**
 * GroupLockedSettingsRequestOneOfInMeeting
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * GroupLockedSettingsRequestOneOfInMeeting Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GroupLockedSettingsRequestOneOfInMeeting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'groupLockedSettings_request_oneOf_in_meeting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alert_guest_join' => 'bool',
        'allow_live_streaming' => 'bool',
        'allow_show_zoom_windows' => 'bool',
        'annotation' => 'bool',
        'attendee_on_hold' => 'bool',
        'auto_answer' => 'bool',
        'auto_generated_captions' => 'bool',
        'auto_saving_chat' => 'bool',
        'breakout_room' => 'bool',
        'chat' => 'bool',
        'closed_caption' => 'bool',
        'co_host' => 'bool',
        'custom_data_center_regions' => 'bool',
        'disable_screen_sharing_for_host_meetings' => 'bool',
        'disable_screen_sharing_for_in_meeting_guests' => 'bool',
        'e2e_encryption' => 'bool',
        'entry_exit_chime' => 'string',
        'far_end_camera_control' => 'bool',
        'feedback' => 'bool',
        'file_transfer' => 'bool',
        'full_transcript' => 'bool',
        'group_hd' => 'bool',
        'language_interpretation' => 'bool',
        'manual_captions' => 'bool',
        'meeting_survey' => 'bool',
        'non_verbal_feedback' => 'bool',
        'original_audio' => 'bool',
        'polling' => 'bool',
        'post_meeting_feedback' => 'bool',
        'private_chat' => 'bool',
        'remote_control' => 'bool',
        'remote_support' => 'bool',
        'request_permission_to_unmute' => 'bool',
        'save_caption' => 'bool',
        'save_captions' => 'bool',
        'screen_sharing' => 'bool',
        'sending_default_email_invites' => 'bool',
        'show_a_join_from_your_browser_link' => 'bool',
        'show_browser_join_link' => 'bool',
        'show_meeting_control_toolbar' => 'bool',
        'slide_control' => 'bool',
        'stereo_audio' => 'bool',
        'use_html_format_email' => 'bool',
        'virtual_background' => 'bool',
        'waiting_room' => 'bool',
        'webinar_chat' => 'bool',
        'webinar_live_streaming' => 'bool',
        'webinar_polling' => 'bool',
        'webinar_question_answer' => 'bool',
        'webinar_survey' => 'bool',
        'whiteboard' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alert_guest_join' => null,
        'allow_live_streaming' => null,
        'allow_show_zoom_windows' => null,
        'annotation' => null,
        'attendee_on_hold' => null,
        'auto_answer' => null,
        'auto_generated_captions' => null,
        'auto_saving_chat' => null,
        'breakout_room' => null,
        'chat' => null,
        'closed_caption' => null,
        'co_host' => null,
        'custom_data_center_regions' => null,
        'disable_screen_sharing_for_host_meetings' => null,
        'disable_screen_sharing_for_in_meeting_guests' => null,
        'e2e_encryption' => null,
        'entry_exit_chime' => null,
        'far_end_camera_control' => null,
        'feedback' => null,
        'file_transfer' => null,
        'full_transcript' => null,
        'group_hd' => null,
        'language_interpretation' => null,
        'manual_captions' => null,
        'meeting_survey' => null,
        'non_verbal_feedback' => null,
        'original_audio' => null,
        'polling' => null,
        'post_meeting_feedback' => null,
        'private_chat' => null,
        'remote_control' => null,
        'remote_support' => null,
        'request_permission_to_unmute' => null,
        'save_caption' => null,
        'save_captions' => null,
        'screen_sharing' => null,
        'sending_default_email_invites' => null,
        'show_a_join_from_your_browser_link' => null,
        'show_browser_join_link' => null,
        'show_meeting_control_toolbar' => null,
        'slide_control' => null,
        'stereo_audio' => null,
        'use_html_format_email' => null,
        'virtual_background' => null,
        'waiting_room' => null,
        'webinar_chat' => null,
        'webinar_live_streaming' => null,
        'webinar_polling' => null,
        'webinar_question_answer' => null,
        'webinar_survey' => null,
        'whiteboard' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_guest_join' => 'alert_guest_join',
        'allow_live_streaming' => 'allow_live_streaming',
        'allow_show_zoom_windows' => 'allow_show_zoom_windows',
        'annotation' => 'annotation',
        'attendee_on_hold' => 'attendee_on_hold',
        'auto_answer' => 'auto_answer',
        'auto_generated_captions' => 'auto_generated_captions',
        'auto_saving_chat' => 'auto_saving_chat',
        'breakout_room' => 'breakout_room',
        'chat' => 'chat',
        'closed_caption' => 'closed_caption',
        'co_host' => 'co_host',
        'custom_data_center_regions' => 'custom_data_center_regions',
        'disable_screen_sharing_for_host_meetings' => 'disable_screen_sharing_for_host_meetings',
        'disable_screen_sharing_for_in_meeting_guests' => 'disable_screen_sharing_for_in_meeting_guests',
        'e2e_encryption' => 'e2e_encryption',
        'entry_exit_chime' => 'entry_exit_chime',
        'far_end_camera_control' => 'far_end_camera_control',
        'feedback' => 'feedback',
        'file_transfer' => 'file_transfer',
        'full_transcript' => 'full_transcript',
        'group_hd' => 'group_hd',
        'language_interpretation' => 'language_interpretation',
        'manual_captions' => 'manual_captions',
        'meeting_survey' => 'meeting_survey',
        'non_verbal_feedback' => 'non_verbal_feedback',
        'original_audio' => 'original_audio',
        'polling' => 'polling',
        'post_meeting_feedback' => 'post_meeting_feedback',
        'private_chat' => 'private_chat',
        'remote_control' => 'remote_control',
        'remote_support' => 'remote_support',
        'request_permission_to_unmute' => 'request_permission_to_unmute',
        'save_caption' => 'save_caption',
        'save_captions' => 'save_captions',
        'screen_sharing' => 'screen_sharing',
        'sending_default_email_invites' => 'sending_default_email_invites',
        'show_a_join_from_your_browser_link' => 'show_a_join_from_your_browser_link',
        'show_browser_join_link' => 'show_browser_join_link',
        'show_meeting_control_toolbar' => 'show_meeting_control_toolbar',
        'slide_control' => 'slide_control',
        'stereo_audio' => 'stereo_audio',
        'use_html_format_email' => 'use_html_format_email',
        'virtual_background' => 'virtual_background',
        'waiting_room' => 'waiting_room',
        'webinar_chat' => 'webinar_chat',
        'webinar_live_streaming' => 'webinar_live_streaming',
        'webinar_polling' => 'webinar_polling',
        'webinar_question_answer' => 'webinar_question_answer',
        'webinar_survey' => 'webinar_survey',
        'whiteboard' => 'whiteboard'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_guest_join' => 'setAlertGuestJoin',
        'allow_live_streaming' => 'setAllowLiveStreaming',
        'allow_show_zoom_windows' => 'setAllowShowZoomWindows',
        'annotation' => 'setAnnotation',
        'attendee_on_hold' => 'setAttendeeOnHold',
        'auto_answer' => 'setAutoAnswer',
        'auto_generated_captions' => 'setAutoGeneratedCaptions',
        'auto_saving_chat' => 'setAutoSavingChat',
        'breakout_room' => 'setBreakoutRoom',
        'chat' => 'setChat',
        'closed_caption' => 'setClosedCaption',
        'co_host' => 'setCoHost',
        'custom_data_center_regions' => 'setCustomDataCenterRegions',
        'disable_screen_sharing_for_host_meetings' => 'setDisableScreenSharingForHostMeetings',
        'disable_screen_sharing_for_in_meeting_guests' => 'setDisableScreenSharingForInMeetingGuests',
        'e2e_encryption' => 'setE2eEncryption',
        'entry_exit_chime' => 'setEntryExitChime',
        'far_end_camera_control' => 'setFarEndCameraControl',
        'feedback' => 'setFeedback',
        'file_transfer' => 'setFileTransfer',
        'full_transcript' => 'setFullTranscript',
        'group_hd' => 'setGroupHd',
        'language_interpretation' => 'setLanguageInterpretation',
        'manual_captions' => 'setManualCaptions',
        'meeting_survey' => 'setMeetingSurvey',
        'non_verbal_feedback' => 'setNonVerbalFeedback',
        'original_audio' => 'setOriginalAudio',
        'polling' => 'setPolling',
        'post_meeting_feedback' => 'setPostMeetingFeedback',
        'private_chat' => 'setPrivateChat',
        'remote_control' => 'setRemoteControl',
        'remote_support' => 'setRemoteSupport',
        'request_permission_to_unmute' => 'setRequestPermissionToUnmute',
        'save_caption' => 'setSaveCaption',
        'save_captions' => 'setSaveCaptions',
        'screen_sharing' => 'setScreenSharing',
        'sending_default_email_invites' => 'setSendingDefaultEmailInvites',
        'show_a_join_from_your_browser_link' => 'setShowAJoinFromYourBrowserLink',
        'show_browser_join_link' => 'setShowBrowserJoinLink',
        'show_meeting_control_toolbar' => 'setShowMeetingControlToolbar',
        'slide_control' => 'setSlideControl',
        'stereo_audio' => 'setStereoAudio',
        'use_html_format_email' => 'setUseHtmlFormatEmail',
        'virtual_background' => 'setVirtualBackground',
        'waiting_room' => 'setWaitingRoom',
        'webinar_chat' => 'setWebinarChat',
        'webinar_live_streaming' => 'setWebinarLiveStreaming',
        'webinar_polling' => 'setWebinarPolling',
        'webinar_question_answer' => 'setWebinarQuestionAnswer',
        'webinar_survey' => 'setWebinarSurvey',
        'whiteboard' => 'setWhiteboard'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_guest_join' => 'getAlertGuestJoin',
        'allow_live_streaming' => 'getAllowLiveStreaming',
        'allow_show_zoom_windows' => 'getAllowShowZoomWindows',
        'annotation' => 'getAnnotation',
        'attendee_on_hold' => 'getAttendeeOnHold',
        'auto_answer' => 'getAutoAnswer',
        'auto_generated_captions' => 'getAutoGeneratedCaptions',
        'auto_saving_chat' => 'getAutoSavingChat',
        'breakout_room' => 'getBreakoutRoom',
        'chat' => 'getChat',
        'closed_caption' => 'getClosedCaption',
        'co_host' => 'getCoHost',
        'custom_data_center_regions' => 'getCustomDataCenterRegions',
        'disable_screen_sharing_for_host_meetings' => 'getDisableScreenSharingForHostMeetings',
        'disable_screen_sharing_for_in_meeting_guests' => 'getDisableScreenSharingForInMeetingGuests',
        'e2e_encryption' => 'getE2eEncryption',
        'entry_exit_chime' => 'getEntryExitChime',
        'far_end_camera_control' => 'getFarEndCameraControl',
        'feedback' => 'getFeedback',
        'file_transfer' => 'getFileTransfer',
        'full_transcript' => 'getFullTranscript',
        'group_hd' => 'getGroupHd',
        'language_interpretation' => 'getLanguageInterpretation',
        'manual_captions' => 'getManualCaptions',
        'meeting_survey' => 'getMeetingSurvey',
        'non_verbal_feedback' => 'getNonVerbalFeedback',
        'original_audio' => 'getOriginalAudio',
        'polling' => 'getPolling',
        'post_meeting_feedback' => 'getPostMeetingFeedback',
        'private_chat' => 'getPrivateChat',
        'remote_control' => 'getRemoteControl',
        'remote_support' => 'getRemoteSupport',
        'request_permission_to_unmute' => 'getRequestPermissionToUnmute',
        'save_caption' => 'getSaveCaption',
        'save_captions' => 'getSaveCaptions',
        'screen_sharing' => 'getScreenSharing',
        'sending_default_email_invites' => 'getSendingDefaultEmailInvites',
        'show_a_join_from_your_browser_link' => 'getShowAJoinFromYourBrowserLink',
        'show_browser_join_link' => 'getShowBrowserJoinLink',
        'show_meeting_control_toolbar' => 'getShowMeetingControlToolbar',
        'slide_control' => 'getSlideControl',
        'stereo_audio' => 'getStereoAudio',
        'use_html_format_email' => 'getUseHtmlFormatEmail',
        'virtual_background' => 'getVirtualBackground',
        'waiting_room' => 'getWaitingRoom',
        'webinar_chat' => 'getWebinarChat',
        'webinar_live_streaming' => 'getWebinarLiveStreaming',
        'webinar_polling' => 'getWebinarPolling',
        'webinar_question_answer' => 'getWebinarQuestionAnswer',
        'webinar_survey' => 'getWebinarSurvey',
        'whiteboard' => 'getWhiteboard'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_guest_join'] = $data['alert_guest_join'] ?? null;
        $this->container['allow_live_streaming'] = $data['allow_live_streaming'] ?? null;
        $this->container['allow_show_zoom_windows'] = $data['allow_show_zoom_windows'] ?? null;
        $this->container['annotation'] = $data['annotation'] ?? null;
        $this->container['attendee_on_hold'] = $data['attendee_on_hold'] ?? false;
        $this->container['auto_answer'] = $data['auto_answer'] ?? null;
        $this->container['auto_generated_captions'] = $data['auto_generated_captions'] ?? null;
        $this->container['auto_saving_chat'] = $data['auto_saving_chat'] ?? null;
        $this->container['breakout_room'] = $data['breakout_room'] ?? null;
        $this->container['chat'] = $data['chat'] ?? null;
        $this->container['closed_caption'] = $data['closed_caption'] ?? null;
        $this->container['co_host'] = $data['co_host'] ?? null;
        $this->container['custom_data_center_regions'] = $data['custom_data_center_regions'] ?? null;
        $this->container['disable_screen_sharing_for_host_meetings'] = $data['disable_screen_sharing_for_host_meetings'] ?? null;
        $this->container['disable_screen_sharing_for_in_meeting_guests'] = $data['disable_screen_sharing_for_in_meeting_guests'] ?? null;
        $this->container['e2e_encryption'] = $data['e2e_encryption'] ?? null;
        $this->container['entry_exit_chime'] = $data['entry_exit_chime'] ?? null;
        $this->container['far_end_camera_control'] = $data['far_end_camera_control'] ?? null;
        $this->container['feedback'] = $data['feedback'] ?? null;
        $this->container['file_transfer'] = $data['file_transfer'] ?? null;
        $this->container['full_transcript'] = $data['full_transcript'] ?? null;
        $this->container['group_hd'] = $data['group_hd'] ?? null;
        $this->container['language_interpretation'] = $data['language_interpretation'] ?? null;
        $this->container['manual_captions'] = $data['manual_captions'] ?? null;
        $this->container['meeting_survey'] = $data['meeting_survey'] ?? null;
        $this->container['non_verbal_feedback'] = $data['non_verbal_feedback'] ?? null;
        $this->container['original_audio'] = $data['original_audio'] ?? null;
        $this->container['polling'] = $data['polling'] ?? null;
        $this->container['post_meeting_feedback'] = $data['post_meeting_feedback'] ?? null;
        $this->container['private_chat'] = $data['private_chat'] ?? null;
        $this->container['remote_control'] = $data['remote_control'] ?? null;
        $this->container['remote_support'] = $data['remote_support'] ?? null;
        $this->container['request_permission_to_unmute'] = $data['request_permission_to_unmute'] ?? null;
        $this->container['save_caption'] = $data['save_caption'] ?? null;
        $this->container['save_captions'] = $data['save_captions'] ?? null;
        $this->container['screen_sharing'] = $data['screen_sharing'] ?? null;
        $this->container['sending_default_email_invites'] = $data['sending_default_email_invites'] ?? null;
        $this->container['show_a_join_from_your_browser_link'] = $data['show_a_join_from_your_browser_link'] ?? null;
        $this->container['show_browser_join_link'] = $data['show_browser_join_link'] ?? null;
        $this->container['show_meeting_control_toolbar'] = $data['show_meeting_control_toolbar'] ?? null;
        $this->container['slide_control'] = $data['slide_control'] ?? null;
        $this->container['stereo_audio'] = $data['stereo_audio'] ?? null;
        $this->container['use_html_format_email'] = $data['use_html_format_email'] ?? null;
        $this->container['virtual_background'] = $data['virtual_background'] ?? null;
        $this->container['waiting_room'] = $data['waiting_room'] ?? null;
        $this->container['webinar_chat'] = $data['webinar_chat'] ?? null;
        $this->container['webinar_live_streaming'] = $data['webinar_live_streaming'] ?? null;
        $this->container['webinar_polling'] = $data['webinar_polling'] ?? null;
        $this->container['webinar_question_answer'] = $data['webinar_question_answer'] ?? null;
        $this->container['webinar_survey'] = $data['webinar_survey'] ?? null;
        $this->container['whiteboard'] = $data['whiteboard'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_guest_join
     *
     * @return bool|null
     */
    public function getAlertGuestJoin()
    {
        return $this->container['alert_guest_join'];
    }

    /**
     * Sets alert_guest_join
     *
     * @param bool|null $alert_guest_join Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.
     *
     * @return self
     */
    public function setAlertGuestJoin($alert_guest_join)
    {
        $this->container['alert_guest_join'] = $alert_guest_join;

        return $this;
    }

    /**
     * Gets allow_live_streaming
     *
     * @return bool|null
     */
    public function getAllowLiveStreaming()
    {
        return $this->container['allow_live_streaming'];
    }

    /**
     * Sets allow_live_streaming
     *
     * @param bool|null $allow_live_streaming Whether to allow livestreaming.
     *
     * @return self
     */
    public function setAllowLiveStreaming($allow_live_streaming)
    {
        $this->container['allow_live_streaming'] = $allow_live_streaming;

        return $this;
    }

    /**
     * Gets allow_show_zoom_windows
     *
     * @return bool|null
     */
    public function getAllowShowZoomWindows()
    {
        return $this->container['allow_show_zoom_windows'];
    }

    /**
     * Sets allow_show_zoom_windows
     *
     * @param bool|null $allow_show_zoom_windows Show Zoom windows during screen share.
     *
     * @return self
     */
    public function setAllowShowZoomWindows($allow_show_zoom_windows)
    {
        $this->container['allow_show_zoom_windows'] = $allow_show_zoom_windows;

        return $this;
    }

    /**
     * Gets annotation
     *
     * @return bool|null
     */
    public function getAnnotation()
    {
        return $this->container['annotation'];
    }

    /**
     * Sets annotation
     *
     * @param bool|null $annotation Allow participants to use annotation tools to add information to shared screens.
     *
     * @return self
     */
    public function setAnnotation($annotation)
    {
        $this->container['annotation'] = $annotation;

        return $this;
    }

    /**
     * Gets attendee_on_hold
     *
     * @return bool|null
     */
    public function getAttendeeOnHold()
    {
        return $this->container['attendee_on_hold'];
    }

    /**
     * Sets attendee_on_hold
     *
     * @param bool|null $attendee_on_hold Allow host to put attendee on hold.  **This field has been deprecated and is no longer supported.**
     *
     * @return self
     */
    public function setAttendeeOnHold($attendee_on_hold)
    {
        $this->container['attendee_on_hold'] = $attendee_on_hold;

        return $this;
    }

    /**
     * Gets auto_answer
     *
     * @return bool|null
     */
    public function getAutoAnswer()
    {
        return $this->container['auto_answer'];
    }

    /**
     * Sets auto_answer
     *
     * @param bool|null $auto_answer Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
     *
     * @return self
     */
    public function setAutoAnswer($auto_answer)
    {
        $this->container['auto_answer'] = $auto_answer;

        return $this;
    }

    /**
     * Gets auto_generated_captions
     *
     * @return bool|null
     */
    public function getAutoGeneratedCaptions()
    {
        return $this->container['auto_generated_captions'];
    }

    /**
     * Sets auto_generated_captions
     *
     * @param bool|null $auto_generated_captions Whether to allow a live transcription service to transcribe meetings.
     *
     * @return self
     */
    public function setAutoGeneratedCaptions($auto_generated_captions)
    {
        $this->container['auto_generated_captions'] = $auto_generated_captions;

        return $this;
    }

    /**
     * Gets auto_saving_chat
     *
     * @return bool|null
     */
    public function getAutoSavingChat()
    {
        return $this->container['auto_saving_chat'];
    }

    /**
     * Sets auto_saving_chat
     *
     * @param bool|null $auto_saving_chat Automatically save all in-meeting chats.
     *
     * @return self
     */
    public function setAutoSavingChat($auto_saving_chat)
    {
        $this->container['auto_saving_chat'] = $auto_saving_chat;

        return $this;
    }

    /**
     * Gets breakout_room
     *
     * @return bool|null
     */
    public function getBreakoutRoom()
    {
        return $this->container['breakout_room'];
    }

    /**
     * Sets breakout_room
     *
     * @param bool|null $breakout_room Allow host to split meeting participants into separate, smaller rooms.
     *
     * @return self
     */
    public function setBreakoutRoom($breakout_room)
    {
        $this->container['breakout_room'] = $breakout_room;

        return $this;
    }

    /**
     * Gets chat
     *
     * @return bool|null
     */
    public function getChat()
    {
        return $this->container['chat'];
    }

    /**
     * Sets chat
     *
     * @param bool|null $chat Allow meeting participants to send chat message visible to all participants.
     *
     * @return self
     */
    public function setChat($chat)
    {
        $this->container['chat'] = $chat;

        return $this;
    }

    /**
     * Gets closed_caption
     *
     * @return bool|null
     */
    public function getClosedCaption()
    {
        return $this->container['closed_caption'];
    }

    /**
     * Sets closed_caption
     *
     * @param bool|null $closed_caption Allow host to type closed captions or assign a participant/third party device to add closed captions.
     *
     * @return self
     */
    public function setClosedCaption($closed_caption)
    {
        $this->container['closed_caption'] = $closed_caption;

        return $this;
    }

    /**
     * Gets co_host
     *
     * @return bool|null
     */
    public function getCoHost()
    {
        return $this->container['co_host'];
    }

    /**
     * Sets co_host
     *
     * @param bool|null $co_host Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
     *
     * @return self
     */
    public function setCoHost($co_host)
    {
        $this->container['co_host'] = $co_host;

        return $this;
    }

    /**
     * Gets custom_data_center_regions
     *
     * @return bool|null
     */
    public function getCustomDataCenterRegions()
    {
        return $this->container['custom_data_center_regions'];
    }

    /**
     * Sets custom_data_center_regions
     *
     * @param bool|null $custom_data_center_regions Displays whether or not custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) have been selected for meetings/webinars hosted by this group.
     *
     * @return self
     */
    public function setCustomDataCenterRegions($custom_data_center_regions)
    {
        $this->container['custom_data_center_regions'] = $custom_data_center_regions;

        return $this;
    }

    /**
     * Gets disable_screen_sharing_for_host_meetings
     *
     * @return bool|null
     */
    public function getDisableScreenSharingForHostMeetings()
    {
        return $this->container['disable_screen_sharing_for_host_meetings'];
    }

    /**
     * Sets disable_screen_sharing_for_host_meetings
     *
     * @param bool|null $disable_screen_sharing_for_host_meetings Whether to enable the **Disable desktop screen sharing for meetings you host** setting.
     *
     * @return self
     */
    public function setDisableScreenSharingForHostMeetings($disable_screen_sharing_for_host_meetings)
    {
        $this->container['disable_screen_sharing_for_host_meetings'] = $disable_screen_sharing_for_host_meetings;

        return $this;
    }

    /**
     * Gets disable_screen_sharing_for_in_meeting_guests
     *
     * @return bool|null
     */
    public function getDisableScreenSharingForInMeetingGuests()
    {
        return $this->container['disable_screen_sharing_for_in_meeting_guests'];
    }

    /**
     * Sets disable_screen_sharing_for_in_meeting_guests
     *
     * @param bool|null $disable_screen_sharing_for_in_meeting_guests Whether to enable the **Disable screen sharing when guests are in the meeting** setting.
     *
     * @return self
     */
    public function setDisableScreenSharingForInMeetingGuests($disable_screen_sharing_for_in_meeting_guests)
    {
        $this->container['disable_screen_sharing_for_in_meeting_guests'] = $disable_screen_sharing_for_in_meeting_guests;

        return $this;
    }

    /**
     * Gets e2e_encryption
     *
     * @return bool|null
     */
    public function getE2eEncryption()
    {
        return $this->container['e2e_encryption'];
    }

    /**
     * Sets e2e_encryption
     *
     * @param bool|null $e2e_encryption Require that all meetings are encrypted using AES.
     *
     * @return self
     */
    public function setE2eEncryption($e2e_encryption)
    {
        $this->container['e2e_encryption'] = $e2e_encryption;

        return $this;
    }

    /**
     * Gets entry_exit_chime
     *
     * @return string|null
     */
    public function getEntryExitChime()
    {
        return $this->container['entry_exit_chime'];
    }

    /**
     * Sets entry_exit_chime
     *
     * @param string|null $entry_exit_chime Play sound when participants join or leave.
     *
     * @return self
     */
    public function setEntryExitChime($entry_exit_chime)
    {
        $this->container['entry_exit_chime'] = $entry_exit_chime;

        return $this;
    }

    /**
     * Gets far_end_camera_control
     *
     * @return bool|null
     */
    public function getFarEndCameraControl()
    {
        return $this->container['far_end_camera_control'];
    }

    /**
     * Sets far_end_camera_control
     *
     * @param bool|null $far_end_camera_control Allow another user to take control of the camera during a meeting.
     *
     * @return self
     */
    public function setFarEndCameraControl($far_end_camera_control)
    {
        $this->container['far_end_camera_control'] = $far_end_camera_control;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return bool|null
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param bool|null $feedback Enable users to provide feedback to Zoom at the end of the meeting.
     *
     * @return self
     */
    public function setFeedback($feedback)
    {
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets file_transfer
     *
     * @return bool|null
     */
    public function getFileTransfer()
    {
        return $this->container['file_transfer'];
    }

    /**
     * Sets file_transfer
     *
     * @param bool|null $file_transfer Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.
     *
     * @return self
     */
    public function setFileTransfer($file_transfer)
    {
        $this->container['file_transfer'] = $file_transfer;

        return $this;
    }

    /**
     * Gets full_transcript
     *
     * @return bool|null
     */
    public function getFullTranscript()
    {
        return $this->container['full_transcript'];
    }

    /**
     * Sets full_transcript
     *
     * @param bool|null $full_transcript Whether to allow the viewing of full transcripts in the in-meeting side panel.
     *
     * @return self
     */
    public function setFullTranscript($full_transcript)
    {
        $this->container['full_transcript'] = $full_transcript;

        return $this;
    }

    /**
     * Gets group_hd
     *
     * @return bool|null
     */
    public function getGroupHd()
    {
        return $this->container['group_hd'];
    }

    /**
     * Sets group_hd
     *
     * @param bool|null $group_hd Enable higher quality video for host and participants. This will require more bandwidth.
     *
     * @return self
     */
    public function setGroupHd($group_hd)
    {
        $this->container['group_hd'] = $group_hd;

        return $this;
    }

    /**
     * Gets language_interpretation
     *
     * @return bool|null
     */
    public function getLanguageInterpretation()
    {
        return $this->container['language_interpretation'];
    }

    /**
     * Sets language_interpretation
     *
     * @param bool|null $language_interpretation Whether to allow hosts to assign participants as interpreters who can interpret one language into another in real-time.
     *
     * @return self
     */
    public function setLanguageInterpretation($language_interpretation)
    {
        $this->container['language_interpretation'] = $language_interpretation;

        return $this;
    }

    /**
     * Gets manual_captions
     *
     * @return bool|null
     */
    public function getManualCaptions()
    {
        return $this->container['manual_captions'];
    }

    /**
     * Sets manual_captions
     *
     * @param bool|null $manual_captions Allow host to type closed captions or assign a participant/third party device to add closed captions.
     *
     * @return self
     */
    public function setManualCaptions($manual_captions)
    {
        $this->container['manual_captions'] = $manual_captions;

        return $this;
    }

    /**
     * Gets meeting_survey
     *
     * @return bool|null
     */
    public function getMeetingSurvey()
    {
        return $this->container['meeting_survey'];
    }

    /**
     * Sets meeting_survey
     *
     * @param bool|null $meeting_survey Whether to allow the host to present a survey to participants once a meeting has ended. This feature is only available in version 5.7.3 or higher.
     *
     * @return self
     */
    public function setMeetingSurvey($meeting_survey)
    {
        $this->container['meeting_survey'] = $meeting_survey;

        return $this;
    }

    /**
     * Gets non_verbal_feedback
     *
     * @return bool|null
     */
    public function getNonVerbalFeedback()
    {
        return $this->container['non_verbal_feedback'];
    }

    /**
     * Sets non_verbal_feedback
     *
     * @param bool|null $non_verbal_feedback Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.
     *
     * @return self
     */
    public function setNonVerbalFeedback($non_verbal_feedback)
    {
        $this->container['non_verbal_feedback'] = $non_verbal_feedback;

        return $this;
    }

    /**
     * Gets original_audio
     *
     * @return bool|null
     */
    public function getOriginalAudio()
    {
        return $this->container['original_audio'];
    }

    /**
     * Sets original_audio
     *
     * @param bool|null $original_audio Allow users to select original sound during a meeting.
     *
     * @return self
     */
    public function setOriginalAudio($original_audio)
    {
        $this->container['original_audio'] = $original_audio;

        return $this;
    }

    /**
     * Gets polling
     *
     * @return bool|null
     */
    public function getPolling()
    {
        return $this->container['polling'];
    }

    /**
     * Sets polling
     *
     * @param bool|null $polling Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
     *
     * @return self
     */
    public function setPolling($polling)
    {
        $this->container['polling'] = $polling;

        return $this;
    }

    /**
     * Gets post_meeting_feedback
     *
     * @return bool|null
     */
    public function getPostMeetingFeedback()
    {
        return $this->container['post_meeting_feedback'];
    }

    /**
     * Sets post_meeting_feedback
     *
     * @param bool|null $post_meeting_feedback Display end-of-meeting experience feedback survey.
     *
     * @return self
     */
    public function setPostMeetingFeedback($post_meeting_feedback)
    {
        $this->container['post_meeting_feedback'] = $post_meeting_feedback;

        return $this;
    }

    /**
     * Gets private_chat
     *
     * @return bool|null
     */
    public function getPrivateChat()
    {
        return $this->container['private_chat'];
    }

    /**
     * Sets private_chat
     *
     * @param bool|null $private_chat Allow meeting participants to send a private 1:1 message to another participant.
     *
     * @return self
     */
    public function setPrivateChat($private_chat)
    {
        $this->container['private_chat'] = $private_chat;

        return $this;
    }

    /**
     * Gets remote_control
     *
     * @return bool|null
     */
    public function getRemoteControl()
    {
        return $this->container['remote_control'];
    }

    /**
     * Sets remote_control
     *
     * @param bool|null $remote_control During screen sharing, allow the person who is sharing to let others control the shared content.
     *
     * @return self
     */
    public function setRemoteControl($remote_control)
    {
        $this->container['remote_control'] = $remote_control;

        return $this;
    }

    /**
     * Gets remote_support
     *
     * @return bool|null
     */
    public function getRemoteSupport()
    {
        return $this->container['remote_support'];
    }

    /**
     * Sets remote_support
     *
     * @param bool|null $remote_support Allow meeting host to provide 1:1 remote support to another participant.
     *
     * @return self
     */
    public function setRemoteSupport($remote_support)
    {
        $this->container['remote_support'] = $remote_support;

        return $this;
    }

    /**
     * Gets request_permission_to_unmute
     *
     * @return bool|null
     */
    public function getRequestPermissionToUnmute()
    {
        return $this->container['request_permission_to_unmute'];
    }

    /**
     * Sets request_permission_to_unmute
     *
     * @param bool|null $request_permission_to_unmute Indicate whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option should be enabled and locked for the group or not.
     *
     * @return self
     */
    public function setRequestPermissionToUnmute($request_permission_to_unmute)
    {
        $this->container['request_permission_to_unmute'] = $request_permission_to_unmute;

        return $this;
    }

    /**
     * Gets save_caption
     *
     * @return bool|null
     */
    public function getSaveCaption()
    {
        return $this->container['save_caption'];
    }

    /**
     * Sets save_caption
     *
     * @param bool|null $save_caption Whether to allow participants to save closed captions or transcripts.
     *
     * @return self
     */
    public function setSaveCaption($save_caption)
    {
        $this->container['save_caption'] = $save_caption;

        return $this;
    }

    /**
     * Gets save_captions
     *
     * @return bool|null
     */
    public function getSaveCaptions()
    {
        return $this->container['save_captions'];
    }

    /**
     * Sets save_captions
     *
     * @param bool|null $save_captions Whether participants can save closed captions or transcripts.
     *
     * @return self
     */
    public function setSaveCaptions($save_captions)
    {
        $this->container['save_captions'] = $save_captions;

        return $this;
    }

    /**
     * Gets screen_sharing
     *
     * @return bool|null
     */
    public function getScreenSharing()
    {
        return $this->container['screen_sharing'];
    }

    /**
     * Sets screen_sharing
     *
     * @param bool|null $screen_sharing Allow host and participants to share their screen or content during meetings.
     *
     * @return self
     */
    public function setScreenSharing($screen_sharing)
    {
        $this->container['screen_sharing'] = $screen_sharing;

        return $this;
    }

    /**
     * Gets sending_default_email_invites
     *
     * @return bool|null
     */
    public function getSendingDefaultEmailInvites()
    {
        return $this->container['sending_default_email_invites'];
    }

    /**
     * Sets sending_default_email_invites
     *
     * @param bool|null $sending_default_email_invites Allow users to invite participants by email only by default.
     *
     * @return self
     */
    public function setSendingDefaultEmailInvites($sending_default_email_invites)
    {
        $this->container['sending_default_email_invites'] = $sending_default_email_invites;

        return $this;
    }

    /**
     * Gets show_a_join_from_your_browser_link
     *
     * @return bool|null
     */
    public function getShowAJoinFromYourBrowserLink()
    {
        return $this->container['show_a_join_from_your_browser_link'];
    }

    /**
     * Sets show_a_join_from_your_browser_link
     *
     * @param bool|null $show_a_join_from_your_browser_link Whether to allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.
     *
     * @return self
     */
    public function setShowAJoinFromYourBrowserLink($show_a_join_from_your_browser_link)
    {
        $this->container['show_a_join_from_your_browser_link'] = $show_a_join_from_your_browser_link;

        return $this;
    }

    /**
     * Gets show_browser_join_link
     *
     * @return bool|null
     */
    public function getShowBrowserJoinLink()
    {
        return $this->container['show_browser_join_link'];
    }

    /**
     * Sets show_browser_join_link
     *
     * @param bool|null $show_browser_join_link Allow participants to join a meeting directly from their browser.
     *
     * @return self
     */
    public function setShowBrowserJoinLink($show_browser_join_link)
    {
        $this->container['show_browser_join_link'] = $show_browser_join_link;

        return $this;
    }

    /**
     * Gets show_meeting_control_toolbar
     *
     * @return bool|null
     */
    public function getShowMeetingControlToolbar()
    {
        return $this->container['show_meeting_control_toolbar'];
    }

    /**
     * Sets show_meeting_control_toolbar
     *
     * @param bool|null $show_meeting_control_toolbar Always show meeting controls during a meeting.
     *
     * @return self
     */
    public function setShowMeetingControlToolbar($show_meeting_control_toolbar)
    {
        $this->container['show_meeting_control_toolbar'] = $show_meeting_control_toolbar;

        return $this;
    }

    /**
     * Gets slide_control
     *
     * @return bool|null
     */
    public function getSlideControl()
    {
        return $this->container['slide_control'];
    }

    /**
     * Sets slide_control
     *
     * @param bool|null $slide_control Whether the person sharing during a presentation can allow others to control the slide presentation. This feature is only available in version 5.8.3 or higher.
     *
     * @return self
     */
    public function setSlideControl($slide_control)
    {
        $this->container['slide_control'] = $slide_control;

        return $this;
    }

    /**
     * Gets stereo_audio
     *
     * @return bool|null
     */
    public function getStereoAudio()
    {
        return $this->container['stereo_audio'];
    }

    /**
     * Sets stereo_audio
     *
     * @param bool|null $stereo_audio Allow users to select stereo audio during a meeting.
     *
     * @return self
     */
    public function setStereoAudio($stereo_audio)
    {
        $this->container['stereo_audio'] = $stereo_audio;

        return $this;
    }

    /**
     * Gets use_html_format_email
     *
     * @return bool|null
     */
    public function getUseHtmlFormatEmail()
    {
        return $this->container['use_html_format_email'];
    }

    /**
     * Sets use_html_format_email
     *
     * @param bool|null $use_html_format_email Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.
     *
     * @return self
     */
    public function setUseHtmlFormatEmail($use_html_format_email)
    {
        $this->container['use_html_format_email'] = $use_html_format_email;

        return $this;
    }

    /**
     * Gets virtual_background
     *
     * @return bool|null
     */
    public function getVirtualBackground()
    {
        return $this->container['virtual_background'];
    }

    /**
     * Sets virtual_background
     *
     * @param bool|null $virtual_background Enable virtual background.
     *
     * @return self
     */
    public function setVirtualBackground($virtual_background)
    {
        $this->container['virtual_background'] = $virtual_background;

        return $this;
    }

    /**
     * Gets waiting_room
     *
     * @return bool|null
     */
    public function getWaitingRoom()
    {
        return $this->container['waiting_room'];
    }

    /**
     * Sets waiting_room
     *
     * @param bool|null $waiting_room Attendees cannot join a meeting until a host admits them individually from the waiting room.
     *
     * @return self
     */
    public function setWaitingRoom($waiting_room)
    {
        $this->container['waiting_room'] = $waiting_room;

        return $this;
    }

    /**
     * Gets webinar_chat
     *
     * @return bool|null
     */
    public function getWebinarChat()
    {
        return $this->container['webinar_chat'];
    }

    /**
     * Sets webinar_chat
     *
     * @param bool|null $webinar_chat Whether to allow webinar participants to send chat messages.
     *
     * @return self
     */
    public function setWebinarChat($webinar_chat)
    {
        $this->container['webinar_chat'] = $webinar_chat;

        return $this;
    }

    /**
     * Gets webinar_live_streaming
     *
     * @return bool|null
     */
    public function getWebinarLiveStreaming()
    {
        return $this->container['webinar_live_streaming'];
    }

    /**
     * Sets webinar_live_streaming
     *
     * @param bool|null $webinar_live_streaming Whether webinar livestreaming is enabled.
     *
     * @return self
     */
    public function setWebinarLiveStreaming($webinar_live_streaming)
    {
        $this->container['webinar_live_streaming'] = $webinar_live_streaming;

        return $this;
    }

    /**
     * Gets webinar_polling
     *
     * @return bool|null
     */
    public function getWebinarPolling()
    {
        return $this->container['webinar_polling'];
    }

    /**
     * Sets webinar_polling
     *
     * @param bool|null $webinar_polling Whether to allow the host to add polls before or during a webinar.
     *
     * @return self
     */
    public function setWebinarPolling($webinar_polling)
    {
        $this->container['webinar_polling'] = $webinar_polling;

        return $this;
    }

    /**
     * Gets webinar_question_answer
     *
     * @return bool|null
     */
    public function getWebinarQuestionAnswer()
    {
        return $this->container['webinar_question_answer'];
    }

    /**
     * Sets webinar_question_answer
     *
     * @param bool|null $webinar_question_answer Whether attendees can ask the host and panelists questions in the webinar.
     *
     * @return self
     */
    public function setWebinarQuestionAnswer($webinar_question_answer)
    {
        $this->container['webinar_question_answer'] = $webinar_question_answer;

        return $this;
    }

    /**
     * Gets webinar_survey
     *
     * @return bool|null
     */
    public function getWebinarSurvey()
    {
        return $this->container['webinar_survey'];
    }

    /**
     * Sets webinar_survey
     *
     * @param bool|null $webinar_survey Whether to allow the host to present surveys to attendees once a webinar has ended.
     *
     * @return self
     */
    public function setWebinarSurvey($webinar_survey)
    {
        $this->container['webinar_survey'] = $webinar_survey;

        return $this;
    }

    /**
     * Gets whiteboard
     *
     * @return bool|null
     */
    public function getWhiteboard()
    {
        return $this->container['whiteboard'];
    }

    /**
     * Sets whiteboard
     *
     * @param bool|null $whiteboard Allow participants to share a whiteboard that includes annotation tools.
     *
     * @return self
     */
    public function setWhiteboard($whiteboard)
    {
        $this->container['whiteboard'] = $whiteboard;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


