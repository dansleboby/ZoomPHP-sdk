<?php
/**
 * CloudArchivedFiles
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * CloudArchivedFiles Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CloudArchivedFiles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CloudArchivedFiles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_name' => 'string',
        'archive_files' => '\Zoom\Api\Model\CloudArchivedFilesArchiveFilesInner[]',
        'complete_time' => '\Zoom\Api\Model\CloudArchivedFilesCompleteTime',
        'duration' => 'int',
        'duration_in_second' => 'int',
        'host_id' => 'string',
        'id' => 'int',
        'is_breakout_room' => 'bool',
        'meeting_type' => 'string',
        'parent_meeting_id' => 'string',
        'recording_count' => 'int',
        'start_time' => '\DateTime',
        'timezone' => 'string',
        'topic' => 'string',
        'total_size' => 'int',
        'type' => 'int',
        'uuid' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_name' => null,
        'archive_files' => null,
        'complete_time' => null,
        'duration' => null,
        'duration_in_second' => null,
        'host_id' => null,
        'id' => 'int64',
        'is_breakout_room' => null,
        'meeting_type' => null,
        'parent_meeting_id' => null,
        'recording_count' => null,
        'start_time' => 'date-time',
        'timezone' => null,
        'topic' => null,
        'total_size' => null,
        'type' => null,
        'uuid' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_name' => 'account_name',
        'archive_files' => 'archive_files',
        'complete_time' => 'complete_time',
        'duration' => 'duration',
        'duration_in_second' => 'duration_in_second',
        'host_id' => 'host_id',
        'id' => 'id',
        'is_breakout_room' => 'is_breakout_room',
        'meeting_type' => 'meeting_type',
        'parent_meeting_id' => 'parent_meeting_id',
        'recording_count' => 'recording_count',
        'start_time' => 'start_time',
        'timezone' => 'timezone',
        'topic' => 'topic',
        'total_size' => 'total_size',
        'type' => 'type',
        'uuid' => 'uuid',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_name' => 'setAccountName',
        'archive_files' => 'setArchiveFiles',
        'complete_time' => 'setCompleteTime',
        'duration' => 'setDuration',
        'duration_in_second' => 'setDurationInSecond',
        'host_id' => 'setHostId',
        'id' => 'setId',
        'is_breakout_room' => 'setIsBreakoutRoom',
        'meeting_type' => 'setMeetingType',
        'parent_meeting_id' => 'setParentMeetingId',
        'recording_count' => 'setRecordingCount',
        'start_time' => 'setStartTime',
        'timezone' => 'setTimezone',
        'topic' => 'setTopic',
        'total_size' => 'setTotalSize',
        'type' => 'setType',
        'uuid' => 'setUuid',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_name' => 'getAccountName',
        'archive_files' => 'getArchiveFiles',
        'complete_time' => 'getCompleteTime',
        'duration' => 'getDuration',
        'duration_in_second' => 'getDurationInSecond',
        'host_id' => 'getHostId',
        'id' => 'getId',
        'is_breakout_room' => 'getIsBreakoutRoom',
        'meeting_type' => 'getMeetingType',
        'parent_meeting_id' => 'getParentMeetingId',
        'recording_count' => 'getRecordingCount',
        'start_time' => 'getStartTime',
        'timezone' => 'getTimezone',
        'topic' => 'getTopic',
        'total_size' => 'getTotalSize',
        'type' => 'getType',
        'uuid' => 'getUuid',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MEETING_TYPE_INTERNAL = 'internal';
    public const MEETING_TYPE_EXTERNAL = 'external';
    public const TYPE_1 = 1;
    public const TYPE_2 = 2;
    public const TYPE_3 = 3;
    public const TYPE_4 = 4;
    public const TYPE_5 = 5;
    public const TYPE_6 = 6;
    public const TYPE_7 = 7;
    public const TYPE_8 = 8;
    public const TYPE_9 = 9;
    public const TYPE_99 = 99;
    public const TYPE_100 = 100;
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_PROCESSING = 'processing';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeetingTypeAllowableValues()
    {
        return [
            self::MEETING_TYPE_INTERNAL,
            self::MEETING_TYPE_EXTERNAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_1,
            self::TYPE_2,
            self::TYPE_3,
            self::TYPE_4,
            self::TYPE_5,
            self::TYPE_6,
            self::TYPE_7,
            self::TYPE_8,
            self::TYPE_9,
            self::TYPE_99,
            self::TYPE_100,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
            self::STATUS_PROCESSING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_name'] = $data['account_name'] ?? null;
        $this->container['archive_files'] = $data['archive_files'] ?? null;
        $this->container['complete_time'] = $data['complete_time'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['duration_in_second'] = $data['duration_in_second'] ?? null;
        $this->container['host_id'] = $data['host_id'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['is_breakout_room'] = $data['is_breakout_room'] ?? null;
        $this->container['meeting_type'] = $data['meeting_type'] ?? null;
        $this->container['parent_meeting_id'] = $data['parent_meeting_id'] ?? null;
        $this->container['recording_count'] = $data['recording_count'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['topic'] = $data['topic'] ?? null;
        $this->container['total_size'] = $data['total_size'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_name'] === null) {
            $invalidProperties[] = "'account_name' can't be null";
        }
        if ($this->container['archive_files'] === null) {
            $invalidProperties[] = "'archive_files' can't be null";
        }
        if ($this->container['complete_time'] === null) {
            $invalidProperties[] = "'complete_time' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['duration_in_second'] === null) {
            $invalidProperties[] = "'duration_in_second' can't be null";
        }
        if ($this->container['host_id'] === null) {
            $invalidProperties[] = "'host_id' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['is_breakout_room'] === null) {
            $invalidProperties[] = "'is_breakout_room' can't be null";
        }
        if ($this->container['meeting_type'] === null) {
            $invalidProperties[] = "'meeting_type' can't be null";
        }
        $allowedValues = $this->getMeetingTypeAllowableValues();
        if (!is_null($this->container['meeting_type']) && !in_array($this->container['meeting_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'meeting_type', must be one of '%s'",
                $this->container['meeting_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['recording_count'] === null) {
            $invalidProperties[] = "'recording_count' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['topic'] === null) {
            $invalidProperties[] = "'topic' can't be null";
        }
        if ($this->container['total_size'] === null) {
            $invalidProperties[] = "'total_size' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name The user's account name.
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets archive_files
     *
     * @return \Zoom\Api\Model\CloudArchivedFilesArchiveFilesInner[]
     */
    public function getArchiveFiles()
    {
        return $this->container['archive_files'];
    }

    /**
     * Sets archive_files
     *
     * @param \Zoom\Api\Model\CloudArchivedFilesArchiveFilesInner[] $archive_files Information about the archive files.
     *
     * @return self
     */
    public function setArchiveFiles($archive_files)
    {
        $this->container['archive_files'] = $archive_files;

        return $this;
    }

    /**
     * Gets complete_time
     *
     * @return \Zoom\Api\Model\CloudArchivedFilesCompleteTime
     */
    public function getCompleteTime()
    {
        return $this->container['complete_time'];
    }

    /**
     * Sets complete_time
     *
     * @param \Zoom\Api\Model\CloudArchivedFilesCompleteTime $complete_time complete_time
     *
     * @return self
     */
    public function setCompleteTime($complete_time)
    {
        $this->container['complete_time'] = $complete_time;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration The meeting or webinar's scheduled duration.
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets duration_in_second
     *
     * @return int
     */
    public function getDurationInSecond()
    {
        return $this->container['duration_in_second'];
    }

    /**
     * Sets duration_in_second
     *
     * @param int $duration_in_second The meeting or webinar's duration, in seconds.
     *
     * @return self
     */
    public function setDurationInSecond($duration_in_second)
    {
        $this->container['duration_in_second'] = $duration_in_second;

        return $this;
    }

    /**
     * Gets host_id
     *
     * @return string
     */
    public function getHostId()
    {
        return $this->container['host_id'];
    }

    /**
     * Sets host_id
     *
     * @param string $host_id The ID of the user set as the host of the archived meeting or webinar.
     *
     * @return self
     */
    public function setHostId($host_id)
    {
        $this->container['host_id'] = $host_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the meeting (`meetingId`) or the webinar (`webinarId`).
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_breakout_room
     *
     * @return bool
     */
    public function getIsBreakoutRoom()
    {
        return $this->container['is_breakout_room'];
    }

    /**
     * Sets is_breakout_room
     *
     * @param bool $is_breakout_room Whether the room is a [breakout room](https://support.zoom.us/hc/en-us/articles/115005769646-Participating-in-breakout-rooms).
     *
     * @return self
     */
    public function setIsBreakoutRoom($is_breakout_room)
    {
        $this->container['is_breakout_room'] = $is_breakout_room;

        return $this;
    }

    /**
     * Gets meeting_type
     *
     * @return string
     */
    public function getMeetingType()
    {
        return $this->container['meeting_type'];
    }

    /**
     * Sets meeting_type
     *
     * @param string $meeting_type Whether the meeting or webinar is internal or external:  * `internal` — An internal meeting or webinar.  * `external` — An external meeting or webinar.    The `id`, `host_id`, and `topic` PII (Personal Identifiable Information) values in this response are removed when this value is `external`.
     *
     * @return self
     */
    public function setMeetingType($meeting_type)
    {
        $allowedValues = $this->getMeetingTypeAllowableValues();
        if (!in_array($meeting_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'meeting_type', must be one of '%s'",
                    $meeting_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['meeting_type'] = $meeting_type;

        return $this;
    }

    /**
     * Gets parent_meeting_id
     *
     * @return string|null
     */
    public function getParentMeetingId()
    {
        return $this->container['parent_meeting_id'];
    }

    /**
     * Sets parent_meeting_id
     *
     * @param string|null $parent_meeting_id The parent meeting's universally unique ID (UUID). Each meeting or webinar instance generates a UUID. If the `is_breakout_room` value is `true`, the API returns this value.
     *
     * @return self
     */
    public function setParentMeetingId($parent_meeting_id)
    {
        $this->container['parent_meeting_id'] = $parent_meeting_id;

        return $this;
    }

    /**
     * Gets recording_count
     *
     * @return int
     */
    public function getRecordingCount()
    {
        return $this->container['recording_count'];
    }

    /**
     * Sets recording_count
     *
     * @param int $recording_count The number of archived files returned in the API call response.
     *
     * @return self
     */
    public function setRecordingCount($recording_count)
    {
        $this->container['recording_count'] = $recording_count;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime $start_time The meeting or webinar's start time.
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone The meeting or webinar's [timezone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return string
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param string $topic The meeting or webinar topic.
     *
     * @return self
     */
    public function setTopic($topic)
    {
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets total_size
     *
     * @return int
     */
    public function getTotalSize()
    {
        return $this->container['total_size'];
    }

    /**
     * Sets total_size
     *
     * @param int $total_size The total size of the archive file, in bytes.
     *
     * @return self
     */
    public function setTotalSize($total_size)
    {
        $this->container['total_size'] = $total_size;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type The type of archived meeting or webinar:    If the recording is of a meeting:  * `1` — Instant meeting.  * `2` — Scheduled meeting.  * `3` — A recurring meeting with no fixed time.  * `4` — A meeting created via PMI (Personal Meeting ID).  * `7` — A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).  * `8` - Recurring meeting with a fixed time.    If the recording is of a webinar:  * `5` — A webinar.  * `6` — A recurring webinar without a fixed time.  * `9` — A recurring webinar with a fixed time.    If the recording is **not** from a meeting or webinar:   * `99` — A recording uploaded via the [**Recordings**](https://zoom.us/recording) interface on the Zoom Web Portal.  * `100` — A [breakout room](https://support.zoom.us/hc/en-us/articles/115005769646-Participating-in-breakout-rooms).
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid The universally unique identifier (UUID) of the recorded meeting or webinar instance. Each meeting or webinar instance generates a UUID.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The archive's processing status:  * `completed` — The archive's processing is complete.  * `processing` — The archive is processing.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


