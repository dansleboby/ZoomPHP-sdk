<?php
/**
 * UserSettingsRecordingSettingsTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ZoomApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applicatixons on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developersupport@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace ZoomApi;

/**
 * UserSettingsRecordingSettingsTest Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     ZoomApi
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserSettingsRecordingSettingsTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "UserSettingsRecordingSettings"
     */
    public function testUserSettingsRecordingSettings()
    {
    }

    /**
     * Test attribute "local_recording"
     */
    public function testPropertyLocalRecording()
    {
    }

    /**
     * Test attribute "cloud_recording"
     */
    public function testPropertyCloudRecording()
    {
    }

    /**
     * Test attribute "record_speaker_view"
     */
    public function testPropertyRecordSpeakerView()
    {
    }

    /**
     * Test attribute "record_gallery_view"
     */
    public function testPropertyRecordGalleryView()
    {
    }

    /**
     * Test attribute "record_audio_file"
     */
    public function testPropertyRecordAudioFile()
    {
    }

    /**
     * Test attribute "save_chat_text"
     */
    public function testPropertySaveChatText()
    {
    }

    /**
     * Test attribute "show_timestamp"
     */
    public function testPropertyShowTimestamp()
    {
    }

    /**
     * Test attribute "recording_audio_transcript"
     */
    public function testPropertyRecordingAudioTranscript()
    {
    }

    /**
     * Test attribute "auto_recording"
     */
    public function testPropertyAutoRecording()
    {
    }

    /**
     * Test attribute "host_pause_stop_recording"
     */
    public function testPropertyHostPauseStopRecording()
    {
    }

    /**
     * Test attribute "auto_delete_cmr"
     */
    public function testPropertyAutoDeleteCmr()
    {
    }

    /**
     * Test attribute "auto_delete_cmr_days"
     */
    public function testPropertyAutoDeleteCmrDays()
    {
    }

    /**
     * Test attribute "recording_disclaimer"
     */
    public function testPropertyRecordingDisclaimer()
    {
    }

    /**
     * Test attribute "ask_participants_to_consent_disclaimer"
     */
    public function testPropertyAskParticipantsToConsentDisclaimer()
    {
    }

    /**
     * Test attribute "ask_host_to_confirm_disclaimer"
     */
    public function testPropertyAskHostToConfirmDisclaimer()
    {
    }

    /**
     * Test attribute "recording_password_requirement"
     */
    public function testPropertyRecordingPasswordRequirement()
    {
    }
}
