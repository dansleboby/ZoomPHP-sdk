<?php
/**
 * DashboardMeetingParticipants200ResponseAllOfParticipantsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * DashboardMeetingParticipants200ResponseAllOfParticipantsInner Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DashboardMeetingParticipants200ResponseAllOfParticipantsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dashboardMeetingParticipants_200_response_allOf_participants_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'audio_quality' => 'string',
        'camera' => 'string',
        'connection_type' => 'string',
        'customer_key' => 'string',
        'data_center' => 'string',
        'device' => 'string',
        'domain' => 'string',
        'email' => 'string',
        'from_sip_uri' => 'string',
        'full_data_center' => 'string',
        'harddisk_id' => 'string',
        'id' => 'string',
        'in_room_participants' => 'int',
        'ip_address' => 'string',
        'join_time' => '\DateTime',
        'leave_reason' => 'string',
        'leave_time' => '\DateTime',
        'location' => 'string',
        'mac_addr' => 'string',
        'microphone' => 'string',
        'network_type' => 'string',
        'participant_user_id' => 'string',
        'pc_name' => 'string',
        'recording' => 'bool',
        'registrant_id' => 'string',
        'role' => 'string',
        'screen_share_quality' => 'string',
        'share_application' => 'bool',
        'share_desktop' => 'bool',
        'share_whiteboard' => 'bool',
        'sip_uri' => 'string',
        'speaker' => 'string',
        'status' => 'string',
        'user_id' => 'string',
        'user_name' => 'string',
        'version' => 'string',
        'video_quality' => 'string',
        'bo_mtg_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'audio_quality' => null,
        'camera' => null,
        'connection_type' => null,
        'customer_key' => null,
        'data_center' => null,
        'device' => null,
        'domain' => null,
        'email' => 'email',
        'from_sip_uri' => null,
        'full_data_center' => null,
        'harddisk_id' => null,
        'id' => null,
        'in_room_participants' => null,
        'ip_address' => null,
        'join_time' => 'date-time',
        'leave_reason' => null,
        'leave_time' => 'date-time',
        'location' => null,
        'mac_addr' => null,
        'microphone' => null,
        'network_type' => null,
        'participant_user_id' => null,
        'pc_name' => null,
        'recording' => null,
        'registrant_id' => null,
        'role' => null,
        'screen_share_quality' => null,
        'share_application' => null,
        'share_desktop' => null,
        'share_whiteboard' => null,
        'sip_uri' => null,
        'speaker' => null,
        'status' => null,
        'user_id' => null,
        'user_name' => null,
        'version' => null,
        'video_quality' => null,
        'bo_mtg_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_quality' => 'audio_quality',
        'camera' => 'camera',
        'connection_type' => 'connection_type',
        'customer_key' => 'customer_key',
        'data_center' => 'data_center',
        'device' => 'device',
        'domain' => 'domain',
        'email' => 'email',
        'from_sip_uri' => 'from_sip_uri',
        'full_data_center' => 'full_data_center',
        'harddisk_id' => 'harddisk_id',
        'id' => 'id',
        'in_room_participants' => 'in_room_participants',
        'ip_address' => 'ip_address',
        'join_time' => 'join_time',
        'leave_reason' => 'leave_reason',
        'leave_time' => 'leave_time',
        'location' => 'location',
        'mac_addr' => 'mac_addr',
        'microphone' => 'microphone',
        'network_type' => 'network_type',
        'participant_user_id' => 'participant_user_id',
        'pc_name' => 'pc_name',
        'recording' => 'recording',
        'registrant_id' => 'registrant_id',
        'role' => 'role',
        'screen_share_quality' => 'screen_share_quality',
        'share_application' => 'share_application',
        'share_desktop' => 'share_desktop',
        'share_whiteboard' => 'share_whiteboard',
        'sip_uri' => 'sip_uri',
        'speaker' => 'speaker',
        'status' => 'status',
        'user_id' => 'user_id',
        'user_name' => 'user_name',
        'version' => 'version',
        'video_quality' => 'video_quality',
        'bo_mtg_id' => 'bo_mtg_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_quality' => 'setAudioQuality',
        'camera' => 'setCamera',
        'connection_type' => 'setConnectionType',
        'customer_key' => 'setCustomerKey',
        'data_center' => 'setDataCenter',
        'device' => 'setDevice',
        'domain' => 'setDomain',
        'email' => 'setEmail',
        'from_sip_uri' => 'setFromSipUri',
        'full_data_center' => 'setFullDataCenter',
        'harddisk_id' => 'setHarddiskId',
        'id' => 'setId',
        'in_room_participants' => 'setInRoomParticipants',
        'ip_address' => 'setIpAddress',
        'join_time' => 'setJoinTime',
        'leave_reason' => 'setLeaveReason',
        'leave_time' => 'setLeaveTime',
        'location' => 'setLocation',
        'mac_addr' => 'setMacAddr',
        'microphone' => 'setMicrophone',
        'network_type' => 'setNetworkType',
        'participant_user_id' => 'setParticipantUserId',
        'pc_name' => 'setPcName',
        'recording' => 'setRecording',
        'registrant_id' => 'setRegistrantId',
        'role' => 'setRole',
        'screen_share_quality' => 'setScreenShareQuality',
        'share_application' => 'setShareApplication',
        'share_desktop' => 'setShareDesktop',
        'share_whiteboard' => 'setShareWhiteboard',
        'sip_uri' => 'setSipUri',
        'speaker' => 'setSpeaker',
        'status' => 'setStatus',
        'user_id' => 'setUserId',
        'user_name' => 'setUserName',
        'version' => 'setVersion',
        'video_quality' => 'setVideoQuality',
        'bo_mtg_id' => 'setBoMtgId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_quality' => 'getAudioQuality',
        'camera' => 'getCamera',
        'connection_type' => 'getConnectionType',
        'customer_key' => 'getCustomerKey',
        'data_center' => 'getDataCenter',
        'device' => 'getDevice',
        'domain' => 'getDomain',
        'email' => 'getEmail',
        'from_sip_uri' => 'getFromSipUri',
        'full_data_center' => 'getFullDataCenter',
        'harddisk_id' => 'getHarddiskId',
        'id' => 'getId',
        'in_room_participants' => 'getInRoomParticipants',
        'ip_address' => 'getIpAddress',
        'join_time' => 'getJoinTime',
        'leave_reason' => 'getLeaveReason',
        'leave_time' => 'getLeaveTime',
        'location' => 'getLocation',
        'mac_addr' => 'getMacAddr',
        'microphone' => 'getMicrophone',
        'network_type' => 'getNetworkType',
        'participant_user_id' => 'getParticipantUserId',
        'pc_name' => 'getPcName',
        'recording' => 'getRecording',
        'registrant_id' => 'getRegistrantId',
        'role' => 'getRole',
        'screen_share_quality' => 'getScreenShareQuality',
        'share_application' => 'getShareApplication',
        'share_desktop' => 'getShareDesktop',
        'share_whiteboard' => 'getShareWhiteboard',
        'sip_uri' => 'getSipUri',
        'speaker' => 'getSpeaker',
        'status' => 'getStatus',
        'user_id' => 'getUserId',
        'user_name' => 'getUserName',
        'version' => 'getVersion',
        'video_quality' => 'getVideoQuality',
        'bo_mtg_id' => 'getBoMtgId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUDIO_QUALITY_EMPTY = '';
    public const AUDIO_QUALITY_GOOD = 'good';
    public const AUDIO_QUALITY_FAIR = 'fair';
    public const AUDIO_QUALITY_POOR = 'poor';
    public const AUDIO_QUALITY_BAD = 'bad';
    public const DEVICE_PHONE = 'Phone';
    public const DEVICE_H_323_SIP = 'H.323/SIP';
    public const DEVICE_WINDOWS = 'Windows';
    public const DEVICE_MAC = 'Mac';
    public const DEVICE_I_OS = 'iOS';
    public const DEVICE_ANDROID = 'Android';
    public const LEAVE_REASON__NAME_LEFT_THE_MEETING = '$name left the meeting.';
    public const LEAVE_REASON__NAME_GOT_DISCONNECTED_FROM_THE_MEETING = '$name got disconnected from the meeting.';
    public const LEAVE_REASON_HOST_ENDED_THE_MEETING = 'Host ended the meeting.';
    public const LEAVE_REASON_HOST_CLOSED_THE_MEETING = 'Host closed the meeting.';
    public const LEAVE_REASON_HOST_STARTED_A_NEW_MEETING = 'Host started a new meeting.';
    public const LEAVE_REASON_NETWORK_CONNECTION_ERROR = 'Network connection error.';
    public const LEAVE_REASON_HOST_DID_NOT_JOIN = 'Host did not join.';
    public const LEAVE_REASON_EXCEEDED_FREE_MEETING_MINUTES_LIMIT = 'Exceeded free meeting minutes limit.';
    public const LEAVE_REASON_REMOVED_BY_HOST = 'Removed by host.';
    public const LEAVE_REASON_UNKNOWN_REASON = 'Unknown reason.';
    public const LEAVE_REASON_LEAVE_WAITING_ROOM = 'Leave waiting room.';
    public const LEAVE_REASON_REMOVED_BY_HOST_FROM_WAITING_ROOM = 'Removed by host from waiting room.';
    public const NETWORK_TYPE_WIRED = 'Wired';
    public const NETWORK_TYPE_WIFI = 'Wifi';
    public const NETWORK_TYPE_PPP = 'PPP';
    public const NETWORK_TYPE_CELLULAR = 'Cellular';
    public const NETWORK_TYPE_OTHERS = 'Others';
    public const ROLE_HOST = 'host';
    public const ROLE_ATTENDEE = 'attendee';
    public const SCREEN_SHARE_QUALITY_EMPTY = '';
    public const SCREEN_SHARE_QUALITY_GOOD = 'good';
    public const SCREEN_SHARE_QUALITY_FAIR = 'fair';
    public const SCREEN_SHARE_QUALITY_POOR = 'poor';
    public const SCREEN_SHARE_QUALITY_BAD = 'bad';
    public const STATUS_MEETING = 'in_meeting';
    public const STATUS_WAITING_ROOM = 'in_waiting_room';
    public const VIDEO_QUALITY_EMPTY = '';
    public const VIDEO_QUALITY_GOOD = 'good';
    public const VIDEO_QUALITY_FAIR = 'fair';
    public const VIDEO_QUALITY_POOR = 'poor';
    public const VIDEO_QUALITY_BAD = 'bad';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAudioQualityAllowableValues()
    {
        return [
            self::AUDIO_QUALITY_EMPTY,
            self::AUDIO_QUALITY_GOOD,
            self::AUDIO_QUALITY_FAIR,
            self::AUDIO_QUALITY_POOR,
            self::AUDIO_QUALITY_BAD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceAllowableValues()
    {
        return [
            self::DEVICE_PHONE,
            self::DEVICE_H_323_SIP,
            self::DEVICE_WINDOWS,
            self::DEVICE_MAC,
            self::DEVICE_I_OS,
            self::DEVICE_ANDROID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeaveReasonAllowableValues()
    {
        return [
            self::LEAVE_REASON__NAME_LEFT_THE_MEETING,
            self::LEAVE_REASON__NAME_GOT_DISCONNECTED_FROM_THE_MEETING,
            self::LEAVE_REASON_HOST_ENDED_THE_MEETING,
            self::LEAVE_REASON_HOST_CLOSED_THE_MEETING,
            self::LEAVE_REASON_HOST_STARTED_A_NEW_MEETING,
            self::LEAVE_REASON_NETWORK_CONNECTION_ERROR,
            self::LEAVE_REASON_HOST_DID_NOT_JOIN,
            self::LEAVE_REASON_EXCEEDED_FREE_MEETING_MINUTES_LIMIT,
            self::LEAVE_REASON_REMOVED_BY_HOST,
            self::LEAVE_REASON_UNKNOWN_REASON,
            self::LEAVE_REASON_LEAVE_WAITING_ROOM,
            self::LEAVE_REASON_REMOVED_BY_HOST_FROM_WAITING_ROOM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkTypeAllowableValues()
    {
        return [
            self::NETWORK_TYPE_WIRED,
            self::NETWORK_TYPE_WIFI,
            self::NETWORK_TYPE_PPP,
            self::NETWORK_TYPE_CELLULAR,
            self::NETWORK_TYPE_OTHERS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_HOST,
            self::ROLE_ATTENDEE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScreenShareQualityAllowableValues()
    {
        return [
            self::SCREEN_SHARE_QUALITY_EMPTY,
            self::SCREEN_SHARE_QUALITY_GOOD,
            self::SCREEN_SHARE_QUALITY_FAIR,
            self::SCREEN_SHARE_QUALITY_POOR,
            self::SCREEN_SHARE_QUALITY_BAD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_MEETING,
            self::STATUS_WAITING_ROOM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVideoQualityAllowableValues()
    {
        return [
            self::VIDEO_QUALITY_EMPTY,
            self::VIDEO_QUALITY_GOOD,
            self::VIDEO_QUALITY_FAIR,
            self::VIDEO_QUALITY_POOR,
            self::VIDEO_QUALITY_BAD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_quality'] = $data['audio_quality'] ?? null;
        $this->container['camera'] = $data['camera'] ?? null;
        $this->container['connection_type'] = $data['connection_type'] ?? null;
        $this->container['customer_key'] = $data['customer_key'] ?? null;
        $this->container['data_center'] = $data['data_center'] ?? null;
        $this->container['device'] = $data['device'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['from_sip_uri'] = $data['from_sip_uri'] ?? null;
        $this->container['full_data_center'] = $data['full_data_center'] ?? null;
        $this->container['harddisk_id'] = $data['harddisk_id'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['in_room_participants'] = $data['in_room_participants'] ?? null;
        $this->container['ip_address'] = $data['ip_address'] ?? null;
        $this->container['join_time'] = $data['join_time'] ?? null;
        $this->container['leave_reason'] = $data['leave_reason'] ?? null;
        $this->container['leave_time'] = $data['leave_time'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['mac_addr'] = $data['mac_addr'] ?? null;
        $this->container['microphone'] = $data['microphone'] ?? null;
        $this->container['network_type'] = $data['network_type'] ?? null;
        $this->container['participant_user_id'] = $data['participant_user_id'] ?? null;
        $this->container['pc_name'] = $data['pc_name'] ?? null;
        $this->container['recording'] = $data['recording'] ?? null;
        $this->container['registrant_id'] = $data['registrant_id'] ?? null;
        $this->container['role'] = $data['role'] ?? null;
        $this->container['screen_share_quality'] = $data['screen_share_quality'] ?? null;
        $this->container['share_application'] = $data['share_application'] ?? null;
        $this->container['share_desktop'] = $data['share_desktop'] ?? null;
        $this->container['share_whiteboard'] = $data['share_whiteboard'] ?? null;
        $this->container['sip_uri'] = $data['sip_uri'] ?? null;
        $this->container['speaker'] = $data['speaker'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['user_name'] = $data['user_name'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['video_quality'] = $data['video_quality'] ?? null;
        $this->container['bo_mtg_id'] = $data['bo_mtg_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAudioQualityAllowableValues();
        if (!is_null($this->container['audio_quality']) && !in_array($this->container['audio_quality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'audio_quality', must be one of '%s'",
                $this->container['audio_quality'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['customer_key']) && (mb_strlen($this->container['customer_key']) > 15)) {
            $invalidProperties[] = "invalid value for 'customer_key', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getDeviceAllowableValues();
        if (!is_null($this->container['device']) && !in_array($this->container['device'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device', must be one of '%s'",
                $this->container['device'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeaveReasonAllowableValues();
        if (!is_null($this->container['leave_reason']) && !in_array($this->container['leave_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'leave_reason', must be one of '%s'",
                $this->container['leave_reason'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!is_null($this->container['network_type']) && !in_array($this->container['network_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network_type', must be one of '%s'",
                $this->container['network_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScreenShareQualityAllowableValues();
        if (!is_null($this->container['screen_share_quality']) && !in_array($this->container['screen_share_quality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'screen_share_quality', must be one of '%s'",
                $this->container['screen_share_quality'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVideoQualityAllowableValues();
        if (!is_null($this->container['video_quality']) && !in_array($this->container['video_quality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'video_quality', must be one of '%s'",
                $this->container['video_quality'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio_quality
     *
     * @return string|null
     */
    public function getAudioQuality()
    {
        return $this->container['audio_quality'];
    }

    /**
     * Sets audio_quality
     *
     * @param string|null $audio_quality The participant's [audio quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Using-meeting-quality-scores-and-network-alerts). The API only returns this value when the **Meeting quality scores and network alerts on Dashboard** setting is enabled in the Zoom Web Portal and the **Show meeting quality score and network alerts on Dashboard** option is selected in [**Account Settings**](https://zoom.us/account/setting):  * `good` — The audio is almost flawless and the quality is excellent.  * `fair` — The audio occasionally has distortion, noise, and other problems, but the content is basically continuous. Participants can communicate normally.  * `poor` — The audio often has distortion, noise, and other problems, but the content is basically continuous. Participants can communicate normally.  * `bad` — The sound quality is extremely poor and the audio content is almost inaudible.
     *
     * @return self
     */
    public function setAudioQuality($audio_quality)
    {
        $allowedValues = $this->getAudioQualityAllowableValues();
        if (!is_null($audio_quality) && !in_array($audio_quality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'audio_quality', must be one of '%s'",
                    $audio_quality,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['audio_quality'] = $audio_quality;

        return $this;
    }

    /**
     * Gets camera
     *
     * @return string|null
     */
    public function getCamera()
    {
        return $this->container['camera'];
    }

    /**
     * Sets camera
     *
     * @param string|null $camera The type of camera that the participant used during the meeting.   **Note:** This response returns an empty string (`““`) value for any users who are **not** a part of the host's account (external users).
     *
     * @return self
     */
    public function setCamera($camera)
    {
        $this->container['camera'] = $camera;

        return $this;
    }

    /**
     * Gets connection_type
     *
     * @return string|null
     */
    public function getConnectionType()
    {
        return $this->container['connection_type'];
    }

    /**
     * Sets connection_type
     *
     * @param string|null $connection_type The participant's connection type.
     *
     * @return self
     */
    public function setConnectionType($connection_type)
    {
        $this->container['connection_type'] = $connection_type;

        return $this;
    }

    /**
     * Gets customer_key
     *
     * @return string|null
     */
    public function getCustomerKey()
    {
        return $this->container['customer_key'];
    }

    /**
     * Sets customer_key
     *
     * @param string|null $customer_key The participant's SDK identifier. This value can be alphanumeric, up to a maximum length of 15 characters.
     *
     * @return self
     */
    public function setCustomerKey($customer_key)
    {
        if (!is_null($customer_key) && (mb_strlen($customer_key) > 15)) {
            throw new \InvalidArgumentException('invalid length for $customer_key when calling DashboardMeetingParticipants200ResponseAllOfParticipantsInner., must be smaller than or equal to 15.');
        }

        $this->container['customer_key'] = $customer_key;

        return $this;
    }

    /**
     * Gets data_center
     *
     * @return string|null
     */
    public function getDataCenter()
    {
        return $this->container['data_center'];
    }

    /**
     * Sets data_center
     *
     * @param string|null $data_center The data center where participant's meeting data is stored.
     *
     * @return self
     */
    public function setDataCenter($data_center)
    {
        $this->container['data_center'] = $data_center;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string|null $device The type of device the participant used to join the meeting:  * `Phone` — The participant joined via PSTN.  * `H.323/SIP` — The participant joined via an H.323 or SIP device.  * `Windows` — The participant joined via VoIP using a Windows device.  * `Mac` — The participant joined via VoIP using a Mac device.  * `iOS` — The participant joined via VoIP using an iOS device.  * `Android` — The participant joined via VoIP using an Android device.   **Note:** This response returns an empty string (`““`) value for any users who are **not** a part of the host's account (external users).
     *
     * @return self
     */
    public function setDevice($device)
    {
        $allowedValues = $this->getDeviceAllowableValues();
        if (!is_null($device) && !in_array($device, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device', must be one of '%s'",
                    $device,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain The participant's PC domain.   **Note:** This response returns an empty string (`““`) value for any users who are **not** a part of the host's account (external users).
     *
     * @return self
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The participant's email address. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#email-address) for details.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets from_sip_uri
     *
     * @return string|null
     */
    public function getFromSipUri()
    {
        return $this->container['from_sip_uri'];
    }

    /**
     * Sets from_sip_uri
     *
     * @param string|null $from_sip_uri The meeting participant's SIP From header URI. The API only returns this response when the participant joins a meeting via SIP.
     *
     * @return self
     */
    public function setFromSipUri($from_sip_uri)
    {
        $this->container['from_sip_uri'] = $from_sip_uri;

        return $this;
    }

    /**
     * Gets full_data_center
     *
     * @return string|null
     */
    public function getFullDataCenter()
    {
        return $this->container['full_data_center'];
    }

    /**
     * Sets full_data_center
     *
     * @param string|null $full_data_center The data center where participant's meeting data is stored. This field includes a semicolon-separated list of HTTP Tunnel (HT), Cloud Room Connector (CRC), and Real-Time Web Gateway (RWG) location information.
     *
     * @return self
     */
    public function setFullDataCenter($full_data_center)
    {
        $this->container['full_data_center'] = $full_data_center;

        return $this;
    }

    /**
     * Gets harddisk_id
     *
     * @return string|null
     */
    public function getHarddiskId()
    {
        return $this->container['harddisk_id'];
    }

    /**
     * Sets harddisk_id
     *
     * @param string|null $harddisk_id The participant's hard disk ID.   **Note:** This response returns an empty string (`““`) value for any users who are **not** a part of the host's account (external users).
     *
     * @return self
     */
    public function setHarddiskId($harddisk_id)
    {
        $this->container['harddisk_id'] = $harddisk_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The participant's universally unique ID. This value is the same as the participant's user ID if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging into Zoom, this returns an empty value.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets in_room_participants
     *
     * @return int|null
     */
    public function getInRoomParticipants()
    {
        return $this->container['in_room_participants'];
    }

    /**
     * Sets in_room_participants
     *
     * @param int|null $in_room_participants The number of participants that joined via Zoom Room.
     *
     * @return self
     */
    public function setInRoomParticipants($in_room_participants)
    {
        $this->container['in_room_participants'] = $in_room_participants;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address The participant's IP address.
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets join_time
     *
     * @return \DateTime|null
     */
    public function getJoinTime()
    {
        return $this->container['join_time'];
    }

    /**
     * Sets join_time
     *
     * @param \DateTime|null $join_time The time at which participant joined the meeting.
     *
     * @return self
     */
    public function setJoinTime($join_time)
    {
        $this->container['join_time'] = $join_time;

        return $this;
    }

    /**
     * Gets leave_reason
     *
     * @return string|null
     */
    public function getLeaveReason()
    {
        return $this->container['leave_reason'];
    }

    /**
     * Sets leave_reason
     *
     * @param string|null $leave_reason The reason why the participant left the meeting, where `$name` is the participant's username:  * `$name left the meeting.`  * `$name got disconnected from the meeting.`  * `Host ended the meeting.`  * `Host closed the meeting.`  * `Host started a new meeting.`  * `Network connection error.`  * `Host did not join.`  * `Exceeded free meeting minutes limit.`  * `Removed by host.`  * `Unknown reason.`  * `Leave waiting room.`  * `Removed by host from waiting room.`
     *
     * @return self
     */
    public function setLeaveReason($leave_reason)
    {
        $allowedValues = $this->getLeaveReasonAllowableValues();
        if (!is_null($leave_reason) && !in_array($leave_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'leave_reason', must be one of '%s'",
                    $leave_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['leave_reason'] = $leave_reason;

        return $this;
    }

    /**
     * Gets leave_time
     *
     * @return \DateTime|null
     */
    public function getLeaveTime()
    {
        return $this->container['leave_time'];
    }

    /**
     * Sets leave_time
     *
     * @param \DateTime|null $leave_time The time at which a participant left the meeting. For live meetings, this field will only return if a participant has left the ongoing meeting.
     *
     * @return self
     */
    public function setLeaveTime($leave_time)
    {
        $this->container['leave_time'] = $leave_time;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The participant's location.
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets mac_addr
     *
     * @return string|null
     */
    public function getMacAddr()
    {
        return $this->container['mac_addr'];
    }

    /**
     * Sets mac_addr
     *
     * @param string|null $mac_addr The participant's MAC address.   **Note:** This response returns an empty string (`““`) value for any users who are **not** a part of the host's account (external users).
     *
     * @return self
     */
    public function setMacAddr($mac_addr)
    {
        $this->container['mac_addr'] = $mac_addr;

        return $this;
    }

    /**
     * Gets microphone
     *
     * @return string|null
     */
    public function getMicrophone()
    {
        return $this->container['microphone'];
    }

    /**
     * Sets microphone
     *
     * @param string|null $microphone The type of microphone that the participant used during the meeting.   **Note:** This response returns an empty string (`““`) value for any users who are **not** a part of the host's account (external users).
     *
     * @return self
     */
    public function setMicrophone($microphone)
    {
        $this->container['microphone'] = $microphone;

        return $this;
    }

    /**
     * Gets network_type
     *
     * @return string|null
     */
    public function getNetworkType()
    {
        return $this->container['network_type'];
    }

    /**
     * Sets network_type
     *
     * @param string|null $network_type The participant's network type:   * `Wired`  * `Wifi`  * `PPP` — Point-to-Point.  * `Cellular` — 3G, 4G, and 5G cellular.  * `Others` — An unknown device.
     *
     * @return self
     */
    public function setNetworkType($network_type)
    {
        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!is_null($network_type) && !in_array($network_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'network_type', must be one of '%s'",
                    $network_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_type'] = $network_type;

        return $this;
    }

    /**
     * Gets participant_user_id
     *
     * @return string|null
     */
    public function getParticipantUserId()
    {
        return $this->container['participant_user_id'];
    }

    /**
     * Sets participant_user_id
     *
     * @param string|null $participant_user_id The participant's universally unique ID (UUID):  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.
     *
     * @return self
     */
    public function setParticipantUserId($participant_user_id)
    {
        $this->container['participant_user_id'] = $participant_user_id;

        return $this;
    }

    /**
     * Gets pc_name
     *
     * @return string|null
     */
    public function getPcName()
    {
        return $this->container['pc_name'];
    }

    /**
     * Sets pc_name
     *
     * @param string|null $pc_name The participant's PC name.
     *
     * @return self
     */
    public function setPcName($pc_name)
    {
        $this->container['pc_name'] = $pc_name;

        return $this;
    }

    /**
     * Gets recording
     *
     * @return bool|null
     */
    public function getRecording()
    {
        return $this->container['recording'];
    }

    /**
     * Sets recording
     *
     * @param bool|null $recording Whether the recording feature was used during the meeting.
     *
     * @return self
     */
    public function setRecording($recording)
    {
        $this->container['recording'] = $recording;

        return $this;
    }

    /**
     * Gets registrant_id
     *
     * @return string|null
     */
    public function getRegistrantId()
    {
        return $this->container['registrant_id'];
    }

    /**
     * Sets registrant_id
     *
     * @param string|null $registrant_id The participant's unique registrant ID. This field only returns if you pass the `registrant_id` value for the `include_fields` query parameter.   This field does not return if the `type` query parameter is the `live` value.
     *
     * @return self
     */
    public function setRegistrantId($registrant_id)
    {
        $this->container['registrant_id'] = $registrant_id;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role The participant's role:  * `host` — Host.  * `attendee` — Attendee.
     *
     * @return self
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($role) && !in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets screen_share_quality
     *
     * @return string|null
     */
    public function getScreenShareQuality()
    {
        return $this->container['screen_share_quality'];
    }

    /**
     * Sets screen_share_quality
     *
     * @param string|null $screen_share_quality The participant's [screen share quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Using-meeting-quality-scores-and-network-alerts). The API only returns this value when the **Meeting quality scores and network alerts on Dashboard** setting is enabled in the Zoom Web Portal and the **Show meeting quality score and network alerts on Dashboard** option is selected in [**Account Settings**](https://zoom.us/account/setting):  * `good` — The video is almost flawless and the quality is excellent.  * `fair` — The video definition is high, occasionally gets stuck, fast or slow, or other problems, but the frequency is very low and the video quality is good.  * `poor` — The video definition is not high, but not many problems exist. The video quality is mediocre.  * `bad` — The picture is very blurred and often gets stuck.
     *
     * @return self
     */
    public function setScreenShareQuality($screen_share_quality)
    {
        $allowedValues = $this->getScreenShareQualityAllowableValues();
        if (!is_null($screen_share_quality) && !in_array($screen_share_quality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'screen_share_quality', must be one of '%s'",
                    $screen_share_quality,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['screen_share_quality'] = $screen_share_quality;

        return $this;
    }

    /**
     * Gets share_application
     *
     * @return bool|null
     */
    public function getShareApplication()
    {
        return $this->container['share_application'];
    }

    /**
     * Sets share_application
     *
     * @param bool|null $share_application Whether the participant chose to share an iPhone/iPad app during the screenshare.
     *
     * @return self
     */
    public function setShareApplication($share_application)
    {
        $this->container['share_application'] = $share_application;

        return $this;
    }

    /**
     * Gets share_desktop
     *
     * @return bool|null
     */
    public function getShareDesktop()
    {
        return $this->container['share_desktop'];
    }

    /**
     * Sets share_desktop
     *
     * @param bool|null $share_desktop Whether the participant chose to share their desktop during the screenshare.
     *
     * @return self
     */
    public function setShareDesktop($share_desktop)
    {
        $this->container['share_desktop'] = $share_desktop;

        return $this;
    }

    /**
     * Gets share_whiteboard
     *
     * @return bool|null
     */
    public function getShareWhiteboard()
    {
        return $this->container['share_whiteboard'];
    }

    /**
     * Sets share_whiteboard
     *
     * @param bool|null $share_whiteboard Whether the participant chose to share their whiteboard during the screenshare.
     *
     * @return self
     */
    public function setShareWhiteboard($share_whiteboard)
    {
        $this->container['share_whiteboard'] = $share_whiteboard;

        return $this;
    }

    /**
     * Gets sip_uri
     *
     * @return string|null
     */
    public function getSipUri()
    {
        return $this->container['sip_uri'];
    }

    /**
     * Sets sip_uri
     *
     * @param string|null $sip_uri The meeting participant's SIP (Session Initiation Protocol) Contact header URI. The API only returns this response when the participant joins a meeting via SIP.
     *
     * @return self
     */
    public function setSipUri($sip_uri)
    {
        $this->container['sip_uri'] = $sip_uri;

        return $this;
    }

    /**
     * Gets speaker
     *
     * @return string|null
     */
    public function getSpeaker()
    {
        return $this->container['speaker'];
    }

    /**
     * Sets speaker
     *
     * @param string|null $speaker The type of speaker that the participant used during the meeting.   **Note:** This response returns an empty string (`““`) value for any users who are **not** a part of the host's account (external users).
     *
     * @return self
     */
    public function setSpeaker($speaker)
    {
        $this->container['speaker'] = $speaker;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The participant's status:  * `in_meeting` — In a meeting.  * `in_waiting_room` — In a waiting room.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id The participant's ID. This value assigned to a participant upon joining a meeting and is only valid for the meeting's duration.
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name The participant's display name.
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version The participant's Zoom client version.
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets video_quality
     *
     * @return string|null
     */
    public function getVideoQuality()
    {
        return $this->container['video_quality'];
    }

    /**
     * Sets video_quality
     *
     * @param string|null $video_quality The participant's [video quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Using-meeting-quality-scores-and-network-alerts). The API only returns this value when the **Meeting quality scores and network alerts on Dashboard** setting is enabled in the Zoom Web Portal and the **Show meeting quality score and network alerts on Dashboard** option is selected in [**Account Settings**](https://zoom.us/account/setting):  * `good` — The video is almost flawless and the quality is excellent.  * `fair` — The video definition is high, occasionally gets stuck, fast or slow, or other problems, but the frequency is very low and the video quality is good.  * `poor` — The video definition is not high, but not many problems exist. The video quality is mediocre.  * `bad` — The picture is very blurred and often gets stuck.
     *
     * @return self
     */
    public function setVideoQuality($video_quality)
    {
        $allowedValues = $this->getVideoQualityAllowableValues();
        if (!is_null($video_quality) && !in_array($video_quality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'video_quality', must be one of '%s'",
                    $video_quality,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['video_quality'] = $video_quality;

        return $this;
    }

    /**
     * Gets bo_mtg_id
     *
     * @return string|null
     */
    public function getBoMtgId()
    {
        return $this->container['bo_mtg_id'];
    }

    /**
     * Sets bo_mtg_id
     *
     * @param string|null $bo_mtg_id The [breakout room](https://support.zoom.us/hc/en-us/articles/206476313-Managing-breakout-rooms) ID. Each breakout room is assigned a unique ID.
     *
     * @return self
     */
    public function setBoMtgId($bo_mtg_id)
    {
        $this->container['bo_mtg_id'] = $bo_mtg_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


