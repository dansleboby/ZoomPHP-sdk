<?php
/**
 * ReportChatMessages200ResponseMessagesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * ReportChatMessages200ResponseMessagesInner Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportChatMessages200ResponseMessagesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'reportChatMessages_200_response_messages_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_time' => '\DateTime',
        'files' => '\Zoom\Api\Model\ReportChatMessages200ResponseDeletedMessagesInnerFilesInner[]',
        'id' => 'string',
        'message' => 'string',
        'receiver' => 'string',
        'reply_main_message_id' => 'string',
        'reply_main_message_timestamp' => 'int',
        'sender' => 'string',
        'timestamp' => 'int',
        'bot_message' => '\Zoom\Api\Model\ReportChatMessages200ResponseMessagesInnerBotMessage'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_time' => 'date-time',
        'files' => null,
        'id' => null,
        'message' => null,
        'receiver' => null,
        'reply_main_message_id' => null,
        'reply_main_message_timestamp' => 'int64',
        'sender' => null,
        'timestamp' => 'int64',
        'bot_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_time' => 'date_time',
        'files' => 'files',
        'id' => 'id',
        'message' => 'message',
        'receiver' => 'receiver',
        'reply_main_message_id' => 'reply_main_message_id',
        'reply_main_message_timestamp' => 'reply_main_message_timestamp',
        'sender' => 'sender',
        'timestamp' => 'timestamp',
        'bot_message' => 'bot_message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_time' => 'setDateTime',
        'files' => 'setFiles',
        'id' => 'setId',
        'message' => 'setMessage',
        'receiver' => 'setReceiver',
        'reply_main_message_id' => 'setReplyMainMessageId',
        'reply_main_message_timestamp' => 'setReplyMainMessageTimestamp',
        'sender' => 'setSender',
        'timestamp' => 'setTimestamp',
        'bot_message' => 'setBotMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_time' => 'getDateTime',
        'files' => 'getFiles',
        'id' => 'getId',
        'message' => 'getMessage',
        'receiver' => 'getReceiver',
        'reply_main_message_id' => 'getReplyMainMessageId',
        'reply_main_message_timestamp' => 'getReplyMainMessageTimestamp',
        'sender' => 'getSender',
        'timestamp' => 'getTimestamp',
        'bot_message' => 'getBotMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_time'] = $data['date_time'] ?? null;
        $this->container['files'] = $data['files'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
        $this->container['receiver'] = $data['receiver'] ?? null;
        $this->container['reply_main_message_id'] = $data['reply_main_message_id'] ?? null;
        $this->container['reply_main_message_timestamp'] = $data['reply_main_message_timestamp'] ?? null;
        $this->container['sender'] = $data['sender'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['bot_message'] = $data['bot_message'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_time
     *
     * @return \DateTime|null
     */
    public function getDateTime()
    {
        return $this->container['date_time'];
    }

    /**
     * Sets date_time
     *
     * @param \DateTime|null $date_time The timestamp at which the chat message was sent.
     *
     * @return self
     */
    public function setDateTime($date_time)
    {
        $this->container['date_time'] = $date_time;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Zoom\Api\Model\ReportChatMessages200ResponseDeletedMessagesInnerFilesInner[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Zoom\Api\Model\ReportChatMessages200ResponseDeletedMessagesInnerFilesInner[]|null $files Information about the chat files.
     *
     * @return self
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The chat message's ID.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message The contents of the chat message.
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return string|null
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param string|null $receiver The chat message's recipient. This field only returns if the chat session `type` value is `1:1`.
     *
     * @return self
     */
    public function setReceiver($receiver)
    {
        $this->container['receiver'] = $receiver;

        return $this;
    }

    /**
     * Gets reply_main_message_id
     *
     * @return string|null
     */
    public function getReplyMainMessageId()
    {
        return $this->container['reply_main_message_id'];
    }

    /**
     * Sets reply_main_message_id
     *
     * @param string|null $reply_main_message_id The reply message's unique ID. The API only returns this value if the message is a reply message.
     *
     * @return self
     */
    public function setReplyMainMessageId($reply_main_message_id)
    {
        $this->container['reply_main_message_id'] = $reply_main_message_id;

        return $this;
    }

    /**
     * Gets reply_main_message_timestamp
     *
     * @return int|null
     */
    public function getReplyMainMessageTimestamp()
    {
        return $this->container['reply_main_message_timestamp'];
    }

    /**
     * Sets reply_main_message_timestamp
     *
     * @param int|null $reply_main_message_timestamp A timestamp of when the reply message was sent. The API only returns this value if the message is a reply message.
     *
     * @return self
     */
    public function setReplyMainMessageTimestamp($reply_main_message_timestamp)
    {
        $this->container['reply_main_message_timestamp'] = $reply_main_message_timestamp;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string|null $sender The chat message's sender.
     *
     * @return self
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp The message's timestamp, in milliseconds.
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets bot_message
     *
     * @return \Zoom\Api\Model\ReportChatMessages200ResponseMessagesInnerBotMessage|null
     */
    public function getBotMessage()
    {
        return $this->container['bot_message'];
    }

    /**
     * Sets bot_message
     *
     * @param \Zoom\Api\Model\ReportChatMessages200ResponseMessagesInnerBotMessage|null $bot_message bot_message
     *
     * @return self
     */
    public function setBotMessage($bot_message)
    {
        $this->container['bot_message'] = $bot_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


