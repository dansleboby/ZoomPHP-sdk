<?php
/**
 * CloudArchivedFilesArchiveFilesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * CloudArchivedFilesArchiveFilesInner Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CloudArchivedFilesArchiveFilesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CloudArchivedFiles_archive_files_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'download_url' => 'string',
        'file_extension' => 'string',
        'file_path' => 'string',
        'file_size' => 'int',
        'file_type' => 'string',
        'id' => 'string',
        'individual' => 'bool',
        'participant_email' => 'string',
        'participant_join_time' => '\DateTime',
        'participant_leave_time' => '\DateTime',
        'recording_type' => 'string',
        'status' => 'string',
        'encryption_fingerprint' => 'string',
        'number_of_messages' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'download_url' => null,
        'file_extension' => null,
        'file_path' => null,
        'file_size' => null,
        'file_type' => null,
        'id' => null,
        'individual' => null,
        'participant_email' => 'email',
        'participant_join_time' => 'date-time',
        'participant_leave_time' => 'date-time',
        'recording_type' => null,
        'status' => null,
        'encryption_fingerprint' => null,
        'number_of_messages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'download_url' => 'download_url',
        'file_extension' => 'file_extension',
        'file_path' => 'file_path',
        'file_size' => 'file_size',
        'file_type' => 'file_type',
        'id' => 'id',
        'individual' => 'individual',
        'participant_email' => 'participant_email',
        'participant_join_time' => 'participant_join_time',
        'participant_leave_time' => 'participant_leave_time',
        'recording_type' => 'recording_type',
        'status' => 'status',
        'encryption_fingerprint' => 'encryption_fingerprint',
        'number_of_messages' => 'number_of_messages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'download_url' => 'setDownloadUrl',
        'file_extension' => 'setFileExtension',
        'file_path' => 'setFilePath',
        'file_size' => 'setFileSize',
        'file_type' => 'setFileType',
        'id' => 'setId',
        'individual' => 'setIndividual',
        'participant_email' => 'setParticipantEmail',
        'participant_join_time' => 'setParticipantJoinTime',
        'participant_leave_time' => 'setParticipantLeaveTime',
        'recording_type' => 'setRecordingType',
        'status' => 'setStatus',
        'encryption_fingerprint' => 'setEncryptionFingerprint',
        'number_of_messages' => 'setNumberOfMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'download_url' => 'getDownloadUrl',
        'file_extension' => 'getFileExtension',
        'file_path' => 'getFilePath',
        'file_size' => 'getFileSize',
        'file_type' => 'getFileType',
        'id' => 'getId',
        'individual' => 'getIndividual',
        'participant_email' => 'getParticipantEmail',
        'participant_join_time' => 'getParticipantJoinTime',
        'participant_leave_time' => 'getParticipantLeaveTime',
        'recording_type' => 'getRecordingType',
        'status' => 'getStatus',
        'encryption_fingerprint' => 'getEncryptionFingerprint',
        'number_of_messages' => 'getNumberOfMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FILE_TYPE_MP4 = 'MP4';
    public const FILE_TYPE_M4_A = 'M4A';
    public const FILE_TYPE_TRANSCRIPT = 'TRANSCRIPT';
    public const FILE_TYPE_CHAT = 'CHAT';
    public const FILE_TYPE_CC = 'CC';
    public const FILE_TYPE_CSV = 'CSV';
    public const FILE_TYPE_CHAT_MESSAGE = 'CHAT_MESSAGE';
    public const RECORDING_TYPE_SHARED_SCREEN_WITH_SPEAKER_VIEW_CC = 'shared_screen_with_speaker_view(CC)';
    public const RECORDING_TYPE_SHARED_SCREEN_WITH_SPEAKER_VIEW = 'shared_screen_with_speaker_view';
    public const RECORDING_TYPE_SHARED_SCREEN_WITH_GALLERY_VIEW = 'shared_screen_with_gallery_view';
    public const RECORDING_TYPE_GALLERY_VIEW = 'gallery_view';
    public const RECORDING_TYPE_SHARED_SCREEN = 'shared_screen';
    public const RECORDING_TYPE_AUDIO_ONLY = 'audio_only';
    public const RECORDING_TYPE_AUDIO_TRANSCRIPT = 'audio_transcript';
    public const RECORDING_TYPE_CHAT_FILE = 'chat_file';
    public const RECORDING_TYPE_ACTIVE_SPEAKER = 'active_speaker';
    public const RECORDING_TYPE_HOST_VIDEO = 'host_video';
    public const RECORDING_TYPE_AUDIO_ONLY_EACH_PARTICIPANT = 'audio_only_each_participant';
    public const RECORDING_TYPE_CC_TRANSCRIPT = 'cc_transcript';
    public const RECORDING_TYPE_CLOSED_CAPTION = 'closed_caption';
    public const RECORDING_TYPE_POLL = 'poll';
    public const RECORDING_TYPE_TIMELINE = 'timeline';
    public const RECORDING_TYPE_THUMBNAIL = 'thumbnail';
    public const RECORDING_TYPE_CHAT_MESSAGE = 'chat_message';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_PROCESSING = 'processing';
    public const STATUS_FAILED = 'failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileTypeAllowableValues()
    {
        return [
            self::FILE_TYPE_MP4,
            self::FILE_TYPE_M4_A,
            self::FILE_TYPE_TRANSCRIPT,
            self::FILE_TYPE_CHAT,
            self::FILE_TYPE_CC,
            self::FILE_TYPE_CSV,
            self::FILE_TYPE_CHAT_MESSAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecordingTypeAllowableValues()
    {
        return [
            self::RECORDING_TYPE_SHARED_SCREEN_WITH_SPEAKER_VIEW_CC,
            self::RECORDING_TYPE_SHARED_SCREEN_WITH_SPEAKER_VIEW,
            self::RECORDING_TYPE_SHARED_SCREEN_WITH_GALLERY_VIEW,
            self::RECORDING_TYPE_GALLERY_VIEW,
            self::RECORDING_TYPE_SHARED_SCREEN,
            self::RECORDING_TYPE_AUDIO_ONLY,
            self::RECORDING_TYPE_AUDIO_TRANSCRIPT,
            self::RECORDING_TYPE_CHAT_FILE,
            self::RECORDING_TYPE_ACTIVE_SPEAKER,
            self::RECORDING_TYPE_HOST_VIDEO,
            self::RECORDING_TYPE_AUDIO_ONLY_EACH_PARTICIPANT,
            self::RECORDING_TYPE_CC_TRANSCRIPT,
            self::RECORDING_TYPE_CLOSED_CAPTION,
            self::RECORDING_TYPE_POLL,
            self::RECORDING_TYPE_TIMELINE,
            self::RECORDING_TYPE_THUMBNAIL,
            self::RECORDING_TYPE_CHAT_MESSAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
            self::STATUS_PROCESSING,
            self::STATUS_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['download_url'] = $data['download_url'] ?? null;
        $this->container['file_extension'] = $data['file_extension'] ?? null;
        $this->container['file_path'] = $data['file_path'] ?? null;
        $this->container['file_size'] = $data['file_size'] ?? null;
        $this->container['file_type'] = $data['file_type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['individual'] = $data['individual'] ?? null;
        $this->container['participant_email'] = $data['participant_email'] ?? null;
        $this->container['participant_join_time'] = $data['participant_join_time'] ?? null;
        $this->container['participant_leave_time'] = $data['participant_leave_time'] ?? null;
        $this->container['recording_type'] = $data['recording_type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['encryption_fingerprint'] = $data['encryption_fingerprint'] ?? null;
        $this->container['number_of_messages'] = $data['number_of_messages'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['download_url'] === null) {
            $invalidProperties[] = "'download_url' can't be null";
        }
        if ($this->container['file_extension'] === null) {
            $invalidProperties[] = "'file_extension' can't be null";
        }
        if ($this->container['file_size'] === null) {
            $invalidProperties[] = "'file_size' can't be null";
        }
        if ($this->container['file_type'] === null) {
            $invalidProperties[] = "'file_type' can't be null";
        }
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!is_null($this->container['file_type']) && !in_array($this->container['file_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'file_type', must be one of '%s'",
                $this->container['file_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['individual'] === null) {
            $invalidProperties[] = "'individual' can't be null";
        }
        if ($this->container['participant_join_time'] === null) {
            $invalidProperties[] = "'participant_join_time' can't be null";
        }
        if ($this->container['participant_leave_time'] === null) {
            $invalidProperties[] = "'participant_leave_time' can't be null";
        }
        if ($this->container['recording_type'] === null) {
            $invalidProperties[] = "'recording_type' can't be null";
        }
        $allowedValues = $this->getRecordingTypeAllowableValues();
        if (!is_null($this->container['recording_type']) && !in_array($this->container['recording_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recording_type', must be one of '%s'",
                $this->container['recording_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['encryption_fingerprint'] === null) {
            $invalidProperties[] = "'encryption_fingerprint' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets download_url
     *
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param string $download_url The URL at which to download the the archive file.    **JWT apps**    To access a private or password-protected archive file of a user in your account, use a [Zoom JWT app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app). Use the generated JWT token as the value of the `access_token` query parameter and include this query parameter at the end of the URL.    `https://{{base-domain}}/rec/archive/download/{{path-to-file-download}}?access_token={{JWT-token}}`    **OAuth apps**    If a user has authorized and installed your OAuth app that contains recording scopes, use the user's [OAuth access token](https://marketplace.zoom.us/docs/guides/auth/oauth) to download the file. For example:    `https://{{base-domain}}/rec/archive/download/xxx?access_token={{OAuth-access-token}}`    **Note:** This field does **not** return for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). Instead, this API will return the `file_path` field.
     *
     * @return self
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets file_extension
     *
     * @return string
     */
    public function getFileExtension()
    {
        return $this->container['file_extension'];
    }

    /**
     * Sets file_extension
     *
     * @param string $file_extension The archived file's extension.
     *
     * @return self
     */
    public function setFileExtension($file_extension)
    {
        $this->container['file_extension'] = $file_extension;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string|null
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string|null $file_path The file path to the On-Premise account archive file.    **Note:** The API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the `download_url` field.
     *
     * @return self
     */
    public function setFilePath($file_path)
    {
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return int
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param int $file_size The archived file's size, in bytes.
     *
     * @return self
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type The archive file's type:  * `MP4` — Video file.  * `M4A` — Audio-only file.  * `TRANSCRIPT` — A transcription file, in VTT format.  * `CHAT` — A TXT file containing in-meeting chat messages.  * `CC` — A file containing the closed captions of the recording, in VTT file format.  * `CSV` — A file containing polling data, in CSV format.  * `CHAT_MESSAGE` — A JSON file containing chat messages. The file also includes message deletions, chat reactions, and emojis.
     *
     * @return self
     */
    public function setFileType($file_type)
    {
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!in_array($file_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'file_type', must be one of '%s'",
                    $file_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The archive file's unique ID.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets individual
     *
     * @return bool
     */
    public function getIndividual()
    {
        return $this->container['individual'];
    }

    /**
     * Sets individual
     *
     * @param bool $individual Whether the archive file is an individual recording file:  * `true` — An individual recording file.   * `false` — An entire meeting file.
     *
     * @return self
     */
    public function setIndividual($individual)
    {
        $this->container['individual'] = $individual;

        return $this;
    }

    /**
     * Gets participant_email
     *
     * @return string|null
     */
    public function getParticipantEmail()
    {
        return $this->container['participant_email'];
    }

    /**
     * Sets participant_email
     *
     * @param string|null $participant_email The individual recording file's participant email address. This value is returned when the `individual` value is `true`. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#email-address) for details.
     *
     * @return self
     */
    public function setParticipantEmail($participant_email)
    {
        $this->container['participant_email'] = $participant_email;

        return $this;
    }

    /**
     * Gets participant_join_time
     *
     * @return \DateTime
     */
    public function getParticipantJoinTime()
    {
        return $this->container['participant_join_time'];
    }

    /**
     * Sets participant_join_time
     *
     * @param \DateTime $participant_join_time The individual recording file's participant join time. This value is returned when the `individual` value is `true`.
     *
     * @return self
     */
    public function setParticipantJoinTime($participant_join_time)
    {
        $this->container['participant_join_time'] = $participant_join_time;

        return $this;
    }

    /**
     * Gets participant_leave_time
     *
     * @return \DateTime
     */
    public function getParticipantLeaveTime()
    {
        return $this->container['participant_leave_time'];
    }

    /**
     * Sets participant_leave_time
     *
     * @param \DateTime $participant_leave_time The individual recording file's participant leave time. This value is returned when the `individual` value is `true`.
     *
     * @return self
     */
    public function setParticipantLeaveTime($participant_leave_time)
    {
        $this->container['participant_leave_time'] = $participant_leave_time;

        return $this;
    }

    /**
     * Gets recording_type
     *
     * @return string
     */
    public function getRecordingType()
    {
        return $this->container['recording_type'];
    }

    /**
     * Sets recording_type
     *
     * @param string $recording_type The archive file's recording type:  * `shared_screen_with_speaker_view(CC)`  * `shared_screen_with_speaker_view`  * `shared_screen_with_gallery_view`  * `gallery_view`  * `shared_screen`  * `audio_only`  * `audio_transcript`  * `chat_file`  * `active_speaker`  * `host_video`  * `audio_only_each_participant`  * `cc_transcript`  * `closed_caption`  * `poll`  * `timeline`  * `thumbnail`  * `chat_message`    For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.
     *
     * @return self
     */
    public function setRecordingType($recording_type)
    {
        $allowedValues = $this->getRecordingTypeAllowableValues();
        if (!in_array($recording_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recording_type', must be one of '%s'",
                    $recording_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recording_type'] = $recording_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The archived file's processing status:  * `completed` — The processing of the file is complete.  * `processing` — The file is processing.  * `failed` — The processing of the file failed.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets encryption_fingerprint
     *
     * @return string
     */
    public function getEncryptionFingerprint()
    {
        return $this->container['encryption_fingerprint'];
    }

    /**
     * Sets encryption_fingerprint
     *
     * @param string $encryption_fingerprint The archived file's encryption fingerprint.
     *
     * @return self
     */
    public function setEncryptionFingerprint($encryption_fingerprint)
    {
        $this->container['encryption_fingerprint'] = $encryption_fingerprint;

        return $this;
    }

    /**
     * Gets number_of_messages
     *
     * @return int|null
     */
    public function getNumberOfMessages()
    {
        return $this->container['number_of_messages'];
    }

    /**
     * Sets number_of_messages
     *
     * @param int|null $number_of_messages The number of `TXT` or `JSON` file messages. This field will return only when the `file_extension` is `JSON` or `TXT`
     *
     * @return self
     */
    public function setNumberOfMessages($number_of_messages)
    {
        $this->container['number_of_messages'] = $number_of_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


