<?php
/**
 * AccountSettingsOtherOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * AccountSettingsOtherOptions Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountSettingsOtherOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountSettingsOtherOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_auto_active_users' => 'bool',
        'allow_users_contact_support_via_chat' => 'bool',
        'allow_users_enter_and_share_pronouns' => 'bool',
        'blur_snapshot' => 'bool',
        'display_meetings_scheduled_for_others' => 'bool',
        'meeting_qos_and_mos' => 'int',
        'show_one_user_meeting_on_dashboard' => 'bool',
        'use_cdn' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_auto_active_users' => null,
        'allow_users_contact_support_via_chat' => null,
        'allow_users_enter_and_share_pronouns' => null,
        'blur_snapshot' => null,
        'display_meetings_scheduled_for_others' => null,
        'meeting_qos_and_mos' => null,
        'show_one_user_meeting_on_dashboard' => null,
        'use_cdn' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_auto_active_users' => 'allow_auto_active_users',
        'allow_users_contact_support_via_chat' => 'allow_users_contact_support_via_chat',
        'allow_users_enter_and_share_pronouns' => 'allow_users_enter_and_share_pronouns',
        'blur_snapshot' => 'blur_snapshot',
        'display_meetings_scheduled_for_others' => 'display_meetings_scheduled_for_others',
        'meeting_qos_and_mos' => 'meeting_qos_and_mos',
        'show_one_user_meeting_on_dashboard' => 'show_one_user_meeting_on_dashboard',
        'use_cdn' => 'use_cdn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_auto_active_users' => 'setAllowAutoActiveUsers',
        'allow_users_contact_support_via_chat' => 'setAllowUsersContactSupportViaChat',
        'allow_users_enter_and_share_pronouns' => 'setAllowUsersEnterAndSharePronouns',
        'blur_snapshot' => 'setBlurSnapshot',
        'display_meetings_scheduled_for_others' => 'setDisplayMeetingsScheduledForOthers',
        'meeting_qos_and_mos' => 'setMeetingQosAndMos',
        'show_one_user_meeting_on_dashboard' => 'setShowOneUserMeetingOnDashboard',
        'use_cdn' => 'setUseCdn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_auto_active_users' => 'getAllowAutoActiveUsers',
        'allow_users_contact_support_via_chat' => 'getAllowUsersContactSupportViaChat',
        'allow_users_enter_and_share_pronouns' => 'getAllowUsersEnterAndSharePronouns',
        'blur_snapshot' => 'getBlurSnapshot',
        'display_meetings_scheduled_for_others' => 'getDisplayMeetingsScheduledForOthers',
        'meeting_qos_and_mos' => 'getMeetingQosAndMos',
        'show_one_user_meeting_on_dashboard' => 'getShowOneUserMeetingOnDashboard',
        'use_cdn' => 'getUseCdn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MEETING_QOS_AND_MOS_0 = 0;
    public const MEETING_QOS_AND_MOS_1 = 1;
    public const MEETING_QOS_AND_MOS_2 = 2;
    public const USE_CDN_NONE = 'none';
    public const USE_CDN__DEFAULT = 'default';
    public const USE_CDN_WANGSU = 'wangsu';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeetingQosAndMosAllowableValues()
    {
        return [
            self::MEETING_QOS_AND_MOS_0,
            self::MEETING_QOS_AND_MOS_1,
            self::MEETING_QOS_AND_MOS_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseCdnAllowableValues()
    {
        return [
            self::USE_CDN_NONE,
            self::USE_CDN__DEFAULT,
            self::USE_CDN_WANGSU,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_auto_active_users'] = $data['allow_auto_active_users'] ?? null;
        $this->container['allow_users_contact_support_via_chat'] = $data['allow_users_contact_support_via_chat'] ?? null;
        $this->container['allow_users_enter_and_share_pronouns'] = $data['allow_users_enter_and_share_pronouns'] ?? null;
        $this->container['blur_snapshot'] = $data['blur_snapshot'] ?? null;
        $this->container['display_meetings_scheduled_for_others'] = $data['display_meetings_scheduled_for_others'] ?? null;
        $this->container['meeting_qos_and_mos'] = $data['meeting_qos_and_mos'] ?? null;
        $this->container['show_one_user_meeting_on_dashboard'] = $data['show_one_user_meeting_on_dashboard'] ?? null;
        $this->container['use_cdn'] = $data['use_cdn'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMeetingQosAndMosAllowableValues();
        if (!is_null($this->container['meeting_qos_and_mos']) && !in_array($this->container['meeting_qos_and_mos'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'meeting_qos_and_mos', must be one of '%s'",
                $this->container['meeting_qos_and_mos'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUseCdnAllowableValues();
        if (!is_null($this->container['use_cdn']) && !in_array($this->container['use_cdn'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'use_cdn', must be one of '%s'",
                $this->container['use_cdn'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_auto_active_users
     *
     * @return bool|null
     */
    public function getAllowAutoActiveUsers()
    {
        return $this->container['allow_auto_active_users'];
    }

    /**
     * Sets allow_auto_active_users
     *
     * @param bool|null $allow_auto_active_users Whether administrators can activate users with a single default password when they add users. This immediately activates the users without waiting for them to set their own password.
     *
     * @return self
     */
    public function setAllowAutoActiveUsers($allow_auto_active_users)
    {
        $this->container['allow_auto_active_users'] = $allow_auto_active_users;

        return $this;
    }

    /**
     * Gets allow_users_contact_support_via_chat
     *
     * @return bool|null
     */
    public function getAllowUsersContactSupportViaChat()
    {
        return $this->container['allow_users_contact_support_via_chat'];
    }

    /**
     * Sets allow_users_contact_support_via_chat
     *
     * @param bool|null $allow_users_contact_support_via_chat Whether to display the Zoom Help badge on the bottom-right of the page.
     *
     * @return self
     */
    public function setAllowUsersContactSupportViaChat($allow_users_contact_support_via_chat)
    {
        $this->container['allow_users_contact_support_via_chat'] = $allow_users_contact_support_via_chat;

        return $this;
    }

    /**
     * Gets allow_users_enter_and_share_pronouns
     *
     * @return bool|null
     */
    public function getAllowUsersEnterAndSharePronouns()
    {
        return $this->container['allow_users_enter_and_share_pronouns'];
    }

    /**
     * Sets allow_users_enter_and_share_pronouns
     *
     * @param bool|null $allow_users_enter_and_share_pronouns Whether users can add pronouns to their profile cards and share them during meetings and webinars.
     *
     * @return self
     */
    public function setAllowUsersEnterAndSharePronouns($allow_users_enter_and_share_pronouns)
    {
        $this->container['allow_users_enter_and_share_pronouns'] = $allow_users_enter_and_share_pronouns;

        return $this;
    }

    /**
     * Gets blur_snapshot
     *
     * @return bool|null
     */
    public function getBlurSnapshot()
    {
        return $this->container['blur_snapshot'];
    }

    /**
     * Sets blur_snapshot
     *
     * @param bool|null $blur_snapshot Whether iOS blurs the screenshot in the task switcher when multiple apps are open. Android hides the screenshot in the system-level list of recent apps.
     *
     * @return self
     */
    public function setBlurSnapshot($blur_snapshot)
    {
        $this->container['blur_snapshot'] = $blur_snapshot;

        return $this;
    }

    /**
     * Gets display_meetings_scheduled_for_others
     *
     * @return bool|null
     */
    public function getDisplayMeetingsScheduledForOthers()
    {
        return $this->container['display_meetings_scheduled_for_others'];
    }

    /**
     * Sets display_meetings_scheduled_for_others
     *
     * @param bool|null $display_meetings_scheduled_for_others Whether a user with the [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege) can view other users' meetings.
     *
     * @return self
     */
    public function setDisplayMeetingsScheduledForOthers($display_meetings_scheduled_for_others)
    {
        $this->container['display_meetings_scheduled_for_others'] = $display_meetings_scheduled_for_others;

        return $this;
    }

    /**
     * Gets meeting_qos_and_mos
     *
     * @return int|null
     */
    public function getMeetingQosAndMos()
    {
        return $this->container['meeting_qos_and_mos'];
    }

    /**
     * Sets meeting_qos_and_mos
     *
     * @param int|null $meeting_qos_and_mos The Dashboard meeting [quality scores and network alerts](https://support.zoom.us/hc/en-us/articles/360061244651) setting:  * `0` — Do not enable meeting quality scores and network alerts on the Dashboard.  * `1` — Display the meeting quality score and network alerts on the Dashboard.  * `2` — Use custom thresholds for quality scores and network alerts.
     *
     * @return self
     */
    public function setMeetingQosAndMos($meeting_qos_and_mos)
    {
        $allowedValues = $this->getMeetingQosAndMosAllowableValues();
        if (!is_null($meeting_qos_and_mos) && !in_array($meeting_qos_and_mos, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'meeting_qos_and_mos', must be one of '%s'",
                    $meeting_qos_and_mos,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['meeting_qos_and_mos'] = $meeting_qos_and_mos;

        return $this;
    }

    /**
     * Gets show_one_user_meeting_on_dashboard
     *
     * @return bool|null
     */
    public function getShowOneUserMeetingOnDashboard()
    {
        return $this->container['show_one_user_meeting_on_dashboard'];
    }

    /**
     * Sets show_one_user_meeting_on_dashboard
     *
     * @param bool|null $show_one_user_meeting_on_dashboard Whether meetings with only one person will display on the Dashboard and in reports.
     *
     * @return self
     */
    public function setShowOneUserMeetingOnDashboard($show_one_user_meeting_on_dashboard)
    {
        $this->container['show_one_user_meeting_on_dashboard'] = $show_one_user_meeting_on_dashboard;

        return $this;
    }

    /**
     * Gets use_cdn
     *
     * @return string|null
     */
    public function getUseCdn()
    {
        return $this->container['use_cdn'];
    }

    /**
     * Sets use_cdn
     *
     * @param string|null $use_cdn Allow connections to different CDNs (content delivery networks) for a better web browsing experience. All users in your organization will use the selected CDN to access static resources:  * `none` — Do not use a CDN.  * `default` — Use the Amazon CloudFront CDN for users **except** Chinese Mainland users. Chinese Mainland users will use the Wangsu CDN (China).  * `wangsu` — Use the Wangsu CDN for all users.
     *
     * @return self
     */
    public function setUseCdn($use_cdn)
    {
        $allowedValues = $this->getUseCdnAllowableValues();
        if (!is_null($use_cdn) && !in_array($use_cdn, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'use_cdn', must be one of '%s'",
                    $use_cdn,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['use_cdn'] = $use_cdn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


