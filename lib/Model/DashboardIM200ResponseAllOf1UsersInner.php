<?php
/**
 * DashboardIM200ResponseAllOf1UsersInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * DashboardIM200ResponseAllOf1UsersInner Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DashboardIM200ResponseAllOf1UsersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dashboardIM_200_response_allOf_1_users_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'calls_receive' => 'int',
        'calls_send' => 'int',
        'email' => 'string',
        'emoji_receive' => 'int',
        'emoji_send' => 'int',
        'files_receive' => 'int',
        'files_send' => 'int',
        'group_receive' => 'int',
        'group_send' => 'int',
        'images_receive' => 'int',
        'images_send' => 'int',
        'total_receive' => 'int',
        'total_send' => 'int',
        'user_id' => 'string',
        'user_name' => 'string',
        'videos_receive' => 'int',
        'videos_send' => 'int',
        'voice_receive' => 'int',
        'voice_send' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'calls_receive' => null,
        'calls_send' => null,
        'email' => 'email',
        'emoji_receive' => null,
        'emoji_send' => null,
        'files_receive' => null,
        'files_send' => null,
        'group_receive' => null,
        'group_send' => null,
        'images_receive' => null,
        'images_send' => null,
        'total_receive' => null,
        'total_send' => null,
        'user_id' => null,
        'user_name' => null,
        'videos_receive' => null,
        'videos_send' => null,
        'voice_receive' => null,
        'voice_send' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'calls_receive' => 'calls_receive',
        'calls_send' => 'calls_send',
        'email' => 'email',
        'emoji_receive' => 'emoji_receive',
        'emoji_send' => 'emoji_send',
        'files_receive' => 'files_receive',
        'files_send' => 'files_send',
        'group_receive' => 'group_receive',
        'group_send' => 'group_send',
        'images_receive' => 'images_receive',
        'images_send' => 'images_send',
        'total_receive' => 'total_receive',
        'total_send' => 'total_send',
        'user_id' => 'user_id',
        'user_name' => 'user_name',
        'videos_receive' => 'videos_receive',
        'videos_send' => 'videos_send',
        'voice_receive' => 'voice_receive',
        'voice_send' => 'voice_send'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'calls_receive' => 'setCallsReceive',
        'calls_send' => 'setCallsSend',
        'email' => 'setEmail',
        'emoji_receive' => 'setEmojiReceive',
        'emoji_send' => 'setEmojiSend',
        'files_receive' => 'setFilesReceive',
        'files_send' => 'setFilesSend',
        'group_receive' => 'setGroupReceive',
        'group_send' => 'setGroupSend',
        'images_receive' => 'setImagesReceive',
        'images_send' => 'setImagesSend',
        'total_receive' => 'setTotalReceive',
        'total_send' => 'setTotalSend',
        'user_id' => 'setUserId',
        'user_name' => 'setUserName',
        'videos_receive' => 'setVideosReceive',
        'videos_send' => 'setVideosSend',
        'voice_receive' => 'setVoiceReceive',
        'voice_send' => 'setVoiceSend'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'calls_receive' => 'getCallsReceive',
        'calls_send' => 'getCallsSend',
        'email' => 'getEmail',
        'emoji_receive' => 'getEmojiReceive',
        'emoji_send' => 'getEmojiSend',
        'files_receive' => 'getFilesReceive',
        'files_send' => 'getFilesSend',
        'group_receive' => 'getGroupReceive',
        'group_send' => 'getGroupSend',
        'images_receive' => 'getImagesReceive',
        'images_send' => 'getImagesSend',
        'total_receive' => 'getTotalReceive',
        'total_send' => 'getTotalSend',
        'user_id' => 'getUserId',
        'user_name' => 'getUserName',
        'videos_receive' => 'getVideosReceive',
        'videos_send' => 'getVideosSend',
        'voice_receive' => 'getVoiceReceive',
        'voice_send' => 'getVoiceSend'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['calls_receive'] = $data['calls_receive'] ?? null;
        $this->container['calls_send'] = $data['calls_send'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['emoji_receive'] = $data['emoji_receive'] ?? null;
        $this->container['emoji_send'] = $data['emoji_send'] ?? null;
        $this->container['files_receive'] = $data['files_receive'] ?? null;
        $this->container['files_send'] = $data['files_send'] ?? null;
        $this->container['group_receive'] = $data['group_receive'] ?? null;
        $this->container['group_send'] = $data['group_send'] ?? null;
        $this->container['images_receive'] = $data['images_receive'] ?? null;
        $this->container['images_send'] = $data['images_send'] ?? null;
        $this->container['total_receive'] = $data['total_receive'] ?? null;
        $this->container['total_send'] = $data['total_send'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['user_name'] = $data['user_name'] ?? null;
        $this->container['videos_receive'] = $data['videos_receive'] ?? null;
        $this->container['videos_send'] = $data['videos_send'] ?? null;
        $this->container['voice_receive'] = $data['voice_receive'] ?? null;
        $this->container['voice_send'] = $data['voice_send'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets calls_receive
     *
     * @return int|null
     */
    public function getCallsReceive()
    {
        return $this->container['calls_receive'];
    }

    /**
     * Sets calls_receive
     *
     * @param int|null $calls_receive Total number of instant meeting calls received by the user.
     *
     * @return self
     */
    public function setCallsReceive($calls_receive)
    {
        $this->container['calls_receive'] = $calls_receive;

        return $this;
    }

    /**
     * Gets calls_send
     *
     * @return int|null
     */
    public function getCallsSend()
    {
        return $this->container['calls_send'];
    }

    /**
     * Sets calls_send
     *
     * @param int|null $calls_send Total number of instant meeting calls made by the user.
     *
     * @return self
     */
    public function setCallsSend($calls_send)
    {
        $this->container['calls_send'] = $calls_send;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email User email.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets emoji_receive
     *
     * @return int|null
     */
    public function getEmojiReceive()
    {
        return $this->container['emoji_receive'];
    }

    /**
     * Sets emoji_receive
     *
     * @param int|null $emoji_receive Total number of emojis received by the user.
     *
     * @return self
     */
    public function setEmojiReceive($emoji_receive)
    {
        $this->container['emoji_receive'] = $emoji_receive;

        return $this;
    }

    /**
     * Gets emoji_send
     *
     * @return int|null
     */
    public function getEmojiSend()
    {
        return $this->container['emoji_send'];
    }

    /**
     * Sets emoji_send
     *
     * @param int|null $emoji_send Total number of emojis sent by the user.
     *
     * @return self
     */
    public function setEmojiSend($emoji_send)
    {
        $this->container['emoji_send'] = $emoji_send;

        return $this;
    }

    /**
     * Gets files_receive
     *
     * @return int|null
     */
    public function getFilesReceive()
    {
        return $this->container['files_receive'];
    }

    /**
     * Sets files_receive
     *
     * @param int|null $files_receive Total number of files received by the user.
     *
     * @return self
     */
    public function setFilesReceive($files_receive)
    {
        $this->container['files_receive'] = $files_receive;

        return $this;
    }

    /**
     * Gets files_send
     *
     * @return int|null
     */
    public function getFilesSend()
    {
        return $this->container['files_send'];
    }

    /**
     * Sets files_send
     *
     * @param int|null $files_send Total number of files sent by the user.
     *
     * @return self
     */
    public function setFilesSend($files_send)
    {
        $this->container['files_send'] = $files_send;

        return $this;
    }

    /**
     * Gets group_receive
     *
     * @return int|null
     */
    public function getGroupReceive()
    {
        return $this->container['group_receive'];
    }

    /**
     * Sets group_receive
     *
     * @param int|null $group_receive Total number of messages received by the user in channels.
     *
     * @return self
     */
    public function setGroupReceive($group_receive)
    {
        $this->container['group_receive'] = $group_receive;

        return $this;
    }

    /**
     * Gets group_send
     *
     * @return int|null
     */
    public function getGroupSend()
    {
        return $this->container['group_send'];
    }

    /**
     * Sets group_send
     *
     * @param int|null $group_send Total number of messages sent by the user in channels.
     *
     * @return self
     */
    public function setGroupSend($group_send)
    {
        $this->container['group_send'] = $group_send;

        return $this;
    }

    /**
     * Gets images_receive
     *
     * @return int|null
     */
    public function getImagesReceive()
    {
        return $this->container['images_receive'];
    }

    /**
     * Sets images_receive
     *
     * @param int|null $images_receive Total number of images received by the user.
     *
     * @return self
     */
    public function setImagesReceive($images_receive)
    {
        $this->container['images_receive'] = $images_receive;

        return $this;
    }

    /**
     * Gets images_send
     *
     * @return int|null
     */
    public function getImagesSend()
    {
        return $this->container['images_send'];
    }

    /**
     * Sets images_send
     *
     * @param int|null $images_send Total number of images sent by the user.
     *
     * @return self
     */
    public function setImagesSend($images_send)
    {
        $this->container['images_send'] = $images_send;

        return $this;
    }

    /**
     * Gets total_receive
     *
     * @return int|null
     */
    public function getTotalReceive()
    {
        return $this->container['total_receive'];
    }

    /**
     * Sets total_receive
     *
     * @param int|null $total_receive Total number of messages received by the user.
     *
     * @return self
     */
    public function setTotalReceive($total_receive)
    {
        $this->container['total_receive'] = $total_receive;

        return $this;
    }

    /**
     * Gets total_send
     *
     * @return int|null
     */
    public function getTotalSend()
    {
        return $this->container['total_send'];
    }

    /**
     * Sets total_send
     *
     * @param int|null $total_send Total number of messages sent by the user.
     *
     * @return self
     */
    public function setTotalSend($total_send)
    {
        $this->container['total_send'] = $total_send;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id User ID.
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name User display name.
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets videos_receive
     *
     * @return int|null
     */
    public function getVideosReceive()
    {
        return $this->container['videos_receive'];
    }

    /**
     * Sets videos_receive
     *
     * @param int|null $videos_receive Total number of video files received by the user.
     *
     * @return self
     */
    public function setVideosReceive($videos_receive)
    {
        $this->container['videos_receive'] = $videos_receive;

        return $this;
    }

    /**
     * Gets videos_send
     *
     * @return int|null
     */
    public function getVideosSend()
    {
        return $this->container['videos_send'];
    }

    /**
     * Sets videos_send
     *
     * @param int|null $videos_send Total number of video files sent by the user.
     *
     * @return self
     */
    public function setVideosSend($videos_send)
    {
        $this->container['videos_send'] = $videos_send;

        return $this;
    }

    /**
     * Gets voice_receive
     *
     * @return int|null
     */
    public function getVoiceReceive()
    {
        return $this->container['voice_receive'];
    }

    /**
     * Sets voice_receive
     *
     * @param int|null $voice_receive Total number of voice files received by the user.
     *
     * @return self
     */
    public function setVoiceReceive($voice_receive)
    {
        $this->container['voice_receive'] = $voice_receive;

        return $this;
    }

    /**
     * Gets voice_send
     *
     * @return int|null
     */
    public function getVoiceSend()
    {
        return $this->container['voice_send'];
    }

    /**
     * Sets voice_send
     *
     * @param int|null $voice_send Total number of voice files sent by the user.
     *
     * @return self
     */
    public function setVoiceSend($voice_send)
    {
        $this->container['voice_send'] = $voice_send;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


