<?php
/**
 * Users200ResponseUsersInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * Users200ResponseUsersInner Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Users200ResponseUsersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'users_200_response_users_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_at' => '\DateTime',
        'custom_attributes' => '\Zoom\Api\Model\Users200ResponseUsersInnerCustomAttributesInner[]',
        'dept' => 'string',
        'email' => 'string',
        'employee_unique_id' => 'string',
        'first_name' => 'string',
        'group_ids' => 'string[]',
        'id' => 'string',
        'im_group_ids' => 'string[]',
        'last_client_version' => 'string',
        'last_login_time' => '\DateTime',
        'last_name' => 'string',
        'plan_united_type' => 'string',
        'pmi' => 'int',
        'role_id' => 'string',
        'status' => 'string',
        'timezone' => 'string',
        'type' => 'int',
        'verified' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_at' => 'date-time',
        'custom_attributes' => null,
        'dept' => null,
        'email' => 'email',
        'employee_unique_id' => null,
        'first_name' => null,
        'group_ids' => null,
        'id' => null,
        'im_group_ids' => null,
        'last_client_version' => null,
        'last_login_time' => 'date-time',
        'last_name' => null,
        'plan_united_type' => null,
        'pmi' => 'int64',
        'role_id' => null,
        'status' => null,
        'timezone' => null,
        'type' => null,
        'verified' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'created_at',
        'custom_attributes' => 'custom_attributes',
        'dept' => 'dept',
        'email' => 'email',
        'employee_unique_id' => 'employee_unique_id',
        'first_name' => 'first_name',
        'group_ids' => 'group_ids',
        'id' => 'id',
        'im_group_ids' => 'im_group_ids',
        'last_client_version' => 'last_client_version',
        'last_login_time' => 'last_login_time',
        'last_name' => 'last_name',
        'plan_united_type' => 'plan_united_type',
        'pmi' => 'pmi',
        'role_id' => 'role_id',
        'status' => 'status',
        'timezone' => 'timezone',
        'type' => 'type',
        'verified' => 'verified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'custom_attributes' => 'setCustomAttributes',
        'dept' => 'setDept',
        'email' => 'setEmail',
        'employee_unique_id' => 'setEmployeeUniqueId',
        'first_name' => 'setFirstName',
        'group_ids' => 'setGroupIds',
        'id' => 'setId',
        'im_group_ids' => 'setImGroupIds',
        'last_client_version' => 'setLastClientVersion',
        'last_login_time' => 'setLastLoginTime',
        'last_name' => 'setLastName',
        'plan_united_type' => 'setPlanUnitedType',
        'pmi' => 'setPmi',
        'role_id' => 'setRoleId',
        'status' => 'setStatus',
        'timezone' => 'setTimezone',
        'type' => 'setType',
        'verified' => 'setVerified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'custom_attributes' => 'getCustomAttributes',
        'dept' => 'getDept',
        'email' => 'getEmail',
        'employee_unique_id' => 'getEmployeeUniqueId',
        'first_name' => 'getFirstName',
        'group_ids' => 'getGroupIds',
        'id' => 'getId',
        'im_group_ids' => 'getImGroupIds',
        'last_client_version' => 'getLastClientVersion',
        'last_login_time' => 'getLastLoginTime',
        'last_name' => 'getLastName',
        'plan_united_type' => 'getPlanUnitedType',
        'pmi' => 'getPmi',
        'role_id' => 'getRoleId',
        'status' => 'getStatus',
        'timezone' => 'getTimezone',
        'type' => 'getType',
        'verified' => 'getVerified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PLAN_UNITED_TYPE__1 = '1';
    public const PLAN_UNITED_TYPE__2 = '2';
    public const PLAN_UNITED_TYPE__4 = '4';
    public const PLAN_UNITED_TYPE__8 = '8';
    public const PLAN_UNITED_TYPE__16 = '16';
    public const PLAN_UNITED_TYPE__32 = '32';
    public const PLAN_UNITED_TYPE__64 = '64';
    public const PLAN_UNITED_TYPE__128 = '128';
    public const PLAN_UNITED_TYPE__256 = '256';
    public const PLAN_UNITED_TYPE__512 = '512';
    public const PLAN_UNITED_TYPE__1024 = '1024';
    public const PLAN_UNITED_TYPE__2048 = '2048';
    public const PLAN_UNITED_TYPE__4096 = '4096';
    public const PLAN_UNITED_TYPE__8192 = '8192';
    public const PLAN_UNITED_TYPE__16384 = '16384';
    public const PLAN_UNITED_TYPE__32768 = '32768';
    public const PLAN_UNITED_TYPE__65536 = '65536';
    public const PLAN_UNITED_TYPE__131072 = '131072';
    public const STATUS_ACTIVE = 'active';
    public const STATUS_INACTIVE = 'inactive';
    public const STATUS_PENDING = 'pending';
    public const TYPE_1 = 1;
    public const TYPE_2 = 2;
    public const TYPE_3 = 3;
    public const TYPE_99 = 99;
    public const VERIFIED_1 = 1;
    public const VERIFIED_0 = 0;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlanUnitedTypeAllowableValues()
    {
        return [
            self::PLAN_UNITED_TYPE__1,
            self::PLAN_UNITED_TYPE__2,
            self::PLAN_UNITED_TYPE__4,
            self::PLAN_UNITED_TYPE__8,
            self::PLAN_UNITED_TYPE__16,
            self::PLAN_UNITED_TYPE__32,
            self::PLAN_UNITED_TYPE__64,
            self::PLAN_UNITED_TYPE__128,
            self::PLAN_UNITED_TYPE__256,
            self::PLAN_UNITED_TYPE__512,
            self::PLAN_UNITED_TYPE__1024,
            self::PLAN_UNITED_TYPE__2048,
            self::PLAN_UNITED_TYPE__4096,
            self::PLAN_UNITED_TYPE__8192,
            self::PLAN_UNITED_TYPE__16384,
            self::PLAN_UNITED_TYPE__32768,
            self::PLAN_UNITED_TYPE__65536,
            self::PLAN_UNITED_TYPE__131072,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
            self::STATUS_PENDING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_1,
            self::TYPE_2,
            self::TYPE_3,
            self::TYPE_99,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerifiedAllowableValues()
    {
        return [
            self::VERIFIED_1,
            self::VERIFIED_0,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['custom_attributes'] = $data['custom_attributes'] ?? null;
        $this->container['dept'] = $data['dept'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['employee_unique_id'] = $data['employee_unique_id'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['group_ids'] = $data['group_ids'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['im_group_ids'] = $data['im_group_ids'] ?? null;
        $this->container['last_client_version'] = $data['last_client_version'] ?? null;
        $this->container['last_login_time'] = $data['last_login_time'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['plan_united_type'] = $data['plan_united_type'] ?? null;
        $this->container['pmi'] = $data['pmi'] ?? null;
        $this->container['role_id'] = $data['role_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['verified'] = $data['verified'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['dept']) && (mb_strlen($this->container['dept']) > 128)) {
            $invalidProperties[] = "invalid value for 'dept', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getPlanUnitedTypeAllowableValues();
        if (!is_null($this->container['plan_united_type']) && !in_array($this->container['plan_united_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'plan_united_type', must be one of '%s'",
                $this->container['plan_united_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVerifiedAllowableValues();
        if (!is_null($this->container['verified']) && !in_array($this->container['verified'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'verified', must be one of '%s'",
                $this->container['verified'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The time at which the user's account was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \Zoom\Api\Model\Users200ResponseUsersInnerCustomAttributesInner[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \Zoom\Api\Model\Users200ResponseUsersInnerCustomAttributesInner[]|null $custom_attributes Information about the user's custom attributes.  This field is **only** returned if users are assigned custom attributes and you provided the `custom_attributes` value for the `include_fields` query parameter in the API request.
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets dept
     *
     * @return string|null
     */
    public function getDept()
    {
        return $this->container['dept'];
    }

    /**
     * Sets dept
     *
     * @param string|null $dept The user's department.
     *
     * @return self
     */
    public function setDept($dept)
    {
        if (!is_null($dept) && (mb_strlen($dept) > 128)) {
            throw new \InvalidArgumentException('invalid length for $dept when calling Users200ResponseUsersInner., must be smaller than or equal to 128.');
        }

        $this->container['dept'] = $dept;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The user's email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets employee_unique_id
     *
     * @return string|null
     */
    public function getEmployeeUniqueId()
    {
        return $this->container['employee_unique_id'];
    }

    /**
     * Sets employee_unique_id
     *
     * @param string|null $employee_unique_id The employee's unique ID. The this field only returns when:  * SAML single sign-on (SSO) is enabled.  * The `login_type` value is `101` (SSO).
     *
     * @return self
     */
    public function setEmployeeUniqueId($employee_unique_id)
    {
        $this->container['employee_unique_id'] = $employee_unique_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The user's first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Users200ResponseUsersInner., must be smaller than or equal to 64.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return string[]|null
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param string[]|null $group_ids The IDs of groups where the user is a member.
     *
     * @return self
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The user's ID.   The API does **not** return this value for users with the `pending` status.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets im_group_ids
     *
     * @return string[]|null
     */
    public function getImGroupIds()
    {
        return $this->container['im_group_ids'];
    }

    /**
     * Sets im_group_ids
     *
     * @param string[]|null $im_group_ids The IDs of IM directory groups where the user is a member.
     *
     * @return self
     */
    public function setImGroupIds($im_group_ids)
    {
        $this->container['im_group_ids'] = $im_group_ids;

        return $this;
    }

    /**
     * Gets last_client_version
     *
     * @return string|null
     */
    public function getLastClientVersion()
    {
        return $this->container['last_client_version'];
    }

    /**
     * Sets last_client_version
     *
     * @param string|null $last_client_version The last client version that user used to log in.
     *
     * @return self
     */
    public function setLastClientVersion($last_client_version)
    {
        $this->container['last_client_version'] = $last_client_version;

        return $this;
    }

    /**
     * Gets last_login_time
     *
     * @return \DateTime|null
     */
    public function getLastLoginTime()
    {
        return $this->container['last_login_time'];
    }

    /**
     * Sets last_login_time
     *
     * @param \DateTime|null $last_login_time The user's last login time. This field has a three-day buffer period.  For example, if user first logged in on `2020-01-01` and then logged out and logged in on `2020-01-02`, this value will still reflect the login time of `2020-01-01`. However, if the user logs in on `2020-01-04`, the value of this field will reflect the corresponding login time since it exceeds the three-day buffer period.
     *
     * @return self
     */
    public function setLastLoginTime($last_login_time)
    {
        $this->container['last_login_time'] = $last_login_time;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The user's last name.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Users200ResponseUsersInner., must be smaller than or equal to 64.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets plan_united_type
     *
     * @return string|null
     */
    public function getPlanUnitedType()
    {
        return $this->container['plan_united_type'];
    }

    /**
     * Sets plan_united_type
     *
     * @param string|null $plan_united_type This field is returned if the user is enrolled in the [Zoom United](https://zoom.us/pricing/zoom-bundles) plan. The license option:  * `1` — Zoom United Pro-United with US/CA Unlimited.  * `2` — Zoom United Pro-United with UK/IR Unlimited.  * `4` — Zoom United Pro-United with AU/NZ Unlimited.  * `8` — Zoom United Pro-United with Global Select.  * `16` — Zoom United Pro-United with Zoom Phone Pro.  * `32` — Zoom United Biz-United with US/CA Unlimited.  * `64` — Zoom United Biz-United with UK/IR Unlimited.  * `128` — Zoom United Biz-United with AU/NZ Unlimited.  * `256` — Zoom United Biz-United with Global Select.  * `512` — Zoom United Biz-United with Zoom Phone Pro.  * `1024` — Zoom United Ent-United with US/CA Unlimited.  * `2048` — Zoom United Ent-United with UK/IR Unlimited.  * `4096` — Zoom United Ent-United with AU/NZ Unlimited.  * `8192` — Zoom United Ent-United with Global Select.  * `16384` — Zoom United Ent-United with Zoom Phone Pro.  * `32768` — Zoom United Pro-United with JP Unlimited.  * `65536` — Zoom United Biz-United with JP Unlimited.  * `131072` — Zoom United Ent-United with JP Unlimited.
     *
     * @return self
     */
    public function setPlanUnitedType($plan_united_type)
    {
        $allowedValues = $this->getPlanUnitedTypeAllowableValues();
        if (!is_null($plan_united_type) && !in_array($plan_united_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'plan_united_type', must be one of '%s'",
                    $plan_united_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['plan_united_type'] = $plan_united_type;

        return $this;
    }

    /**
     * Gets pmi
     *
     * @return int|null
     */
    public function getPmi()
    {
        return $this->container['pmi'];
    }

    /**
     * Sets pmi
     *
     * @param int|null $pmi The user's [Personal Meeting ID (PMI)](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#understanding-personal-meeting-id-pmi).
     *
     * @return self
     */
    public function setPmi($pmi)
    {
        $this->container['pmi'] = $pmi;

        return $this;
    }

    /**
     * Gets role_id
     *
     * @return string|null
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     *
     * @param string|null $role_id The unique ID of the user's assigned [role](/docs/api-reference/zoom-api/methods#operation/roles).
     *
     * @return self
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The user's status:  * `active` — An active user.  * `inactive` — A deactivated user.  * `pending` — A pending user.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone The user's timezone.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type The user's assigned plan type:  * `1` — Basic.  * `2` — Licensed.  * `3` — On-prem.  * `99` — None (this can only be set with `ssoCreate`).
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return int|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param int|null $verified Display whether the user's email address for the Zoom account is verified:  * `1` — A verified user email.  * `0` — The user's email **not** verified.
     *
     * @return self
     */
    public function setVerified($verified)
    {
        $allowedValues = $this->getVerifiedAllowableValues();
        if (!is_null($verified) && !in_array($verified, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'verified', must be one of '%s'",
                    $verified,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verified'] = $verified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


