<?php
/**
 * GetGroupSettings200ResponseOneOfRecordingArchiveSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * GetGroupSettings200ResponseOneOfRecordingArchiveSettings Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetGroupSettings200ResponseOneOfRecordingArchiveSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getGroupSettings_200_response_oneOf_recording_archive_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'audio_file' => 'bool',
        'cc_transcript_file' => 'bool',
        'chat_file' => 'bool',
        'chat_with_sender_email' => 'bool',
        'video_file' => 'bool',
        'chat_with_direct_message' => 'bool',
        'archive_retention' => 'int',
        'action_when_archive_failed' => 'int',
        'notification_when_archiving_starts' => 'string',
        'play_voice_prompt_when_archiving_starts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'audio_file' => null,
        'cc_transcript_file' => null,
        'chat_file' => null,
        'chat_with_sender_email' => null,
        'video_file' => null,
        'chat_with_direct_message' => null,
        'archive_retention' => null,
        'action_when_archive_failed' => null,
        'notification_when_archiving_starts' => null,
        'play_voice_prompt_when_archiving_starts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_file' => 'audio_file',
        'cc_transcript_file' => 'cc_transcript_file',
        'chat_file' => 'chat_file',
        'chat_with_sender_email' => 'chat_with_sender_email',
        'video_file' => 'video_file',
        'chat_with_direct_message' => 'chat_with_direct_message',
        'archive_retention' => 'archive_retention',
        'action_when_archive_failed' => 'action_when_archive_failed',
        'notification_when_archiving_starts' => 'notification_when_archiving_starts',
        'play_voice_prompt_when_archiving_starts' => 'play_voice_prompt_when_archiving_starts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_file' => 'setAudioFile',
        'cc_transcript_file' => 'setCcTranscriptFile',
        'chat_file' => 'setChatFile',
        'chat_with_sender_email' => 'setChatWithSenderEmail',
        'video_file' => 'setVideoFile',
        'chat_with_direct_message' => 'setChatWithDirectMessage',
        'archive_retention' => 'setArchiveRetention',
        'action_when_archive_failed' => 'setActionWhenArchiveFailed',
        'notification_when_archiving_starts' => 'setNotificationWhenArchivingStarts',
        'play_voice_prompt_when_archiving_starts' => 'setPlayVoicePromptWhenArchivingStarts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_file' => 'getAudioFile',
        'cc_transcript_file' => 'getCcTranscriptFile',
        'chat_file' => 'getChatFile',
        'chat_with_sender_email' => 'getChatWithSenderEmail',
        'video_file' => 'getVideoFile',
        'chat_with_direct_message' => 'getChatWithDirectMessage',
        'archive_retention' => 'getArchiveRetention',
        'action_when_archive_failed' => 'getActionWhenArchiveFailed',
        'notification_when_archiving_starts' => 'getNotificationWhenArchivingStarts',
        'play_voice_prompt_when_archiving_starts' => 'getPlayVoicePromptWhenArchivingStarts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ARCHIVE_RETENTION_1 = 1;
    public const ARCHIVE_RETENTION_2 = 2;
    public const ARCHIVE_RETENTION_3 = 3;
    public const ARCHIVE_RETENTION_4 = 4;
    public const ARCHIVE_RETENTION_5 = 5;
    public const ARCHIVE_RETENTION_6 = 6;
    public const ARCHIVE_RETENTION_7 = 7;
    public const ARCHIVE_RETENTION_8 = 8;
    public const ARCHIVE_RETENTION_9 = 9;
    public const ARCHIVE_RETENTION_10 = 10;
    public const ARCHIVE_RETENTION_11 = 11;
    public const ARCHIVE_RETENTION_12 = 12;
    public const ARCHIVE_RETENTION_13 = 13;
    public const ARCHIVE_RETENTION_14 = 14;
    public const ARCHIVE_RETENTION_15 = 15;
    public const ARCHIVE_RETENTION_16 = 16;
    public const ARCHIVE_RETENTION_17 = 17;
    public const ARCHIVE_RETENTION_18 = 18;
    public const ARCHIVE_RETENTION_19 = 19;
    public const ARCHIVE_RETENTION_20 = 20;
    public const ARCHIVE_RETENTION_21 = 21;
    public const ARCHIVE_RETENTION_22 = 22;
    public const ARCHIVE_RETENTION_23 = 23;
    public const ARCHIVE_RETENTION_24 = 24;
    public const ARCHIVE_RETENTION_25 = 25;
    public const ARCHIVE_RETENTION_26 = 26;
    public const ARCHIVE_RETENTION_27 = 27;
    public const ARCHIVE_RETENTION_28 = 28;
    public const ARCHIVE_RETENTION_29 = 29;
    public const ARCHIVE_RETENTION_30 = 30;
    public const ACTION_WHEN_ARCHIVE_FAILED_1 = 1;
    public const ACTION_WHEN_ARCHIVE_FAILED_2 = 2;
    public const NOTIFICATION_WHEN_ARCHIVING_STARTS_PARTICIPANTS = 'participants';
    public const NOTIFICATION_WHEN_ARCHIVING_STARTS_GUEST = 'guest';
    public const PLAY_VOICE_PROMPT_WHEN_ARCHIVING_STARTS_PARTICIPANTS = 'participants';
    public const PLAY_VOICE_PROMPT_WHEN_ARCHIVING_STARTS_GUEST = 'guest';
    public const PLAY_VOICE_PROMPT_WHEN_ARCHIVING_STARTS_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArchiveRetentionAllowableValues()
    {
        return [
            self::ARCHIVE_RETENTION_1,
            self::ARCHIVE_RETENTION_2,
            self::ARCHIVE_RETENTION_3,
            self::ARCHIVE_RETENTION_4,
            self::ARCHIVE_RETENTION_5,
            self::ARCHIVE_RETENTION_6,
            self::ARCHIVE_RETENTION_7,
            self::ARCHIVE_RETENTION_8,
            self::ARCHIVE_RETENTION_9,
            self::ARCHIVE_RETENTION_10,
            self::ARCHIVE_RETENTION_11,
            self::ARCHIVE_RETENTION_12,
            self::ARCHIVE_RETENTION_13,
            self::ARCHIVE_RETENTION_14,
            self::ARCHIVE_RETENTION_15,
            self::ARCHIVE_RETENTION_16,
            self::ARCHIVE_RETENTION_17,
            self::ARCHIVE_RETENTION_18,
            self::ARCHIVE_RETENTION_19,
            self::ARCHIVE_RETENTION_20,
            self::ARCHIVE_RETENTION_21,
            self::ARCHIVE_RETENTION_22,
            self::ARCHIVE_RETENTION_23,
            self::ARCHIVE_RETENTION_24,
            self::ARCHIVE_RETENTION_25,
            self::ARCHIVE_RETENTION_26,
            self::ARCHIVE_RETENTION_27,
            self::ARCHIVE_RETENTION_28,
            self::ARCHIVE_RETENTION_29,
            self::ARCHIVE_RETENTION_30,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionWhenArchiveFailedAllowableValues()
    {
        return [
            self::ACTION_WHEN_ARCHIVE_FAILED_1,
            self::ACTION_WHEN_ARCHIVE_FAILED_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNotificationWhenArchivingStartsAllowableValues()
    {
        return [
            self::NOTIFICATION_WHEN_ARCHIVING_STARTS_PARTICIPANTS,
            self::NOTIFICATION_WHEN_ARCHIVING_STARTS_GUEST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlayVoicePromptWhenArchivingStartsAllowableValues()
    {
        return [
            self::PLAY_VOICE_PROMPT_WHEN_ARCHIVING_STARTS_PARTICIPANTS,
            self::PLAY_VOICE_PROMPT_WHEN_ARCHIVING_STARTS_GUEST,
            self::PLAY_VOICE_PROMPT_WHEN_ARCHIVING_STARTS_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_file'] = $data['audio_file'] ?? null;
        $this->container['cc_transcript_file'] = $data['cc_transcript_file'] ?? null;
        $this->container['chat_file'] = $data['chat_file'] ?? null;
        $this->container['chat_with_sender_email'] = $data['chat_with_sender_email'] ?? null;
        $this->container['video_file'] = $data['video_file'] ?? null;
        $this->container['chat_with_direct_message'] = $data['chat_with_direct_message'] ?? null;
        $this->container['archive_retention'] = $data['archive_retention'] ?? null;
        $this->container['action_when_archive_failed'] = $data['action_when_archive_failed'] ?? null;
        $this->container['notification_when_archiving_starts'] = $data['notification_when_archiving_starts'] ?? null;
        $this->container['play_voice_prompt_when_archiving_starts'] = $data['play_voice_prompt_when_archiving_starts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getArchiveRetentionAllowableValues();
        if (!is_null($this->container['archive_retention']) && !in_array($this->container['archive_retention'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'archive_retention', must be one of '%s'",
                $this->container['archive_retention'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionWhenArchiveFailedAllowableValues();
        if (!is_null($this->container['action_when_archive_failed']) && !in_array($this->container['action_when_archive_failed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action_when_archive_failed', must be one of '%s'",
                $this->container['action_when_archive_failed'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNotificationWhenArchivingStartsAllowableValues();
        if (!is_null($this->container['notification_when_archiving_starts']) && !in_array($this->container['notification_when_archiving_starts'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'notification_when_archiving_starts', must be one of '%s'",
                $this->container['notification_when_archiving_starts'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPlayVoicePromptWhenArchivingStartsAllowableValues();
        if (!is_null($this->container['play_voice_prompt_when_archiving_starts']) && !in_array($this->container['play_voice_prompt_when_archiving_starts'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'play_voice_prompt_when_archiving_starts', must be one of '%s'",
                $this->container['play_voice_prompt_when_archiving_starts'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio_file
     *
     * @return bool|null
     */
    public function getAudioFile()
    {
        return $this->container['audio_file'];
    }

    /**
     * Sets audio_file
     *
     * @param bool|null $audio_file Include in-meeting and/or in-webinar audio in the archive.
     *
     * @return self
     */
    public function setAudioFile($audio_file)
    {
        $this->container['audio_file'] = $audio_file;

        return $this;
    }

    /**
     * Gets cc_transcript_file
     *
     * @return bool|null
     */
    public function getCcTranscriptFile()
    {
        return $this->container['cc_transcript_file'];
    }

    /**
     * Sets cc_transcript_file
     *
     * @param bool|null $cc_transcript_file Include closed caption or transcript in the archive.
     *
     * @return self
     */
    public function setCcTranscriptFile($cc_transcript_file)
    {
        $this->container['cc_transcript_file'] = $cc_transcript_file;

        return $this;
    }

    /**
     * Gets chat_file
     *
     * @return bool|null
     */
    public function getChatFile()
    {
        return $this->container['chat_file'];
    }

    /**
     * Sets chat_file
     *
     * @param bool|null $chat_file Include in-meeting chat in the archive.
     *
     * @return self
     */
    public function setChatFile($chat_file)
    {
        $this->container['chat_file'] = $chat_file;

        return $this;
    }

    /**
     * Gets chat_with_sender_email
     *
     * @return bool|null
     */
    public function getChatWithSenderEmail()
    {
        return $this->container['chat_with_sender_email'];
    }

    /**
     * Sets chat_with_sender_email
     *
     * @param bool|null $chat_with_sender_email Include user email in in-meeting chat file.
     *
     * @return self
     */
    public function setChatWithSenderEmail($chat_with_sender_email)
    {
        $this->container['chat_with_sender_email'] = $chat_with_sender_email;

        return $this;
    }

    /**
     * Gets video_file
     *
     * @return bool|null
     */
    public function getVideoFile()
    {
        return $this->container['video_file'];
    }

    /**
     * Sets video_file
     *
     * @param bool|null $video_file Include in-meeting and/or in-webinar video in the archive.
     *
     * @return self
     */
    public function setVideoFile($video_file)
    {
        $this->container['video_file'] = $video_file;

        return $this;
    }

    /**
     * Gets chat_with_direct_message
     *
     * @return bool|null
     */
    public function getChatWithDirectMessage()
    {
        return $this->container['chat_with_direct_message'];
    }

    /**
     * Sets chat_with_direct_message
     *
     * @param bool|null $chat_with_direct_message Include direct message in in-meeting chat file.
     *
     * @return self
     */
    public function setChatWithDirectMessage($chat_with_direct_message)
    {
        $this->container['chat_with_direct_message'] = $chat_with_direct_message;

        return $this;
    }

    /**
     * Gets archive_retention
     *
     * @return int|null
     */
    public function getArchiveRetention()
    {
        return $this->container['archive_retention'];
    }

    /**
     * Sets archive_retention
     *
     * @param int|null $archive_retention The retention period for archiving content, in days.
     *
     * @return self
     */
    public function setArchiveRetention($archive_retention)
    {
        $allowedValues = $this->getArchiveRetentionAllowableValues();
        if (!is_null($archive_retention) && !in_array($archive_retention, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'archive_retention', must be one of '%s'",
                    $archive_retention,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['archive_retention'] = $archive_retention;

        return $this;
    }

    /**
     * Gets action_when_archive_failed
     *
     * @return int|null
     */
    public function getActionWhenArchiveFailed()
    {
        return $this->container['action_when_archive_failed'];
    }

    /**
     * Sets action_when_archive_failed
     *
     * @param int|null $action_when_archive_failed Perform the action when meetings or webinars cannot be archived.<br>`1` - Participants can stay in the meeting and will receive a notification.<br>`2` - Nobody can join or stay in the meeting.
     *
     * @return self
     */
    public function setActionWhenArchiveFailed($action_when_archive_failed)
    {
        $allowedValues = $this->getActionWhenArchiveFailedAllowableValues();
        if (!is_null($action_when_archive_failed) && !in_array($action_when_archive_failed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action_when_archive_failed', must be one of '%s'",
                    $action_when_archive_failed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_when_archive_failed'] = $action_when_archive_failed;

        return $this;
    }

    /**
     * Gets notification_when_archiving_starts
     *
     * @return string|null
     */
    public function getNotificationWhenArchivingStarts()
    {
        return $this->container['notification_when_archiving_starts'];
    }

    /**
     * Sets notification_when_archiving_starts
     *
     * @param string|null $notification_when_archiving_starts Show notification when video or audio archiving starts.<br>`1` - Participants can stay in the meeting and will receive a notification.<br>`2` - Nobody can join or stay in the meeting.
     *
     * @return self
     */
    public function setNotificationWhenArchivingStarts($notification_when_archiving_starts)
    {
        $allowedValues = $this->getNotificationWhenArchivingStartsAllowableValues();
        if (!is_null($notification_when_archiving_starts) && !in_array($notification_when_archiving_starts, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'notification_when_archiving_starts', must be one of '%s'",
                    $notification_when_archiving_starts,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['notification_when_archiving_starts'] = $notification_when_archiving_starts;

        return $this;
    }

    /**
     * Gets play_voice_prompt_when_archiving_starts
     *
     * @return string|null
     */
    public function getPlayVoicePromptWhenArchivingStarts()
    {
        return $this->container['play_voice_prompt_when_archiving_starts'];
    }

    /**
     * Sets play_voice_prompt_when_archiving_starts
     *
     * @param string|null $play_voice_prompt_when_archiving_starts Play voice prompt when video or audio archiving starts.<br>`1` - Participants can stay in the meeting and will receive a notification.<br>`2` - Nobody can join or stay in the meeting.
     *
     * @return self
     */
    public function setPlayVoicePromptWhenArchivingStarts($play_voice_prompt_when_archiving_starts)
    {
        $allowedValues = $this->getPlayVoicePromptWhenArchivingStartsAllowableValues();
        if (!is_null($play_voice_prompt_when_archiving_starts) && !in_array($play_voice_prompt_when_archiving_starts, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'play_voice_prompt_when_archiving_starts', must be one of '%s'",
                    $play_voice_prompt_when_archiving_starts,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['play_voice_prompt_when_archiving_starts'] = $play_voice_prompt_when_archiving_starts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


