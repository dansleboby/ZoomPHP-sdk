<?php
/**
 * InlineResponse20087ClientSatisfaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom API
 *
 * The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applicatixons on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developersupport@zoom.us
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * InlineResponse20087ClientSatisfaction Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse20087ClientSatisfaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_87_client_satisfaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date' => '\DateTime',
        'satisfaction_percent' => 'int',
        'good_count' => 'int',
        'not_good_count' => 'int',
        'none_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'date' => 'date',
        'satisfaction_percent' => 'int64',
        'good_count' => null,
        'not_good_count' => null,
        'none_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'satisfaction_percent' => 'satisfaction_percent',
        'good_count' => 'good_count',
        'not_good_count' => 'not_good_count',
        'none_count' => 'none_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'satisfaction_percent' => 'setSatisfactionPercent',
        'good_count' => 'setGoodCount',
        'not_good_count' => 'setNotGoodCount',
        'none_count' => 'setNoneCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'satisfaction_percent' => 'getSatisfactionPercent',
        'good_count' => 'getGoodCount',
        'not_good_count' => 'getNotGoodCount',
        'none_count' => 'getNoneCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['satisfaction_percent'] = isset($data['satisfaction_percent']) ? $data['satisfaction_percent'] : null;
        $this->container['good_count'] = isset($data['good_count']) ? $data['good_count'] : null;
        $this->container['not_good_count'] = isset($data['not_good_count']) ? $data['not_good_count'] : null;
        $this->container['none_count'] = isset($data['none_count']) ? $data['none_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date of the report.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets satisfaction_percent
     *
     * @return int|null
     */
    public function getSatisfactionPercent()
    {
        return $this->container['satisfaction_percent'];
    }

    /**
     * Sets satisfaction_percent
     *
     * @param int|null $satisfaction_percent Satisfaction Percentage. The satisfaction percentage is calculated as `(good_count + none_count)` / `total_count`.
     *
     * @return $this
     */
    public function setSatisfactionPercent($satisfaction_percent)
    {
        $this->container['satisfaction_percent'] = $satisfaction_percent;

        return $this;
    }

    /**
     * Gets good_count
     *
     * @return int|null
     */
    public function getGoodCount()
    {
        return $this->container['good_count'];
    }

    /**
     * Sets good_count
     *
     * @param int|null $good_count The total number of \"thumbs up\" received for this meeting.
     *
     * @return $this
     */
    public function setGoodCount($good_count)
    {
        $this->container['good_count'] = $good_count;

        return $this;
    }

    /**
     * Gets not_good_count
     *
     * @return int|null
     */
    public function getNotGoodCount()
    {
        return $this->container['not_good_count'];
    }

    /**
     * Sets not_good_count
     *
     * @param int|null $not_good_count The total number of \"thumbs down\" received for this meeting.
     *
     * @return $this
     */
    public function setNotGoodCount($not_good_count)
    {
        $this->container['not_good_count'] = $not_good_count;

        return $this;
    }

    /**
     * Gets none_count
     *
     * @return int|null
     */
    public function getNoneCount()
    {
        return $this->container['none_count'];
    }

    /**
     * Sets none_count
     *
     * @param int|null $none_count The total number of attendees who didn't submit any response (neither thumbs up nor thumbs down).
     *
     * @return $this
     */
    public function setNoneCount($none_count)
    {
        $this->container['none_count'] = $none_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


