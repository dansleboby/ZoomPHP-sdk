<?php
/**
 * Body61
 *
 * PHP version 5
 *
 * @category Class
 * @package  Zoom\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applicatixons on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developersupport@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * Body61 Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body61 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_61';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable' => 'bool',
        'show_callout_internal_number' => 'bool',
        'show_zoom_provided_callout_countries' => 'bool',
        'show_zoom_provided_numbers' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enable' => null,
        'show_callout_internal_number' => null,
        'show_zoom_provided_callout_countries' => null,
        'show_zoom_provided_numbers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable' => 'enable',
        'show_callout_internal_number' => 'show_callout_internal_number',
        'show_zoom_provided_callout_countries' => 'show_zoom_provided_callout_countries',
        'show_zoom_provided_numbers' => 'show_zoom_provided_numbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable' => 'setEnable',
        'show_callout_internal_number' => 'setShowCalloutInternalNumber',
        'show_zoom_provided_callout_countries' => 'setShowZoomProvidedCalloutCountries',
        'show_zoom_provided_numbers' => 'setShowZoomProvidedNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable' => 'getEnable',
        'show_callout_internal_number' => 'getShowCalloutInternalNumber',
        'show_zoom_provided_callout_countries' => 'getShowZoomProvidedCalloutCountries',
        'show_zoom_provided_numbers' => 'getShowZoomProvidedNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['show_callout_internal_number'] = isset($data['show_callout_internal_number']) ? $data['show_callout_internal_number'] : null;
        $this->container['show_zoom_provided_callout_countries'] = isset($data['show_zoom_provided_callout_countries']) ? $data['show_zoom_provided_callout_countries'] : null;
        $this->container['show_zoom_provided_numbers'] = isset($data['show_zoom_provided_numbers']) ? $data['show_zoom_provided_numbers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable
     *
     * @return bool
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool $enable Enable or delete the configuration.<br> The values can be one of the following:<br> `true`: Enable configuration.<br> `false`: Delete configuration
     *
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets show_callout_internal_number
     *
     * @return bool
     */
    public function getShowCalloutInternalNumber()
    {
        return $this->container['show_callout_internal_number'];
    }

    /**
     * Sets show_callout_internal_number
     *
     * @param bool $show_callout_internal_number If the value of this option is set to `true`, the call-out numbers provided by the Zoom carrier partners will be displayed in the account's list of available call-out numbers in the Zoom Web Portal and Zoom Client.
     *
     * @return $this
     */
    public function setShowCalloutInternalNumber($show_callout_internal_number)
    {
        $this->container['show_callout_internal_number'] = $show_callout_internal_number;

        return $this;
    }

    /**
     * Gets show_zoom_provided_callout_countries
     *
     * @return bool
     */
    public function getShowZoomProvidedCalloutCountries()
    {
        return $this->container['show_zoom_provided_callout_countries'];
    }

    /**
     * Sets show_zoom_provided_callout_countries
     *
     * @param bool $show_zoom_provided_callout_countries If the value of this option is set to `true`, the call-out countries list provided by Zoom will be [displayed](https://support.zoom.us/hc/en-us/articles/200942859-Using-telephone-call-out) in the account's list of available call-out countries. If the value of this field is set to `false`, Zoom provided call-out countries will be hidden from the user's account.
     *
     * @return $this
     */
    public function setShowZoomProvidedCalloutCountries($show_zoom_provided_callout_countries)
    {
        $this->container['show_zoom_provided_callout_countries'] = $show_zoom_provided_callout_countries;

        return $this;
    }

    /**
     * Gets show_zoom_provided_numbers
     *
     * @return int
     */
    public function getShowZoomProvidedNumbers()
    {
        return $this->container['show_zoom_provided_numbers'];
    }

    /**
     * Sets show_zoom_provided_numbers
     *
     * @param int $show_zoom_provided_numbers If the value of this option is set to `0`, the numbers provided by Zoom will be displayed in the account's list of available call-out and call-in numbers in the Zoom Web Portal and Zoom Client.   If the value of this option is set to `1`, the Zoom provided numbers will be shown in the Zoom Web Portal but will not be used unless specified by the user.<br>   If the value of this option is set to `2`, all Zoom provided numbers will be deleted and only internal numbers (provided by carrier partners) will be used.
     *
     * @return $this
     */
    public function setShowZoomProvidedNumbers($show_zoom_provided_numbers)
    {
        $this->container['show_zoom_provided_numbers'] = $show_zoom_provided_numbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


