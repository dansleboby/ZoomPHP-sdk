<?php
/**
 * UserSettingsMeetingSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * UserSettingsMeetingSettings Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserSettingsMeetingSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User_settings__Meeting_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'audio_type' => 'string',
        'default_password_for_scheduled_meetings' => 'string',
        'embed_password_in_join_link' => 'bool',
        'force_pmi_jbh_password' => 'bool',
        'host_video' => 'bool',
        'join_before_host' => 'bool',
        'meeting_password_requirement' => '\Zoom\Api\Model\UserSettingsMeetingSettingsMeetingPasswordRequirement',
        'participants_video' => 'bool',
        'personal_meeting' => 'bool',
        'pmi_password' => 'string',
        'pstn_password_protected' => 'bool',
        'require_password_for_instant_meetings' => 'bool',
        'require_password_for_pmi_meetings' => 'string',
        'require_password_for_scheduled_meetings' => 'bool',
        'require_password_for_scheduling_new_meetings' => 'bool',
        'use_pmi_for_instant_meetings' => 'bool',
        'use_pmi_for_scheduled_meetings' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'audio_type' => null,
        'default_password_for_scheduled_meetings' => null,
        'embed_password_in_join_link' => null,
        'force_pmi_jbh_password' => null,
        'host_video' => null,
        'join_before_host' => null,
        'meeting_password_requirement' => null,
        'participants_video' => null,
        'personal_meeting' => null,
        'pmi_password' => null,
        'pstn_password_protected' => null,
        'require_password_for_instant_meetings' => null,
        'require_password_for_pmi_meetings' => null,
        'require_password_for_scheduled_meetings' => null,
        'require_password_for_scheduling_new_meetings' => null,
        'use_pmi_for_instant_meetings' => null,
        'use_pmi_for_scheduled_meetings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_type' => 'audio_type',
        'default_password_for_scheduled_meetings' => 'default_password_for_scheduled_meetings',
        'embed_password_in_join_link' => 'embed_password_in_join_link',
        'force_pmi_jbh_password' => 'force_pmi_jbh_password',
        'host_video' => 'host_video',
        'join_before_host' => 'join_before_host',
        'meeting_password_requirement' => 'meeting_password_requirement',
        'participants_video' => 'participants_video',
        'personal_meeting' => 'personal_meeting',
        'pmi_password' => 'pmi_password',
        'pstn_password_protected' => 'pstn_password_protected',
        'require_password_for_instant_meetings' => 'require_password_for_instant_meetings',
        'require_password_for_pmi_meetings' => 'require_password_for_pmi_meetings',
        'require_password_for_scheduled_meetings' => 'require_password_for_scheduled_meetings',
        'require_password_for_scheduling_new_meetings' => 'require_password_for_scheduling_new_meetings',
        'use_pmi_for_instant_meetings' => 'use_pmi_for_instant_meetings',
        'use_pmi_for_scheduled_meetings' => 'use_pmi_for_scheduled_meetings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_type' => 'setAudioType',
        'default_password_for_scheduled_meetings' => 'setDefaultPasswordForScheduledMeetings',
        'embed_password_in_join_link' => 'setEmbedPasswordInJoinLink',
        'force_pmi_jbh_password' => 'setForcePmiJbhPassword',
        'host_video' => 'setHostVideo',
        'join_before_host' => 'setJoinBeforeHost',
        'meeting_password_requirement' => 'setMeetingPasswordRequirement',
        'participants_video' => 'setParticipantsVideo',
        'personal_meeting' => 'setPersonalMeeting',
        'pmi_password' => 'setPmiPassword',
        'pstn_password_protected' => 'setPstnPasswordProtected',
        'require_password_for_instant_meetings' => 'setRequirePasswordForInstantMeetings',
        'require_password_for_pmi_meetings' => 'setRequirePasswordForPmiMeetings',
        'require_password_for_scheduled_meetings' => 'setRequirePasswordForScheduledMeetings',
        'require_password_for_scheduling_new_meetings' => 'setRequirePasswordForSchedulingNewMeetings',
        'use_pmi_for_instant_meetings' => 'setUsePmiForInstantMeetings',
        'use_pmi_for_scheduled_meetings' => 'setUsePmiForScheduledMeetings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_type' => 'getAudioType',
        'default_password_for_scheduled_meetings' => 'getDefaultPasswordForScheduledMeetings',
        'embed_password_in_join_link' => 'getEmbedPasswordInJoinLink',
        'force_pmi_jbh_password' => 'getForcePmiJbhPassword',
        'host_video' => 'getHostVideo',
        'join_before_host' => 'getJoinBeforeHost',
        'meeting_password_requirement' => 'getMeetingPasswordRequirement',
        'participants_video' => 'getParticipantsVideo',
        'personal_meeting' => 'getPersonalMeeting',
        'pmi_password' => 'getPmiPassword',
        'pstn_password_protected' => 'getPstnPasswordProtected',
        'require_password_for_instant_meetings' => 'getRequirePasswordForInstantMeetings',
        'require_password_for_pmi_meetings' => 'getRequirePasswordForPmiMeetings',
        'require_password_for_scheduled_meetings' => 'getRequirePasswordForScheduledMeetings',
        'require_password_for_scheduling_new_meetings' => 'getRequirePasswordForSchedulingNewMeetings',
        'use_pmi_for_instant_meetings' => 'getUsePmiForInstantMeetings',
        'use_pmi_for_scheduled_meetings' => 'getUsePmiForScheduledMeetings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUDIO_TYPE_BOTH = 'both';
    public const AUDIO_TYPE_TELEPHONY = 'telephony';
    public const AUDIO_TYPE_VOIP = 'voip';
    public const AUDIO_TYPE_THIRD_PARTY = 'thirdParty';
    public const REQUIRE_PASSWORD_FOR_PMI_MEETINGS_JBH_ONLY = 'jbh_only';
    public const REQUIRE_PASSWORD_FOR_PMI_MEETINGS_ALL = 'all';
    public const REQUIRE_PASSWORD_FOR_PMI_MEETINGS_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAudioTypeAllowableValues()
    {
        return [
            self::AUDIO_TYPE_BOTH,
            self::AUDIO_TYPE_TELEPHONY,
            self::AUDIO_TYPE_VOIP,
            self::AUDIO_TYPE_THIRD_PARTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequirePasswordForPmiMeetingsAllowableValues()
    {
        return [
            self::REQUIRE_PASSWORD_FOR_PMI_MEETINGS_JBH_ONLY,
            self::REQUIRE_PASSWORD_FOR_PMI_MEETINGS_ALL,
            self::REQUIRE_PASSWORD_FOR_PMI_MEETINGS_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_type'] = $data['audio_type'] ?? 'voip';
        $this->container['default_password_for_scheduled_meetings'] = $data['default_password_for_scheduled_meetings'] ?? null;
        $this->container['embed_password_in_join_link'] = $data['embed_password_in_join_link'] ?? null;
        $this->container['force_pmi_jbh_password'] = $data['force_pmi_jbh_password'] ?? null;
        $this->container['host_video'] = $data['host_video'] ?? null;
        $this->container['join_before_host'] = $data['join_before_host'] ?? null;
        $this->container['meeting_password_requirement'] = $data['meeting_password_requirement'] ?? null;
        $this->container['participants_video'] = $data['participants_video'] ?? null;
        $this->container['personal_meeting'] = $data['personal_meeting'] ?? null;
        $this->container['pmi_password'] = $data['pmi_password'] ?? null;
        $this->container['pstn_password_protected'] = $data['pstn_password_protected'] ?? null;
        $this->container['require_password_for_instant_meetings'] = $data['require_password_for_instant_meetings'] ?? null;
        $this->container['require_password_for_pmi_meetings'] = $data['require_password_for_pmi_meetings'] ?? null;
        $this->container['require_password_for_scheduled_meetings'] = $data['require_password_for_scheduled_meetings'] ?? null;
        $this->container['require_password_for_scheduling_new_meetings'] = $data['require_password_for_scheduling_new_meetings'] ?? null;
        $this->container['use_pmi_for_instant_meetings'] = $data['use_pmi_for_instant_meetings'] ?? null;
        $this->container['use_pmi_for_scheduled_meetings'] = $data['use_pmi_for_scheduled_meetings'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAudioTypeAllowableValues();
        if (!is_null($this->container['audio_type']) && !in_array($this->container['audio_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'audio_type', must be one of '%s'",
                $this->container['audio_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequirePasswordForPmiMeetingsAllowableValues();
        if (!is_null($this->container['require_password_for_pmi_meetings']) && !in_array($this->container['require_password_for_pmi_meetings'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'require_password_for_pmi_meetings', must be one of '%s'",
                $this->container['require_password_for_pmi_meetings'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio_type
     *
     * @return string|null
     */
    public function getAudioType()
    {
        return $this->container['audio_type'];
    }

    /**
     * Sets audio_type
     *
     * @param string|null $audio_type Determine how participants can join the audio portion of the meeting:<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - Third party audio conference.
     *
     * @return self
     */
    public function setAudioType($audio_type)
    {
        $allowedValues = $this->getAudioTypeAllowableValues();
        if (!is_null($audio_type) && !in_array($audio_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'audio_type', must be one of '%s'",
                    $audio_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['audio_type'] = $audio_type;

        return $this;
    }

    /**
     * Gets default_password_for_scheduled_meetings
     *
     * @return string|null
     */
    public function getDefaultPasswordForScheduledMeetings()
    {
        return $this->container['default_password_for_scheduled_meetings'];
    }

    /**
     * Sets default_password_for_scheduled_meetings
     *
     * @param string|null $default_password_for_scheduled_meetings Passcode for already scheduled meetings
     *
     * @return self
     */
    public function setDefaultPasswordForScheduledMeetings($default_password_for_scheduled_meetings)
    {
        $this->container['default_password_for_scheduled_meetings'] = $default_password_for_scheduled_meetings;

        return $this;
    }

    /**
     * Gets embed_password_in_join_link
     *
     * @return bool|null
     */
    public function getEmbedPasswordInJoinLink()
    {
        return $this->container['embed_password_in_join_link'];
    }

    /**
     * Sets embed_password_in_join_link
     *
     * @param bool|null $embed_password_in_join_link Encrypt the meeting passcode and include in the join meeting link to allow participants to join with just one click without having to enter the passcode.
     *
     * @return self
     */
    public function setEmbedPasswordInJoinLink($embed_password_in_join_link)
    {
        $this->container['embed_password_in_join_link'] = $embed_password_in_join_link;

        return $this;
    }

    /**
     * Gets force_pmi_jbh_password
     *
     * @return bool|null
     */
    public function getForcePmiJbhPassword()
    {
        return $this->container['force_pmi_jbh_password'];
    }

    /**
     * Sets force_pmi_jbh_password
     *
     * @param bool|null $force_pmi_jbh_password Require a passcode for personal meetings if attendees can join before host.
     *
     * @return self
     */
    public function setForcePmiJbhPassword($force_pmi_jbh_password)
    {
        $this->container['force_pmi_jbh_password'] = $force_pmi_jbh_password;

        return $this;
    }

    /**
     * Gets host_video
     *
     * @return bool|null
     */
    public function getHostVideo()
    {
        return $this->container['host_video'];
    }

    /**
     * Sets host_video
     *
     * @param bool|null $host_video Start meetings with host video on.
     *
     * @return self
     */
    public function setHostVideo($host_video)
    {
        $this->container['host_video'] = $host_video;

        return $this;
    }

    /**
     * Gets join_before_host
     *
     * @return bool|null
     */
    public function getJoinBeforeHost()
    {
        return $this->container['join_before_host'];
    }

    /**
     * Sets join_before_host
     *
     * @param bool|null $join_before_host Join the meeting before host arrives.
     *
     * @return self
     */
    public function setJoinBeforeHost($join_before_host)
    {
        $this->container['join_before_host'] = $join_before_host;

        return $this;
    }

    /**
     * Gets meeting_password_requirement
     *
     * @return \Zoom\Api\Model\UserSettingsMeetingSettingsMeetingPasswordRequirement|null
     */
    public function getMeetingPasswordRequirement()
    {
        return $this->container['meeting_password_requirement'];
    }

    /**
     * Sets meeting_password_requirement
     *
     * @param \Zoom\Api\Model\UserSettingsMeetingSettingsMeetingPasswordRequirement|null $meeting_password_requirement meeting_password_requirement
     *
     * @return self
     */
    public function setMeetingPasswordRequirement($meeting_password_requirement)
    {
        $this->container['meeting_password_requirement'] = $meeting_password_requirement;

        return $this;
    }

    /**
     * Gets participants_video
     *
     * @return bool|null
     */
    public function getParticipantsVideo()
    {
        return $this->container['participants_video'];
    }

    /**
     * Sets participants_video
     *
     * @param bool|null $participants_video Start meetings with participants video on.
     *
     * @return self
     */
    public function setParticipantsVideo($participants_video)
    {
        $this->container['participants_video'] = $participants_video;

        return $this;
    }

    /**
     * Gets personal_meeting
     *
     * @return bool|null
     */
    public function getPersonalMeeting()
    {
        return $this->container['personal_meeting'];
    }

    /**
     * Sets personal_meeting
     *
     * @param bool|null $personal_meeting Personal Meeting Setting.<br><br> `true`: Indicates that the **\"Enable [Personal Meeting ID (PMI)](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#understanding-personal-meeting-id-pmi)\"** setting is turned on. Users can choose to use a PMI for their meetings. <br><br> `false`: Indicates that the **\"Enable Personal Meeting ID\"** setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled (`false`), meetings that were scheduled with a PMI will be invalid. Scheduled meetings must be manually updated. For Zoom Phone only: If a user has been assigned a desk phone, **\"Elevate to Zoom Meeting\"** on desk phone will be disabled.
     *
     * @return self
     */
    public function setPersonalMeeting($personal_meeting)
    {
        $this->container['personal_meeting'] = $personal_meeting;

        return $this;
    }

    /**
     * Gets pmi_password
     *
     * @return string|null
     */
    public function getPmiPassword()
    {
        return $this->container['pmi_password'];
    }

    /**
     * Sets pmi_password
     *
     * @param string|null $pmi_password PMI passcode
     *
     * @return self
     */
    public function setPmiPassword($pmi_password)
    {
        $this->container['pmi_password'] = $pmi_password;

        return $this;
    }

    /**
     * Gets pstn_password_protected
     *
     * @return bool|null
     */
    public function getPstnPasswordProtected()
    {
        return $this->container['pstn_password_protected'];
    }

    /**
     * Sets pstn_password_protected
     *
     * @param bool|null $pstn_password_protected Generate and require passcode for participants joining by phone.
     *
     * @return self
     */
    public function setPstnPasswordProtected($pstn_password_protected)
    {
        $this->container['pstn_password_protected'] = $pstn_password_protected;

        return $this;
    }

    /**
     * Gets require_password_for_instant_meetings
     *
     * @return bool|null
     */
    public function getRequirePasswordForInstantMeetings()
    {
        return $this->container['require_password_for_instant_meetings'];
    }

    /**
     * Sets require_password_for_instant_meetings
     *
     * @param bool|null $require_password_for_instant_meetings Require a passcode for instant meetings. If you use a PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
     *
     * @return self
     */
    public function setRequirePasswordForInstantMeetings($require_password_for_instant_meetings)
    {
        $this->container['require_password_for_instant_meetings'] = $require_password_for_instant_meetings;

        return $this;
    }

    /**
     * Gets require_password_for_pmi_meetings
     *
     * @return string|null
     */
    public function getRequirePasswordForPmiMeetings()
    {
        return $this->container['require_password_for_pmi_meetings'];
    }

    /**
     * Sets require_password_for_pmi_meetings
     *
     * @param string|null $require_password_for_pmi_meetings Require a passcode for Personal Meeting ID (PMI). This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
     *
     * @return self
     */
    public function setRequirePasswordForPmiMeetings($require_password_for_pmi_meetings)
    {
        $allowedValues = $this->getRequirePasswordForPmiMeetingsAllowableValues();
        if (!is_null($require_password_for_pmi_meetings) && !in_array($require_password_for_pmi_meetings, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'require_password_for_pmi_meetings', must be one of '%s'",
                    $require_password_for_pmi_meetings,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['require_password_for_pmi_meetings'] = $require_password_for_pmi_meetings;

        return $this;
    }

    /**
     * Gets require_password_for_scheduled_meetings
     *
     * @return bool|null
     */
    public function getRequirePasswordForScheduledMeetings()
    {
        return $this->container['require_password_for_scheduled_meetings'];
    }

    /**
     * Sets require_password_for_scheduled_meetings
     *
     * @param bool|null $require_password_for_scheduled_meetings Require a passcode for meetings which have already been scheduled
     *
     * @return self
     */
    public function setRequirePasswordForScheduledMeetings($require_password_for_scheduled_meetings)
    {
        $this->container['require_password_for_scheduled_meetings'] = $require_password_for_scheduled_meetings;

        return $this;
    }

    /**
     * Gets require_password_for_scheduling_new_meetings
     *
     * @return bool|null
     */
    public function getRequirePasswordForSchedulingNewMeetings()
    {
        return $this->container['require_password_for_scheduling_new_meetings'];
    }

    /**
     * Sets require_password_for_scheduling_new_meetings
     *
     * @param bool|null $require_password_for_scheduling_new_meetings Require a passcode when scheduling new meetings.This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
     *
     * @return self
     */
    public function setRequirePasswordForSchedulingNewMeetings($require_password_for_scheduling_new_meetings)
    {
        $this->container['require_password_for_scheduling_new_meetings'] = $require_password_for_scheduling_new_meetings;

        return $this;
    }

    /**
     * Gets use_pmi_for_instant_meetings
     *
     * @return bool|null
     */
    public function getUsePmiForInstantMeetings()
    {
        return $this->container['use_pmi_for_instant_meetings'];
    }

    /**
     * Sets use_pmi_for_instant_meetings
     *
     * @param bool|null $use_pmi_for_instant_meetings Use a [Personal Meeting ID (PMI)](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#understanding-personal-meeting-id-pmi) when starting an instant meeting.
     *
     * @return self
     */
    public function setUsePmiForInstantMeetings($use_pmi_for_instant_meetings)
    {
        $this->container['use_pmi_for_instant_meetings'] = $use_pmi_for_instant_meetings;

        return $this;
    }

    /**
     * Gets use_pmi_for_scheduled_meetings
     *
     * @return bool|null
     */
    public function getUsePmiForScheduledMeetings()
    {
        return $this->container['use_pmi_for_scheduled_meetings'];
    }

    /**
     * Sets use_pmi_for_scheduled_meetings
     *
     * @param bool|null $use_pmi_for_scheduled_meetings Use a [Personal Meeting ID (PMI)](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#understanding-personal-meeting-id-pmi) when scheduling a meeting.
     *
     * @return self
     */
    public function setUsePmiForScheduledMeetings($use_pmi_for_scheduled_meetings)
    {
        $this->container['use_pmi_for_scheduled_meetings'] = $use_pmi_for_scheduled_meetings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


