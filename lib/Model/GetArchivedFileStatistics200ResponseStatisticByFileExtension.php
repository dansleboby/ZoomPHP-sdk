<?php
/**
 * GetArchivedFileStatistics200ResponseStatisticByFileExtension
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * GetArchivedFileStatistics200ResponseStatisticByFileExtension Class Doc Comment
 *
 * @category Class
 * @description Statistics about archive files, by file extension.
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetArchivedFileStatistics200ResponseStatisticByFileExtension implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getArchivedFileStatistics_200_response_statistic_by_file_extension';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mp4_file_count' => 'int',
        'm4a_file_count' => 'int',
        'txt_file_count' => 'int',
        'json_file_count' => 'int',
        'vtt_file_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mp4_file_count' => null,
        'm4a_file_count' => null,
        'txt_file_count' => null,
        'json_file_count' => null,
        'vtt_file_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mp4_file_count' => 'mp4_file_count',
        'm4a_file_count' => 'm4a_file_count',
        'txt_file_count' => 'txt_file_count',
        'json_file_count' => 'json_file_count',
        'vtt_file_count' => 'vtt_file_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mp4_file_count' => 'setMp4FileCount',
        'm4a_file_count' => 'setM4aFileCount',
        'txt_file_count' => 'setTxtFileCount',
        'json_file_count' => 'setJsonFileCount',
        'vtt_file_count' => 'setVttFileCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mp4_file_count' => 'getMp4FileCount',
        'm4a_file_count' => 'getM4aFileCount',
        'txt_file_count' => 'getTxtFileCount',
        'json_file_count' => 'getJsonFileCount',
        'vtt_file_count' => 'getVttFileCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mp4_file_count'] = $data['mp4_file_count'] ?? null;
        $this->container['m4a_file_count'] = $data['m4a_file_count'] ?? null;
        $this->container['txt_file_count'] = $data['txt_file_count'] ?? null;
        $this->container['json_file_count'] = $data['json_file_count'] ?? null;
        $this->container['vtt_file_count'] = $data['vtt_file_count'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mp4_file_count
     *
     * @return int|null
     */
    public function getMp4FileCount()
    {
        return $this->container['mp4_file_count'];
    }

    /**
     * Sets mp4_file_count
     *
     * @param int|null $mp4_file_count The number of mp4 files.
     *
     * @return self
     */
    public function setMp4FileCount($mp4_file_count)
    {
        $this->container['mp4_file_count'] = $mp4_file_count;

        return $this;
    }

    /**
     * Gets m4a_file_count
     *
     * @return int|null
     */
    public function getM4aFileCount()
    {
        return $this->container['m4a_file_count'];
    }

    /**
     * Sets m4a_file_count
     *
     * @param int|null $m4a_file_count The number of m4a files.
     *
     * @return self
     */
    public function setM4aFileCount($m4a_file_count)
    {
        $this->container['m4a_file_count'] = $m4a_file_count;

        return $this;
    }

    /**
     * Gets txt_file_count
     *
     * @return int|null
     */
    public function getTxtFileCount()
    {
        return $this->container['txt_file_count'];
    }

    /**
     * Sets txt_file_count
     *
     * @param int|null $txt_file_count The number of txt files.
     *
     * @return self
     */
    public function setTxtFileCount($txt_file_count)
    {
        $this->container['txt_file_count'] = $txt_file_count;

        return $this;
    }

    /**
     * Gets json_file_count
     *
     * @return int|null
     */
    public function getJsonFileCount()
    {
        return $this->container['json_file_count'];
    }

    /**
     * Sets json_file_count
     *
     * @param int|null $json_file_count The number of json files.
     *
     * @return self
     */
    public function setJsonFileCount($json_file_count)
    {
        $this->container['json_file_count'] = $json_file_count;

        return $this;
    }

    /**
     * Gets vtt_file_count
     *
     * @return int|null
     */
    public function getVttFileCount()
    {
        return $this->container['vtt_file_count'];
    }

    /**
     * Sets vtt_file_count
     *
     * @param int|null $vtt_file_count The number of vtt files.
     *
     * @return self
     */
    public function setVttFileCount($vtt_file_count)
    {
        $this->container['vtt_file_count'] = $vtt_file_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


