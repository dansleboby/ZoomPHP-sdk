<?php
/**
 * GetZRSettings200ResponseOneOfZoomRoomsTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * GetZRSettings200ResponseOneOfZoomRoomsTest Class Doc Comment
 *
 * @category    Class
 * @description GetZRSettings200ResponseOneOfZoomRooms
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class GetZRSettings200ResponseOneOfZoomRoomsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "GetZRSettings200ResponseOneOfZoomRooms"
     */
    public function testGetZRSettings200ResponseOneOfZoomRooms()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "allow_multiple_content_sharing"
     */
    public function testPropertyAllowMultipleContentSharing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "remote_support"
     */
    public function testPropertyRemoteSupport()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "audio_device_daily_auto_test"
     */
    public function testPropertyAudioDeviceDailyAutoTest()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "auto_direct_sharing"
     */
    public function testPropertyAutoDirectSharing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "auto_start_scheduled_meeting"
     */
    public function testPropertyAutoStartScheduledMeeting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "auto_stop_scheduled_meeting"
     */
    public function testPropertyAutoStopScheduledMeeting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "count_attendees_number_in_room"
     */
    public function testPropertyCountAttendeesNumberInRoom()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "display_feedback_survey"
     */
    public function testPropertyDisplayFeedbackSurvey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "display_meeting_list"
     */
    public function testPropertyDisplayMeetingList()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "display_top_banner"
     */
    public function testPropertyDisplayTopBanner()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encrypt_shared_screen_content"
     */
    public function testPropertyEncryptSharedScreenContent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hide_id_for_private_meeting"
     */
    public function testPropertyHideIdForPrivateMeeting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hide_share_instruction"
     */
    public function testPropertyHideShareInstruction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "send_whiteboard_to_internal_contact_only"
     */
    public function testPropertySendWhiteboardToInternalContactOnly()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "show_alert_before_meeting"
     */
    public function testPropertyShowAlertBeforeMeeting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "show_call_history_in_room"
     */
    public function testPropertyShowCallHistoryInRoom()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "show_contact_list_on_controller"
     */
    public function testPropertyShowContactListOnController()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "show_non_video_participants"
     */
    public function testPropertyShowNonVideoParticipants()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "start_airplay_manually"
     */
    public function testPropertyStartAirplayManually()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "start_airplay_mirroring"
     */
    public function testPropertyStartAirplayMirroring()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "support_join_3rd_party_meeting"
     */
    public function testPropertySupportJoin3rdPartyMeeting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "transform_meeting_to_private"
     */
    public function testPropertyTransformMeetingToPrivate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "upcoming_meeting_alert"
     */
    public function testPropertyUpcomingMeetingAlert()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "weekly_system_restart"
     */
    public function testPropertyWeeklySystemRestart()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "entry_exit_chime"
     */
    public function testPropertyEntryExitChime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "record_play_own_voice"
     */
    public function testPropertyRecordPlayOwnVoice()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
