<?php
/**
 * UserCreateRequestUserInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * UserCreateRequestUserInfo Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserCreateRequestUserInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'userCreate_request_user_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'password' => 'string',
        'type' => 'int',
        'feature' => '\Zoom\Api\Model\UserCreateRequestUserInfoFeature',
        'plan_united_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'first_name' => null,
        'last_name' => null,
        'password' => 'password',
        'type' => null,
        'feature' => null,
        'plan_united_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'password' => 'password',
        'type' => 'type',
        'feature' => 'feature',
        'plan_united_type' => 'plan_united_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'password' => 'setPassword',
        'type' => 'setType',
        'feature' => 'setFeature',
        'plan_united_type' => 'setPlanUnitedType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'password' => 'getPassword',
        'type' => 'getType',
        'feature' => 'getFeature',
        'plan_united_type' => 'getPlanUnitedType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_1 = 1;
    public const TYPE_2 = 2;
    public const TYPE_3 = 3;
    public const TYPE_99 = 99;
    public const PLAN_UNITED_TYPE__1 = '1';
    public const PLAN_UNITED_TYPE__2 = '2';
    public const PLAN_UNITED_TYPE__4 = '4';
    public const PLAN_UNITED_TYPE__8 = '8';
    public const PLAN_UNITED_TYPE__16 = '16';
    public const PLAN_UNITED_TYPE__32 = '32';
    public const PLAN_UNITED_TYPE__64 = '64';
    public const PLAN_UNITED_TYPE__128 = '128';
    public const PLAN_UNITED_TYPE__256 = '256';
    public const PLAN_UNITED_TYPE__512 = '512';
    public const PLAN_UNITED_TYPE__1024 = '1024';
    public const PLAN_UNITED_TYPE__2048 = '2048';
    public const PLAN_UNITED_TYPE__4096 = '4096';
    public const PLAN_UNITED_TYPE__8192 = '8192';
    public const PLAN_UNITED_TYPE__16384 = '16384';
    public const PLAN_UNITED_TYPE__32768 = '32768';
    public const PLAN_UNITED_TYPE__65536 = '65536';
    public const PLAN_UNITED_TYPE__131072 = '131072';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_1,
            self::TYPE_2,
            self::TYPE_3,
            self::TYPE_99,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlanUnitedTypeAllowableValues()
    {
        return [
            self::PLAN_UNITED_TYPE__1,
            self::PLAN_UNITED_TYPE__2,
            self::PLAN_UNITED_TYPE__4,
            self::PLAN_UNITED_TYPE__8,
            self::PLAN_UNITED_TYPE__16,
            self::PLAN_UNITED_TYPE__32,
            self::PLAN_UNITED_TYPE__64,
            self::PLAN_UNITED_TYPE__128,
            self::PLAN_UNITED_TYPE__256,
            self::PLAN_UNITED_TYPE__512,
            self::PLAN_UNITED_TYPE__1024,
            self::PLAN_UNITED_TYPE__2048,
            self::PLAN_UNITED_TYPE__4096,
            self::PLAN_UNITED_TYPE__8192,
            self::PLAN_UNITED_TYPE__16384,
            self::PLAN_UNITED_TYPE__32768,
            self::PLAN_UNITED_TYPE__65536,
            self::PLAN_UNITED_TYPE__131072,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = $data['email'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['feature'] = $data['feature'] ?? null;
        $this->container['plan_united_type'] = $data['plan_united_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 128)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) > 32)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) < 8)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPlanUnitedTypeAllowableValues();
        if (!is_null($this->container['plan_united_type']) && !in_array($this->container['plan_united_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'plan_united_type', must be one of '%s'",
                $this->container['plan_united_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email User email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if ((mb_strlen($email) > 128)) {
            throw new \InvalidArgumentException('invalid length for $email when calling UserCreateRequestUserInfo., must be smaller than or equal to 128.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name User's first name: cannot contain more than 5 Chinese words.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling UserCreateRequestUserInfo., must be smaller than or equal to 64.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name User's last name: cannot contain more than 5 Chinese words.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling UserCreateRequestUserInfo., must be smaller than or equal to 64.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password User password. Only used for the \"autoCreate\" function. The password has to have a minimum of 8 characters and maximum of 32 characters. By default (basic requirement), password must have at least one letter (a, b, c..), at least one number (1, 2, 3...) and include both uppercase and lowercase letters. It should not contain only one identical character repeatedly ('11111111' or 'aaaaaaaa') and it cannot contain consecutive characters ('12345678' or 'abcdefgh').  **Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [**Get account settings**](/docs/api-reference/zoom-api/ma#operation/accountSettings) API and referring to the `password_requirement` field present in the `security` object.
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (!is_null($password) && (mb_strlen($password) > 32)) {
            throw new \InvalidArgumentException('invalid length for $password when calling UserCreateRequestUserInfo., must be smaller than or equal to 32.');
        }
        if (!is_null($password) && (mb_strlen($password) < 8)) {
            throw new \InvalidArgumentException('invalid length for $password when calling UserCreateRequestUserInfo., must be bigger than or equal to 8.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type User type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`).
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets feature
     *
     * @return \Zoom\Api\Model\UserCreateRequestUserInfoFeature|null
     */
    public function getFeature()
    {
        return $this->container['feature'];
    }

    /**
     * Sets feature
     *
     * @param \Zoom\Api\Model\UserCreateRequestUserInfoFeature|null $feature feature
     *
     * @return self
     */
    public function setFeature($feature)
    {
        $this->container['feature'] = $feature;

        return $this;
    }

    /**
     * Gets plan_united_type
     *
     * @return string|null
     */
    public function getPlanUnitedType()
    {
        return $this->container['plan_united_type'];
    }

    /**
     * Sets plan_united_type
     *
     * @param string|null $plan_united_type The Zoom United type. The license option:  * `1` — Zoom United Pro-United with US/CA Unlimited.  * `2` — Zoom United Pro-United with UK/IR Unlimited.  * `4` — Zoom United Pro-United with AU/NZ Unlimited.  * `8` — Zoom United Pro-United with Global Select.  * `16` — Zoom United Pro-United with Zoom Phone Pro.  * `32` — Zoom United Biz-United with US/CA Unlimited.  * `64` — Zoom United Biz-United with UK/IR Unlimited.  * `128` — Zoom United Biz-United with AU/NZ Unlimited.  * `256` — Zoom United Biz-United with Global Select.  * `512` — Zoom United Biz-United with Zoom Phone Pro.  * `1024` — Zoom United Ent-United with US/CA Unlimited.  * `2048` — Zoom United Ent-United with UK/IR Unlimited.  * `4096` — Zoom United Ent-United with AU/NZ Unlimited.  * `8192` — Zoom United Ent-United with Global Select.  * `16384` — Zoom United Ent-United with Zoom Phone Pro.  * `32768` — Zoom United Pro-United with JP Unlimited.  * `65536` — Zoom United Biz-United with JP Unlimited.  * `131072` — Zoom United Ent-United with JP Unlimited.
     *
     * @return self
     */
    public function setPlanUnitedType($plan_united_type)
    {
        $allowedValues = $this->getPlanUnitedTypeAllowableValues();
        if (!is_null($plan_united_type) && !in_array($plan_united_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'plan_united_type', must be one of '%s'",
                    $plan_united_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['plan_united_type'] = $plan_united_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


