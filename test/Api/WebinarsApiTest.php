<?php
/**
 * WebinarsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * WebinarsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WebinarsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addBatchWebinarRegistrants
     *
     * Perform batch registration.
     *
     */
    public function testAddBatchWebinarRegistrants()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWebinarBrandingNameTag
     *
     * Create a webinar's branding name tag.
     *
     */
    public function testCreateWebinarBrandingNameTag()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebinarBrandingNameTag
     *
     * Delete a webinar's branding name tag.
     *
     */
    public function testDeleteWebinarBrandingNameTag()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebinarBrandingVB
     *
     * Delete a webinar's branding Virtual Backgrounds.
     *
     */
    public function testDeleteWebinarBrandingVB()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebinarBrandingWallpaper
     *
     * Delete a webinar's branding wallpaper.
     *
     */
    public function testDeleteWebinarBrandingWallpaper()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebinarChatMessageById
     *
     * Delete a live webinar message.
     *
     */
    public function testDeleteWebinarChatMessageById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebinarRegistrant
     *
     * Delete a webinar registrant.
     *
     */
    public function testDeleteWebinarRegistrant()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getTrackingSources
     *
     * Get webinar tracking sources.
     *
     */
    public function testGetTrackingSources()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebinarBranding
     *
     * Get webinar's session branding.
     *
     */
    public function testGetWebinarBranding()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebinarLiveStreamDetails
     *
     * Get live stream details.
     *
     */
    public function testGetWebinarLiveStreamDetails()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listPastWebinarPollResults
     *
     * List past webinar poll results.
     *
     */
    public function testListPastWebinarPollResults()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listPastWebinarQA
     *
     * List Q&A of past webinar.
     *
     */
    public function testListPastWebinarQA()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listWebinarParticipants
     *
     * List webinar participants.
     *
     */
    public function testListWebinarParticipants()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listWebinarTemplates
     *
     * List webinar templates.
     *
     */
    public function testListWebinarTemplates()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pastWebinars
     *
     * List past webinar instances.
     *
     */
    public function testPastWebinars()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setWebinarBrandingVB
     *
     * Set webinar's default branding Virtual Background.
     *
     */
    public function testSetWebinarBrandingVB()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebinarBrandingNameTag
     *
     * Update a webinar's branding name tag.
     *
     */
    public function testUpdateWebinarBrandingNameTag()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uploadWebinarBrandingVB
     *
     * Upload a webinar's branding Virtual Background.
     *
     */
    public function testUploadWebinarBrandingVB()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uploadWebinarBrandingWallpaper
     *
     * Upload a webinar's branding wallpaper.
     *
     */
    public function testUploadWebinarBrandingWallpaper()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinar
     *
     * Get a webinar.
     *
     */
    public function testWebinar()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarAbsentees
     *
     * Get webinar absentees.
     *
     */
    public function testWebinarAbsentees()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarCreate
     *
     * Create a webinar.
     *
     */
    public function testWebinarCreate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarDelete
     *
     * Delete a webinar.
     *
     */
    public function testWebinarDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarInviteLinksCreate
     *
     * Create webinar's invite links.
     *
     */
    public function testWebinarInviteLinksCreate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarLiveStreamStatusUpdate
     *
     * Update Live Stream Status.
     *
     */
    public function testWebinarLiveStreamStatusUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarLiveStreamUpdate
     *
     * Update a live stream.
     *
     */
    public function testWebinarLiveStreamUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarLocalRecordingJoinToken
     *
     * Get a webinar's join token for local recording.
     *
     */
    public function testWebinarLocalRecordingJoinToken()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarPanelistCreate
     *
     * Add panelists.
     *
     */
    public function testWebinarPanelistCreate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarPanelistDelete
     *
     * Remove a panelist.
     *
     */
    public function testWebinarPanelistDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarPanelists
     *
     * List panelists.
     *
     */
    public function testWebinarPanelists()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarPanelistsDelete
     *
     * Remove panelists.
     *
     */
    public function testWebinarPanelistsDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarPollCreate
     *
     * Create a webinar's poll.
     *
     */
    public function testWebinarPollCreate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarPollDelete
     *
     * Delete a webinar poll.
     *
     */
    public function testWebinarPollDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarPollGet
     *
     * Get a webinar poll.
     *
     */
    public function testWebinarPollGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarPollUpdate
     *
     * Update a webinar poll.
     *
     */
    public function testWebinarPollUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarPolls
     *
     * List a webinar's polls.
     *
     */
    public function testWebinarPolls()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarRegistrantCreate
     *
     * Add a webinar registrant.
     *
     */
    public function testWebinarRegistrantCreate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarRegistrantGet
     *
     * Get a webinar registrant.
     *
     */
    public function testWebinarRegistrantGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarRegistrantQuestionUpdate
     *
     * Update registration questions.
     *
     */
    public function testWebinarRegistrantQuestionUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarRegistrantStatus
     *
     * Update registrant's status.
     *
     */
    public function testWebinarRegistrantStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarRegistrants
     *
     * List webinar registrants.
     *
     */
    public function testWebinarRegistrants()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarRegistrantsQuestionsGet
     *
     * List registration questions.
     *
     */
    public function testWebinarRegistrantsQuestionsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarStatus
     *
     * Update webinar status.
     *
     */
    public function testWebinarStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarSurveyDelete
     *
     * Delete a webinar survey.
     *
     */
    public function testWebinarSurveyDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarSurveyGet
     *
     * Get a webinar survey.
     *
     */
    public function testWebinarSurveyGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarSurveyUpdate
     *
     * Update a webinar survey.
     *
     */
    public function testWebinarSurveyUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarToken
     *
     * Get webinar's token.
     *
     */
    public function testWebinarToken()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinarUpdate
     *
     * Update a webinar.
     *
     */
    public function testWebinarUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for webinars
     *
     * List webinars.
     *
     */
    public function testWebinars()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
