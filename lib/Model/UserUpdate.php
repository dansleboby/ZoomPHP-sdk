<?php
/**
 * UserUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserUpdate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cms_user_id' => 'string',
        'company' => 'string',
        'custom_attributes' => '\OpenAPI\Client\Model\UserUpdateCustomAttributesInner[]',
        'dept' => 'string',
        'first_name' => 'string',
        'group_id' => 'string',
        'host_key' => 'string',
        'job_title' => 'string',
        'language' => 'string',
        'last_name' => 'string',
        'location' => 'string',
        'manager' => 'string',
        'phone_country' => 'string',
        'phone_number' => 'string',
        'phone_numbers' => '\OpenAPI\Client\Model\UserUpdatePhoneNumbersInner[]',
        'pmi' => 'int',
        'pronouns' => 'string',
        'pronouns_option' => 'int',
        'timezone' => 'string',
        'type' => 'int',
        'use_pmi' => 'bool',
        'vanity_name' => 'string',
        'zoom_one_type' => 'int',
        'plan_united_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cms_user_id' => null,
        'company' => null,
        'custom_attributes' => null,
        'dept' => null,
        'first_name' => null,
        'group_id' => null,
        'host_key' => null,
        'job_title' => null,
        'language' => null,
        'last_name' => null,
        'location' => null,
        'manager' => 'email',
        'phone_country' => null,
        'phone_number' => null,
        'phone_numbers' => null,
        'pmi' => null,
        'pronouns' => null,
        'pronouns_option' => null,
        'timezone' => null,
        'type' => null,
        'use_pmi' => null,
        'vanity_name' => null,
        'zoom_one_type' => null,
        'plan_united_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cms_user_id' => 'cms_user_id',
        'company' => 'company',
        'custom_attributes' => 'custom_attributes',
        'dept' => 'dept',
        'first_name' => 'first_name',
        'group_id' => 'group_id',
        'host_key' => 'host_key',
        'job_title' => 'job_title',
        'language' => 'language',
        'last_name' => 'last_name',
        'location' => 'location',
        'manager' => 'manager',
        'phone_country' => 'phone_country',
        'phone_number' => 'phone_number',
        'phone_numbers' => 'phone_numbers',
        'pmi' => 'pmi',
        'pronouns' => 'pronouns',
        'pronouns_option' => 'pronouns_option',
        'timezone' => 'timezone',
        'type' => 'type',
        'use_pmi' => 'use_pmi',
        'vanity_name' => 'vanity_name',
        'zoom_one_type' => 'zoom_one_type',
        'plan_united_type' => 'plan_united_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cms_user_id' => 'setCmsUserId',
        'company' => 'setCompany',
        'custom_attributes' => 'setCustomAttributes',
        'dept' => 'setDept',
        'first_name' => 'setFirstName',
        'group_id' => 'setGroupId',
        'host_key' => 'setHostKey',
        'job_title' => 'setJobTitle',
        'language' => 'setLanguage',
        'last_name' => 'setLastName',
        'location' => 'setLocation',
        'manager' => 'setManager',
        'phone_country' => 'setPhoneCountry',
        'phone_number' => 'setPhoneNumber',
        'phone_numbers' => 'setPhoneNumbers',
        'pmi' => 'setPmi',
        'pronouns' => 'setPronouns',
        'pronouns_option' => 'setPronounsOption',
        'timezone' => 'setTimezone',
        'type' => 'setType',
        'use_pmi' => 'setUsePmi',
        'vanity_name' => 'setVanityName',
        'zoom_one_type' => 'setZoomOneType',
        'plan_united_type' => 'setPlanUnitedType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cms_user_id' => 'getCmsUserId',
        'company' => 'getCompany',
        'custom_attributes' => 'getCustomAttributes',
        'dept' => 'getDept',
        'first_name' => 'getFirstName',
        'group_id' => 'getGroupId',
        'host_key' => 'getHostKey',
        'job_title' => 'getJobTitle',
        'language' => 'getLanguage',
        'last_name' => 'getLastName',
        'location' => 'getLocation',
        'manager' => 'getManager',
        'phone_country' => 'getPhoneCountry',
        'phone_number' => 'getPhoneNumber',
        'phone_numbers' => 'getPhoneNumbers',
        'pmi' => 'getPmi',
        'pronouns' => 'getPronouns',
        'pronouns_option' => 'getPronounsOption',
        'timezone' => 'getTimezone',
        'type' => 'getType',
        'use_pmi' => 'getUsePmi',
        'vanity_name' => 'getVanityName',
        'zoom_one_type' => 'getZoomOneType',
        'plan_united_type' => 'getPlanUnitedType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRONOUNS_OPTION_1 = 1;
    public const PRONOUNS_OPTION_2 = 2;
    public const PRONOUNS_OPTION_3 = 3;
    public const TYPE_1 = 1;
    public const TYPE_2 = 2;
    public const TYPE_3 = 3;
    public const TYPE_99 = 99;
    public const ZOOM_ONE_TYPE_0 = 0;
    public const ZOOM_ONE_TYPE_16 = 16;
    public const ZOOM_ONE_TYPE_32 = 32;
    public const ZOOM_ONE_TYPE_64 = 64;
    public const ZOOM_ONE_TYPE_128 = 128;
    public const PLAN_UNITED_TYPE__1 = '1';
    public const PLAN_UNITED_TYPE__2 = '2';
    public const PLAN_UNITED_TYPE__4 = '4';
    public const PLAN_UNITED_TYPE__8 = '8';
    public const PLAN_UNITED_TYPE__16 = '16';
    public const PLAN_UNITED_TYPE__32 = '32';
    public const PLAN_UNITED_TYPE__64 = '64';
    public const PLAN_UNITED_TYPE__128 = '128';
    public const PLAN_UNITED_TYPE__256 = '256';
    public const PLAN_UNITED_TYPE__512 = '512';
    public const PLAN_UNITED_TYPE__1024 = '1024';
    public const PLAN_UNITED_TYPE__2048 = '2048';
    public const PLAN_UNITED_TYPE__4096 = '4096';
    public const PLAN_UNITED_TYPE__8192 = '8192';
    public const PLAN_UNITED_TYPE__16384 = '16384';
    public const PLAN_UNITED_TYPE__32768 = '32768';
    public const PLAN_UNITED_TYPE__65536 = '65536';
    public const PLAN_UNITED_TYPE__131072 = '131072';
    public const PLAN_UNITED_TYPE_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPronounsOptionAllowableValues()
    {
        return [
            self::PRONOUNS_OPTION_1,
            self::PRONOUNS_OPTION_2,
            self::PRONOUNS_OPTION_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_1,
            self::TYPE_2,
            self::TYPE_3,
            self::TYPE_99,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getZoomOneTypeAllowableValues()
    {
        return [
            self::ZOOM_ONE_TYPE_0,
            self::ZOOM_ONE_TYPE_16,
            self::ZOOM_ONE_TYPE_32,
            self::ZOOM_ONE_TYPE_64,
            self::ZOOM_ONE_TYPE_128,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlanUnitedTypeAllowableValues()
    {
        return [
            self::PLAN_UNITED_TYPE__1,
            self::PLAN_UNITED_TYPE__2,
            self::PLAN_UNITED_TYPE__4,
            self::PLAN_UNITED_TYPE__8,
            self::PLAN_UNITED_TYPE__16,
            self::PLAN_UNITED_TYPE__32,
            self::PLAN_UNITED_TYPE__64,
            self::PLAN_UNITED_TYPE__128,
            self::PLAN_UNITED_TYPE__256,
            self::PLAN_UNITED_TYPE__512,
            self::PLAN_UNITED_TYPE__1024,
            self::PLAN_UNITED_TYPE__2048,
            self::PLAN_UNITED_TYPE__4096,
            self::PLAN_UNITED_TYPE__8192,
            self::PLAN_UNITED_TYPE__16384,
            self::PLAN_UNITED_TYPE__32768,
            self::PLAN_UNITED_TYPE__65536,
            self::PLAN_UNITED_TYPE__131072,
            self::PLAN_UNITED_TYPE_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cms_user_id'] = $data['cms_user_id'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['custom_attributes'] = $data['custom_attributes'] ?? null;
        $this->container['dept'] = $data['dept'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['group_id'] = $data['group_id'] ?? null;
        $this->container['host_key'] = $data['host_key'] ?? null;
        $this->container['job_title'] = $data['job_title'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['manager'] = $data['manager'] ?? null;
        $this->container['phone_country'] = $data['phone_country'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['phone_numbers'] = $data['phone_numbers'] ?? null;
        $this->container['pmi'] = $data['pmi'] ?? null;
        $this->container['pronouns'] = $data['pronouns'] ?? null;
        $this->container['pronouns_option'] = $data['pronouns_option'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['use_pmi'] = $data['use_pmi'] ?? false;
        $this->container['vanity_name'] = $data['vanity_name'] ?? null;
        $this->container['zoom_one_type'] = $data['zoom_one_type'] ?? null;
        $this->container['plan_united_type'] = $data['plan_united_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 255)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['host_key']) && (mb_strlen($this->container['host_key']) > 10)) {
            $invalidProperties[] = "invalid value for 'host_key', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['host_key']) && (mb_strlen($this->container['host_key']) < 6)) {
            $invalidProperties[] = "invalid value for 'host_key', the character length must be bigger than or equal to 6.";
        }

        if (!is_null($this->container['job_title']) && (mb_strlen($this->container['job_title']) > 128)) {
            $invalidProperties[] = "invalid value for 'job_title', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) > 256)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be smaller than or equal to 256.";
        }

        $allowedValues = $this->getPronounsOptionAllowableValues();
        if (!is_null($this->container['pronouns_option']) && !in_array($this->container['pronouns_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pronouns_option', must be one of '%s'",
                $this->container['pronouns_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getZoomOneTypeAllowableValues();
        if (!is_null($this->container['zoom_one_type']) && !in_array($this->container['zoom_one_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'zoom_one_type', must be one of '%s'",
                $this->container['zoom_one_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPlanUnitedTypeAllowableValues();
        if (!is_null($this->container['plan_united_type']) && !in_array($this->container['plan_united_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'plan_united_type', must be one of '%s'",
                $this->container['plan_united_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cms_user_id
     *
     * @return string|null
     */
    public function getCmsUserId()
    {
        return $this->container['cms_user_id'];
    }

    /**
     * Sets cms_user_id
     *
     * @param string|null $cms_user_id The Kaltura user ID.
     *
     * @return self
     */
    public function setCmsUserId($cms_user_id)
    {
        $this->container['cms_user_id'] = $cms_user_id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company The user's company.
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (!is_null($company) && (mb_strlen($company) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company when calling UserUpdate., must be smaller than or equal to 255.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \OpenAPI\Client\Model\UserUpdateCustomAttributesInner[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \OpenAPI\Client\Model\UserUpdateCustomAttributesInner[]|null $custom_attributes The user's assigned custom attributes.
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets dept
     *
     * @return string|null
     */
    public function getDept()
    {
        return $this->container['dept'];
    }

    /**
     * Sets dept
     *
     * @param string|null $dept The user's assigned department.
     *
     * @return self
     */
    public function setDept($dept)
    {
        $this->container['dept'] = $dept;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The user's first name. This value cannot contain more than five Chinese characters.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling UserUpdate., must be smaller than or equal to 64.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string|null
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string|null $group_id Provide unique identifier of the group that you would like to add a [pending user](https://support.zoom.us/hc/en-us/articles/201363183-Managing-users#h_13c87a2a-ecd6-40ad-be61-a9935e660edb) to. The value of this field can be retrieved from the [**List groups**](/docs/api-reference/zoom-api/methods#operation/groups) API.
     *
     * @return self
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets host_key
     *
     * @return string|null
     */
    public function getHostKey()
    {
        return $this->container['host_key'];
    }

    /**
     * Sets host_key
     *
     * @param string|null $host_key The user's host key.
     *
     * @return self
     */
    public function setHostKey($host_key)
    {
        if (!is_null($host_key) && (mb_strlen($host_key) > 10)) {
            throw new \InvalidArgumentException('invalid length for $host_key when calling UserUpdate., must be smaller than or equal to 10.');
        }
        if (!is_null($host_key) && (mb_strlen($host_key) < 6)) {
            throw new \InvalidArgumentException('invalid length for $host_key when calling UserUpdate., must be bigger than or equal to 6.');
        }

        $this->container['host_key'] = $host_key;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title The user's job title.
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (!is_null($job_title) && (mb_strlen($job_title) > 128)) {
            throw new \InvalidArgumentException('invalid length for $job_title when calling UserUpdate., must be smaller than or equal to 128.');
        }

        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language The user's language.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The user's last name. This value cannot contain more than five Chinese characters.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling UserUpdate., must be smaller than or equal to 64.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The user's location.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (!is_null($location) && (mb_strlen($location) > 256)) {
            throw new \InvalidArgumentException('invalid length for $location when calling UserUpdate., must be smaller than or equal to 256.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets manager
     *
     * @return string|null
     */
    public function getManager()
    {
        return $this->container['manager'];
    }

    /**
     * Sets manager
     *
     * @param string|null $manager The user's assigned manager.
     *
     * @return self
     */
    public function setManager($manager)
    {
        $this->container['manager'] = $manager;

        return $this;
    }

    /**
     * Gets phone_country
     *
     * @return string|null
     * @deprecated
     */
    public function getPhoneCountry()
    {
        return $this->container['phone_country'];
    }

    /**
     * Sets phone_country
     *
     * @param string|null $phone_country **Note:** This field has been **deprecated** and will not be supported in the future. Use the `country` field of the `phone_numbers` object to select the phone number country.   The user's phone number [country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries).
     *
     * @return self
     * @deprecated
     */
    public function setPhoneCountry($phone_country)
    {
        $this->container['phone_country'] = $phone_country;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     * @deprecated
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number **Note:** This field has been **deprecated** and will not be supported in the future. Instead, use the `phone_numbers` field to assign phone numbers to a user.   The user's phone number. To update a phone number, you must also provide the `phone_country` field.
     *
     * @return self
     * @deprecated
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets phone_numbers
     *
     * @return \OpenAPI\Client\Model\UserUpdatePhoneNumbersInner[]|null
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param \OpenAPI\Client\Model\UserUpdatePhoneNumbersInner[]|null $phone_numbers Information about the user's assigned phone numbers.
     *
     * @return self
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets pmi
     *
     * @return int|null
     */
    public function getPmi()
    {
        return $this->container['pmi'];
    }

    /**
     * Sets pmi
     *
     * @param int|null $pmi The user's [Personal Meeting ID (PMI)](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#understanding-personal-meeting-id-pmi).
     *
     * @return self
     */
    public function setPmi($pmi)
    {


        $this->container['pmi'] = $pmi;

        return $this;
    }

    /**
     * Gets pronouns
     *
     * @return string|null
     */
    public function getPronouns()
    {
        return $this->container['pronouns'];
    }

    /**
     * Sets pronouns
     *
     * @param string|null $pronouns The user's pronouns.
     *
     * @return self
     */
    public function setPronouns($pronouns)
    {
        $this->container['pronouns'] = $pronouns;

        return $this;
    }

    /**
     * Gets pronouns_option
     *
     * @return int|null
     */
    public function getPronounsOption()
    {
        return $this->container['pronouns_option'];
    }

    /**
     * Sets pronouns_option
     *
     * @param int|null $pronouns_option The user's display pronouns setting:  * `1` — Ask the user every time they join meetings and webinars.  * `2` — Always display pronouns in meetings and webinars.  * `3` — Do not display pronouns in meetings and webinars.
     *
     * @return self
     */
    public function setPronounsOption($pronouns_option)
    {
        $allowedValues = $this->getPronounsOptionAllowableValues();
        if (!is_null($pronouns_option) && !in_array($pronouns_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pronouns_option', must be one of '%s'",
                    $pronouns_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pronouns_option'] = $pronouns_option;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone The user's [timezone](/docs/api-reference/other-references/abbreviation-lists#timezones)
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type The type of [user](https://support.zoom.us/hc/en-us/articles/201363173-Zoom-user-types-roles):  * `1` — Basic.  * `2` — Licensed.  * `3` — On-Premise.  * `4` — No Meetings License.  * `99` — None. You can only set this value if the user was created using the `ssoCreate` value for `action` parameter in the [**Create users**](/docs/api-reference/zoom-api/methods#operation/userCreate) API.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets use_pmi
     *
     * @return bool|null
     */
    public function getUsePmi()
    {
        return $this->container['use_pmi'];
    }

    /**
     * Sets use_pmi
     *
     * @param bool|null $use_pmi Whether to use a [Personal Meeting ID (PMI)](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#understanding-personal-meeting-id-pmi) for instant meetings.
     *
     * @return self
     */
    public function setUsePmi($use_pmi)
    {
        $this->container['use_pmi'] = $use_pmi;

        return $this;
    }

    /**
     * Gets vanity_name
     *
     * @return string|null
     */
    public function getVanityName()
    {
        return $this->container['vanity_name'];
    }

    /**
     * Sets vanity_name
     *
     * @param string|null $vanity_name The user's Personal Meeting Room name.
     *
     * @return self
     */
    public function setVanityName($vanity_name)
    {
        $this->container['vanity_name'] = $vanity_name;

        return $this;
    }

    /**
     * Gets zoom_one_type
     *
     * @return int|null
     */
    public function getZoomOneType()
    {
        return $this->container['zoom_one_type'];
    }

    /**
     * Sets zoom_one_type
     *
     * @param int|null $zoom_one_type The Zoom One Bundle plan option:<br>`0` - Turn off Zoom United license.<br>`16` - Zoom One Business Plus with US/CA Unlimited.<br>`32` - Zoom One Business Plus with UK/IR Unlimited.<br>`64` - Zoom One Business Plus with AU/NZ Unlimited.<br>`128` - Zoom One Business Plus with Japan Unlimited.
     *
     * @return self
     */
    public function setZoomOneType($zoom_one_type)
    {
        $allowedValues = $this->getZoomOneTypeAllowableValues();
        if (!is_null($zoom_one_type) && !in_array($zoom_one_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'zoom_one_type', must be one of '%s'",
                    $zoom_one_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['zoom_one_type'] = $zoom_one_type;

        return $this;
    }

    /**
     * Gets plan_united_type
     *
     * @return string|null
     */
    public function getPlanUnitedType()
    {
        return $this->container['plan_united_type'];
    }

    /**
     * Sets plan_united_type
     *
     * @param string|null $plan_united_type The Zoom United type. The license option:  * `1` — Zoom United Pro-United with US/CA Unlimited.  * `2` — Zoom United Pro-United with UK/IR Unlimited.  * `4` — Zoom United Pro-United with AU/NZ Unlimited.  * `8` — Zoom United Pro-United with Global Select.  * `16` — Zoom United Pro-United with Zoom Phone Pro.  * `32` — Zoom United Biz-United with US/CA Unlimited.  * `64` — Zoom United Biz-United with UK/IR Unlimited.  * `128` — Zoom United Biz-United with AU/NZ Unlimited.  * `256` — Zoom United Biz-United with Global Select.  * `512` — Zoom United Biz-United with Zoom Phone Pro.  * `1024` — Zoom United Ent-United with US/CA Unlimited.  * `2048` — Zoom United Ent-United with UK/IR Unlimited.  * `4096` — Zoom United Ent-United with AU/NZ Unlimited.  * `8192` — Zoom United Ent-United with Global Select.  * `16384` — Zoom United Ent-United with Zoom Phone Pro.  * `32768` — Zoom United Pro-United with JP Unlimited.  * `65536` — Zoom United Biz-United with JP Unlimited.  * `131072` — Zoom United Ent-United with JP Unlimited.  * `none` — Turn off Zoom United type.
     *
     * @return self
     */
    public function setPlanUnitedType($plan_united_type)
    {
        $allowedValues = $this->getPlanUnitedTypeAllowableValues();
        if (!is_null($plan_united_type) && !in_array($plan_united_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'plan_united_type', must be one of '%s'",
                    $plan_united_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['plan_united_type'] = $plan_united_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


