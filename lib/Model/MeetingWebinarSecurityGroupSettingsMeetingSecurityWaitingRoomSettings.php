<?php
/**
 * MeetingWebinarSecurityGroupSettingsMeetingSecurityWaitingRoomSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * MeetingWebinarSecurityGroupSettingsMeetingSecurityWaitingRoomSettings Class Doc Comment
 *
 * @category Class
 * @description Information about the Waiting Room settings.
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MeetingWebinarSecurityGroupSettingsMeetingSecurityWaitingRoomSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Meeting_Webinar_Security_Group_Settings_meeting_security_waiting_room_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'participants_to_place_in_waiting_room' => 'int',
        'users_who_can_admit_participants_from_waiting_room' => 'int',
        'whitelisted_domains_for_waiting_room' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'participants_to_place_in_waiting_room' => null,
        'users_who_can_admit_participants_from_waiting_room' => null,
        'whitelisted_domains_for_waiting_room' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'participants_to_place_in_waiting_room' => 'participants_to_place_in_waiting_room',
        'users_who_can_admit_participants_from_waiting_room' => 'users_who_can_admit_participants_from_waiting_room',
        'whitelisted_domains_for_waiting_room' => 'whitelisted_domains_for_waiting_room'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'participants_to_place_in_waiting_room' => 'setParticipantsToPlaceInWaitingRoom',
        'users_who_can_admit_participants_from_waiting_room' => 'setUsersWhoCanAdmitParticipantsFromWaitingRoom',
        'whitelisted_domains_for_waiting_room' => 'setWhitelistedDomainsForWaitingRoom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'participants_to_place_in_waiting_room' => 'getParticipantsToPlaceInWaitingRoom',
        'users_who_can_admit_participants_from_waiting_room' => 'getUsersWhoCanAdmitParticipantsFromWaitingRoom',
        'whitelisted_domains_for_waiting_room' => 'getWhitelistedDomainsForWaitingRoom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PARTICIPANTS_TO_PLACE_IN_WAITING_ROOM_0 = 0;
    public const PARTICIPANTS_TO_PLACE_IN_WAITING_ROOM_1 = 1;
    public const PARTICIPANTS_TO_PLACE_IN_WAITING_ROOM_2 = 2;
    public const USERS_WHO_CAN_ADMIT_PARTICIPANTS_FROM_WAITING_ROOM_0 = 0;
    public const USERS_WHO_CAN_ADMIT_PARTICIPANTS_FROM_WAITING_ROOM_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParticipantsToPlaceInWaitingRoomAllowableValues()
    {
        return [
            self::PARTICIPANTS_TO_PLACE_IN_WAITING_ROOM_0,
            self::PARTICIPANTS_TO_PLACE_IN_WAITING_ROOM_1,
            self::PARTICIPANTS_TO_PLACE_IN_WAITING_ROOM_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsersWhoCanAdmitParticipantsFromWaitingRoomAllowableValues()
    {
        return [
            self::USERS_WHO_CAN_ADMIT_PARTICIPANTS_FROM_WAITING_ROOM_0,
            self::USERS_WHO_CAN_ADMIT_PARTICIPANTS_FROM_WAITING_ROOM_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['participants_to_place_in_waiting_room'] = $data['participants_to_place_in_waiting_room'] ?? null;
        $this->container['users_who_can_admit_participants_from_waiting_room'] = $data['users_who_can_admit_participants_from_waiting_room'] ?? null;
        $this->container['whitelisted_domains_for_waiting_room'] = $data['whitelisted_domains_for_waiting_room'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getParticipantsToPlaceInWaitingRoomAllowableValues();
        if (!is_null($this->container['participants_to_place_in_waiting_room']) && !in_array($this->container['participants_to_place_in_waiting_room'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'participants_to_place_in_waiting_room', must be one of '%s'",
                $this->container['participants_to_place_in_waiting_room'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUsersWhoCanAdmitParticipantsFromWaitingRoomAllowableValues();
        if (!is_null($this->container['users_who_can_admit_participants_from_waiting_room']) && !in_array($this->container['users_who_can_admit_participants_from_waiting_room'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'users_who_can_admit_participants_from_waiting_room', must be one of '%s'",
                $this->container['users_who_can_admit_participants_from_waiting_room'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets participants_to_place_in_waiting_room
     *
     * @return int|null
     */
    public function getParticipantsToPlaceInWaitingRoom()
    {
        return $this->container['participants_to_place_in_waiting_room'];
    }

    /**
     * Sets participants_to_place_in_waiting_room
     *
     * @param int|null $participants_to_place_in_waiting_room The type of participants to be admitted to the Waiting Room:  * `0` — All attendees.  * `1` — Users who are not in your account.  * `2` — Users who are not in your account and are not part of your [allowed domains list](https://support.zoom.us/hc/en-us/articles/360037117472-Configuring-authentication-profiles#h_e3cf0d5f-eec7-4c2a-ad29-ef2a5079a7da).
     *
     * @return self
     */
    public function setParticipantsToPlaceInWaitingRoom($participants_to_place_in_waiting_room)
    {
        $allowedValues = $this->getParticipantsToPlaceInWaitingRoomAllowableValues();
        if (!is_null($participants_to_place_in_waiting_room) && !in_array($participants_to_place_in_waiting_room, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'participants_to_place_in_waiting_room', must be one of '%s'",
                    $participants_to_place_in_waiting_room,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['participants_to_place_in_waiting_room'] = $participants_to_place_in_waiting_room;

        return $this;
    }

    /**
     * Gets users_who_can_admit_participants_from_waiting_room
     *
     * @return int|null
     */
    public function getUsersWhoCanAdmitParticipantsFromWaitingRoom()
    {
        return $this->container['users_who_can_admit_participants_from_waiting_room'];
    }

    /**
     * Sets users_who_can_admit_participants_from_waiting_room
     *
     * @param int|null $users_who_can_admit_participants_from_waiting_room The users who can admit participants from the Waiting Room:  * `0` — Host and co-hosts only.  * `1` — Host, co-hosts, and anyone who bypassed the Waiting Room if the host and co-hosts are not present.
     *
     * @return self
     */
    public function setUsersWhoCanAdmitParticipantsFromWaitingRoom($users_who_can_admit_participants_from_waiting_room)
    {
        $allowedValues = $this->getUsersWhoCanAdmitParticipantsFromWaitingRoomAllowableValues();
        if (!is_null($users_who_can_admit_participants_from_waiting_room) && !in_array($users_who_can_admit_participants_from_waiting_room, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'users_who_can_admit_participants_from_waiting_room', must be one of '%s'",
                    $users_who_can_admit_participants_from_waiting_room,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['users_who_can_admit_participants_from_waiting_room'] = $users_who_can_admit_participants_from_waiting_room;

        return $this;
    }

    /**
     * Gets whitelisted_domains_for_waiting_room
     *
     * @return string|null
     */
    public function getWhitelistedDomainsForWaitingRoom()
    {
        return $this->container['whitelisted_domains_for_waiting_room'];
    }

    /**
     * Sets whitelisted_domains_for_waiting_room
     *
     * @param string|null $whitelisted_domains_for_waiting_room If the `participants_to_place_in_waiting_room` field is `2`, a comma-separated list of the domains that can bypass the Waiting Room (`\"example.com,example2.com\"`).
     *
     * @return self
     */
    public function setWhitelistedDomainsForWaitingRoom($whitelisted_domains_for_waiting_room)
    {
        $this->container['whitelisted_domains_for_waiting_room'] = $whitelisted_domains_for_waiting_room;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


