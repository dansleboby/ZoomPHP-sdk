<?php
/**
 * UpdateGroupSettingsRequestOneOfInMeetingWebinarChat
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * UpdateGroupSettingsRequestOneOfInMeetingWebinarChat Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateGroupSettingsRequestOneOfInMeetingWebinarChat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateGroupSettings_request_oneOf_in_meeting_webinar_chat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_attendees_chat_with' => 'int',
        'allow_auto_save_local_chat_file' => 'bool',
        'allow_panelists_chat_with' => 'int',
        'allow_panelists_send_direct_message' => 'bool',
        'allow_users_save_chats' => 'int',
        'default_attendees_chat_with' => 'int',
        'enable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_attendees_chat_with' => null,
        'allow_auto_save_local_chat_file' => null,
        'allow_panelists_chat_with' => null,
        'allow_panelists_send_direct_message' => null,
        'allow_users_save_chats' => null,
        'default_attendees_chat_with' => null,
        'enable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_attendees_chat_with' => 'allow_attendees_chat_with',
        'allow_auto_save_local_chat_file' => 'allow_auto_save_local_chat_file',
        'allow_panelists_chat_with' => 'allow_panelists_chat_with',
        'allow_panelists_send_direct_message' => 'allow_panelists_send_direct_message',
        'allow_users_save_chats' => 'allow_users_save_chats',
        'default_attendees_chat_with' => 'default_attendees_chat_with',
        'enable' => 'enable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_attendees_chat_with' => 'setAllowAttendeesChatWith',
        'allow_auto_save_local_chat_file' => 'setAllowAutoSaveLocalChatFile',
        'allow_panelists_chat_with' => 'setAllowPanelistsChatWith',
        'allow_panelists_send_direct_message' => 'setAllowPanelistsSendDirectMessage',
        'allow_users_save_chats' => 'setAllowUsersSaveChats',
        'default_attendees_chat_with' => 'setDefaultAttendeesChatWith',
        'enable' => 'setEnable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_attendees_chat_with' => 'getAllowAttendeesChatWith',
        'allow_auto_save_local_chat_file' => 'getAllowAutoSaveLocalChatFile',
        'allow_panelists_chat_with' => 'getAllowPanelistsChatWith',
        'allow_panelists_send_direct_message' => 'getAllowPanelistsSendDirectMessage',
        'allow_users_save_chats' => 'getAllowUsersSaveChats',
        'default_attendees_chat_with' => 'getDefaultAttendeesChatWith',
        'enable' => 'getEnable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ALLOW_ATTENDEES_CHAT_WITH_1 = 1;
    public const ALLOW_ATTENDEES_CHAT_WITH_2 = 2;
    public const ALLOW_ATTENDEES_CHAT_WITH_3 = 3;
    public const ALLOW_PANELISTS_CHAT_WITH_1 = 1;
    public const ALLOW_PANELISTS_CHAT_WITH_2 = 2;
    public const ALLOW_USERS_SAVE_CHATS_0 = 0;
    public const ALLOW_USERS_SAVE_CHATS_1 = 1;
    public const ALLOW_USERS_SAVE_CHATS_2 = 2;
    public const DEFAULT_ATTENDEES_CHAT_WITH_1 = 1;
    public const DEFAULT_ATTENDEES_CHAT_WITH_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowAttendeesChatWithAllowableValues()
    {
        return [
            self::ALLOW_ATTENDEES_CHAT_WITH_1,
            self::ALLOW_ATTENDEES_CHAT_WITH_2,
            self::ALLOW_ATTENDEES_CHAT_WITH_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowPanelistsChatWithAllowableValues()
    {
        return [
            self::ALLOW_PANELISTS_CHAT_WITH_1,
            self::ALLOW_PANELISTS_CHAT_WITH_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowUsersSaveChatsAllowableValues()
    {
        return [
            self::ALLOW_USERS_SAVE_CHATS_0,
            self::ALLOW_USERS_SAVE_CHATS_1,
            self::ALLOW_USERS_SAVE_CHATS_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultAttendeesChatWithAllowableValues()
    {
        return [
            self::DEFAULT_ATTENDEES_CHAT_WITH_1,
            self::DEFAULT_ATTENDEES_CHAT_WITH_2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_attendees_chat_with'] = $data['allow_attendees_chat_with'] ?? null;
        $this->container['allow_auto_save_local_chat_file'] = $data['allow_auto_save_local_chat_file'] ?? null;
        $this->container['allow_panelists_chat_with'] = $data['allow_panelists_chat_with'] ?? null;
        $this->container['allow_panelists_send_direct_message'] = $data['allow_panelists_send_direct_message'] ?? null;
        $this->container['allow_users_save_chats'] = $data['allow_users_save_chats'] ?? null;
        $this->container['default_attendees_chat_with'] = $data['default_attendees_chat_with'] ?? null;
        $this->container['enable'] = $data['enable'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAllowAttendeesChatWithAllowableValues();
        if (!is_null($this->container['allow_attendees_chat_with']) && !in_array($this->container['allow_attendees_chat_with'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_attendees_chat_with', must be one of '%s'",
                $this->container['allow_attendees_chat_with'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowPanelistsChatWithAllowableValues();
        if (!is_null($this->container['allow_panelists_chat_with']) && !in_array($this->container['allow_panelists_chat_with'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_panelists_chat_with', must be one of '%s'",
                $this->container['allow_panelists_chat_with'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowUsersSaveChatsAllowableValues();
        if (!is_null($this->container['allow_users_save_chats']) && !in_array($this->container['allow_users_save_chats'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_users_save_chats', must be one of '%s'",
                $this->container['allow_users_save_chats'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultAttendeesChatWithAllowableValues();
        if (!is_null($this->container['default_attendees_chat_with']) && !in_array($this->container['default_attendees_chat_with'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_attendees_chat_with', must be one of '%s'",
                $this->container['default_attendees_chat_with'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_attendees_chat_with
     *
     * @return int|null
     */
    public function getAllowAttendeesChatWith()
    {
        return $this->container['allow_attendees_chat_with'];
    }

    /**
     * Sets allow_attendees_chat_with
     *
     * @param int|null $allow_attendees_chat_with Allow webinar attendees to chat with: * `1` — No one. * `2` — Host and all panelists. * `3` — Everyone.
     *
     * @return self
     */
    public function setAllowAttendeesChatWith($allow_attendees_chat_with)
    {
        $allowedValues = $this->getAllowAttendeesChatWithAllowableValues();
        if (!is_null($allow_attendees_chat_with) && !in_array($allow_attendees_chat_with, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_attendees_chat_with', must be one of '%s'",
                    $allow_attendees_chat_with,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_attendees_chat_with'] = $allow_attendees_chat_with;

        return $this;
    }

    /**
     * Gets allow_auto_save_local_chat_file
     *
     * @return bool|null
     */
    public function getAllowAutoSaveLocalChatFile()
    {
        return $this->container['allow_auto_save_local_chat_file'];
    }

    /**
     * Sets allow_auto_save_local_chat_file
     *
     * @param bool|null $allow_auto_save_local_chat_file Whether to automatically save chat messages to a local file on the host's computer when the webinar ends.
     *
     * @return self
     */
    public function setAllowAutoSaveLocalChatFile($allow_auto_save_local_chat_file)
    {
        $this->container['allow_auto_save_local_chat_file'] = $allow_auto_save_local_chat_file;

        return $this;
    }

    /**
     * Gets allow_panelists_chat_with
     *
     * @return int|null
     */
    public function getAllowPanelistsChatWith()
    {
        return $this->container['allow_panelists_chat_with'];
    }

    /**
     * Sets allow_panelists_chat_with
     *
     * @param int|null $allow_panelists_chat_with Allow webinar panelists to chat with: * `1` — Host and all panelists. * `2` — Everyone.
     *
     * @return self
     */
    public function setAllowPanelistsChatWith($allow_panelists_chat_with)
    {
        $allowedValues = $this->getAllowPanelistsChatWithAllowableValues();
        if (!is_null($allow_panelists_chat_with) && !in_array($allow_panelists_chat_with, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_panelists_chat_with', must be one of '%s'",
                    $allow_panelists_chat_with,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_panelists_chat_with'] = $allow_panelists_chat_with;

        return $this;
    }

    /**
     * Gets allow_panelists_send_direct_message
     *
     * @return bool|null
     */
    public function getAllowPanelistsSendDirectMessage()
    {
        return $this->container['allow_panelists_send_direct_message'];
    }

    /**
     * Sets allow_panelists_send_direct_message
     *
     * @param bool|null $allow_panelists_send_direct_message Whether to allow webinar panelists to send direct messages to other panelists.
     *
     * @return self
     */
    public function setAllowPanelistsSendDirectMessage($allow_panelists_send_direct_message)
    {
        $this->container['allow_panelists_send_direct_message'] = $allow_panelists_send_direct_message;

        return $this;
    }

    /**
     * Gets allow_users_save_chats
     *
     * @return int|null
     */
    public function getAllowUsersSaveChats()
    {
        return $this->container['allow_users_save_chats'];
    }

    /**
     * Sets allow_users_save_chats
     *
     * @param int|null $allow_users_save_chats Whether webinar attendees can save chats: * `0` — Attendees cannot save chats. * `1` — Attendees can only save host and panelist chats. * `2` — Attendees can save all chats.
     *
     * @return self
     */
    public function setAllowUsersSaveChats($allow_users_save_chats)
    {
        $allowedValues = $this->getAllowUsersSaveChatsAllowableValues();
        if (!is_null($allow_users_save_chats) && !in_array($allow_users_save_chats, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_users_save_chats', must be one of '%s'",
                    $allow_users_save_chats,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_users_save_chats'] = $allow_users_save_chats;

        return $this;
    }

    /**
     * Gets default_attendees_chat_with
     *
     * @return int|null
     */
    public function getDefaultAttendeesChatWith()
    {
        return $this->container['default_attendees_chat_with'];
    }

    /**
     * Sets default_attendees_chat_with
     *
     * @param int|null $default_attendees_chat_with By default, allow webinar attendees to chat with: * `1` — Host and all panelists. * `2` — Everyone.
     *
     * @return self
     */
    public function setDefaultAttendeesChatWith($default_attendees_chat_with)
    {
        $allowedValues = $this->getDefaultAttendeesChatWithAllowableValues();
        if (!is_null($default_attendees_chat_with) && !in_array($default_attendees_chat_with, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_attendees_chat_with', must be one of '%s'",
                    $default_attendees_chat_with,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_attendees_chat_with'] = $default_attendees_chat_with;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool|null
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool|null $enable Whether to allow webinar participants to send chat messages.
     *
     * @return self
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


