<?php
/**
 * UpdateDeviceProfileRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * UpdateDeviceProfileRequest Class Doc Comment
 *
 * @category Class
 * @description Information about the Zoom Room device profile.
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateDeviceProfileRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateDeviceProfile_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'audio_processing' => 'bool',
        'auto_adjust_mic_level' => 'bool',
        'camera_id' => 'string',
        'echo_cancellation' => 'bool',
        'microphone_id' => 'string',
        'noise_suppression' => 'string',
        'speaker_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'audio_processing' => null,
        'auto_adjust_mic_level' => null,
        'camera_id' => null,
        'echo_cancellation' => null,
        'microphone_id' => null,
        'noise_suppression' => null,
        'speaker_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_processing' => 'audio_processing',
        'auto_adjust_mic_level' => 'auto_adjust_mic_level',
        'camera_id' => 'camera_id',
        'echo_cancellation' => 'echo_cancellation',
        'microphone_id' => 'microphone_id',
        'noise_suppression' => 'noise_suppression',
        'speaker_id' => 'speaker_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_processing' => 'setAudioProcessing',
        'auto_adjust_mic_level' => 'setAutoAdjustMicLevel',
        'camera_id' => 'setCameraId',
        'echo_cancellation' => 'setEchoCancellation',
        'microphone_id' => 'setMicrophoneId',
        'noise_suppression' => 'setNoiseSuppression',
        'speaker_id' => 'setSpeakerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_processing' => 'getAudioProcessing',
        'auto_adjust_mic_level' => 'getAutoAdjustMicLevel',
        'camera_id' => 'getCameraId',
        'echo_cancellation' => 'getEchoCancellation',
        'microphone_id' => 'getMicrophoneId',
        'noise_suppression' => 'getNoiseSuppression',
        'speaker_id' => 'getSpeakerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NOISE_SUPPRESSION_MODERATE = 'moderate';
    public const NOISE_SUPPRESSION_AGGRESSIVE = 'aggressive';
    public const NOISE_SUPPRESSION_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNoiseSuppressionAllowableValues()
    {
        return [
            self::NOISE_SUPPRESSION_MODERATE,
            self::NOISE_SUPPRESSION_AGGRESSIVE,
            self::NOISE_SUPPRESSION_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_processing'] = $data['audio_processing'] ?? null;
        $this->container['auto_adjust_mic_level'] = $data['auto_adjust_mic_level'] ?? null;
        $this->container['camera_id'] = $data['camera_id'] ?? null;
        $this->container['echo_cancellation'] = $data['echo_cancellation'] ?? null;
        $this->container['microphone_id'] = $data['microphone_id'] ?? null;
        $this->container['noise_suppression'] = $data['noise_suppression'] ?? null;
        $this->container['speaker_id'] = $data['speaker_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNoiseSuppressionAllowableValues();
        if (!is_null($this->container['noise_suppression']) && !in_array($this->container['noise_suppression'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'noise_suppression', must be one of '%s'",
                $this->container['noise_suppression'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio_processing
     *
     * @return bool|null
     */
    public function getAudioProcessing()
    {
        return $this->container['audio_processing'];
    }

    /**
     * Sets audio_processing
     *
     * @param bool|null $audio_processing Whether to enable audio processing.
     *
     * @return self
     */
    public function setAudioProcessing($audio_processing)
    {
        $this->container['audio_processing'] = $audio_processing;

        return $this;
    }

    /**
     * Gets auto_adjust_mic_level
     *
     * @return bool|null
     */
    public function getAutoAdjustMicLevel()
    {
        return $this->container['auto_adjust_mic_level'];
    }

    /**
     * Sets auto_adjust_mic_level
     *
     * @param bool|null $auto_adjust_mic_level Whether to enable microphone level auto adjust.
     *
     * @return self
     */
    public function setAutoAdjustMicLevel($auto_adjust_mic_level)
    {
        $this->container['auto_adjust_mic_level'] = $auto_adjust_mic_level;

        return $this;
    }

    /**
     * Gets camera_id
     *
     * @return string|null
     */
    public function getCameraId()
    {
        return $this->container['camera_id'];
    }

    /**
     * Sets camera_id
     *
     * @param string|null $camera_id The camera's device ID.
     *
     * @return self
     */
    public function setCameraId($camera_id)
    {
        $this->container['camera_id'] = $camera_id;

        return $this;
    }

    /**
     * Gets echo_cancellation
     *
     * @return bool|null
     */
    public function getEchoCancellation()
    {
        return $this->container['echo_cancellation'];
    }

    /**
     * Sets echo_cancellation
     *
     * @param bool|null $echo_cancellation Whether to enable echo cancellation.
     *
     * @return self
     */
    public function setEchoCancellation($echo_cancellation)
    {
        $this->container['echo_cancellation'] = $echo_cancellation;

        return $this;
    }

    /**
     * Gets microphone_id
     *
     * @return string|null
     */
    public function getMicrophoneId()
    {
        return $this->container['microphone_id'];
    }

    /**
     * Sets microphone_id
     *
     * @param string|null $microphone_id The microphone's device ID.
     *
     * @return self
     */
    public function setMicrophoneId($microphone_id)
    {
        $this->container['microphone_id'] = $microphone_id;

        return $this;
    }

    /**
     * Gets noise_suppression
     *
     * @return string|null
     */
    public function getNoiseSuppression()
    {
        return $this->container['noise_suppression'];
    }

    /**
     * Sets noise_suppression
     *
     * @param string|null $noise_suppression The noise suppression setting:  * `moderate` — Moderate noise suppression.  * `aggressive` — Aggressive noise suppression.  * `none` — Noise suppression disabled.
     *
     * @return self
     */
    public function setNoiseSuppression($noise_suppression)
    {
        $allowedValues = $this->getNoiseSuppressionAllowableValues();
        if (!is_null($noise_suppression) && !in_array($noise_suppression, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'noise_suppression', must be one of '%s'",
                    $noise_suppression,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['noise_suppression'] = $noise_suppression;

        return $this;
    }

    /**
     * Gets speaker_id
     *
     * @return string|null
     */
    public function getSpeakerId()
    {
        return $this->container['speaker_id'];
    }

    /**
     * Sets speaker_id
     *
     * @param string|null $speaker_id The speaker's device ID.
     *
     * @return self
     */
    public function setSpeakerId($speaker_id)
    {
        $this->container['speaker_id'] = $speaker_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


