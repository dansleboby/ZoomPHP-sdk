<?php
/**
 * UpdateGroupSettingsRequestOneOfRecordingArchiveSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * UpdateGroupSettingsRequestOneOfRecordingArchiveSettings Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateGroupSettingsRequestOneOfRecordingArchiveSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateGroupSettings_request_oneOf_recording_archive_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'audio_file' => 'bool',
        'cc_transcript_file' => 'bool',
        'chat_file' => 'bool',
        'chat_with_sender_email' => 'bool',
        'video_file' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'audio_file' => null,
        'cc_transcript_file' => null,
        'chat_file' => null,
        'chat_with_sender_email' => null,
        'video_file' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_file' => 'audio_file',
        'cc_transcript_file' => 'cc_transcript_file',
        'chat_file' => 'chat_file',
        'chat_with_sender_email' => 'chat_with_sender_email',
        'video_file' => 'video_file'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_file' => 'setAudioFile',
        'cc_transcript_file' => 'setCcTranscriptFile',
        'chat_file' => 'setChatFile',
        'chat_with_sender_email' => 'setChatWithSenderEmail',
        'video_file' => 'setVideoFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_file' => 'getAudioFile',
        'cc_transcript_file' => 'getCcTranscriptFile',
        'chat_file' => 'getChatFile',
        'chat_with_sender_email' => 'getChatWithSenderEmail',
        'video_file' => 'getVideoFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_file'] = $data['audio_file'] ?? null;
        $this->container['cc_transcript_file'] = $data['cc_transcript_file'] ?? null;
        $this->container['chat_file'] = $data['chat_file'] ?? null;
        $this->container['chat_with_sender_email'] = $data['chat_with_sender_email'] ?? null;
        $this->container['video_file'] = $data['video_file'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio_file
     *
     * @return bool|null
     */
    public function getAudioFile()
    {
        return $this->container['audio_file'];
    }

    /**
     * Sets audio_file
     *
     * @param bool|null $audio_file Include in-meeting and/or in-webinar audio in the archive.
     *
     * @return self
     */
    public function setAudioFile($audio_file)
    {
        $this->container['audio_file'] = $audio_file;

        return $this;
    }

    /**
     * Gets cc_transcript_file
     *
     * @return bool|null
     */
    public function getCcTranscriptFile()
    {
        return $this->container['cc_transcript_file'];
    }

    /**
     * Sets cc_transcript_file
     *
     * @param bool|null $cc_transcript_file Include closed caption or transcript in the archive.
     *
     * @return self
     */
    public function setCcTranscriptFile($cc_transcript_file)
    {
        $this->container['cc_transcript_file'] = $cc_transcript_file;

        return $this;
    }

    /**
     * Gets chat_file
     *
     * @return bool|null
     */
    public function getChatFile()
    {
        return $this->container['chat_file'];
    }

    /**
     * Sets chat_file
     *
     * @param bool|null $chat_file Include in-meeting chat in the archive.
     *
     * @return self
     */
    public function setChatFile($chat_file)
    {
        $this->container['chat_file'] = $chat_file;

        return $this;
    }

    /**
     * Gets chat_with_sender_email
     *
     * @return bool|null
     */
    public function getChatWithSenderEmail()
    {
        return $this->container['chat_with_sender_email'];
    }

    /**
     * Sets chat_with_sender_email
     *
     * @param bool|null $chat_with_sender_email Include user email in in-meeting chat file.
     *
     * @return self
     */
    public function setChatWithSenderEmail($chat_with_sender_email)
    {
        $this->container['chat_with_sender_email'] = $chat_with_sender_email;

        return $this;
    }

    /**
     * Gets video_file
     *
     * @return bool|null
     */
    public function getVideoFile()
    {
        return $this->container['video_file'];
    }

    /**
     * Sets video_file
     *
     * @param bool|null $video_file Include in-meeting and/or in-webinar video in the archive.
     *
     * @return self
     */
    public function setVideoFile($video_file)
    {
        $this->container['video_file'] = $video_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


