<?php
/**
 * QOSParticipantUserQosInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zoom\Api\Model;

use \ArrayAccess;
use \Zoom\Api\ObjectSerializer;

/**
 * QOSParticipantUserQosInner Class Doc Comment
 *
 * @category Class
 * @package  Zoom\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QOSParticipantUserQosInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QOSParticipant_user_qos_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'as_device_from_crc' => '\Zoom\Api\Model\QOSParticipantUserQosInnerAsDeviceFromCrc',
        'as_device_to_crc' => '\Zoom\Api\Model\QOSParticipantUserQosInnerAsDeviceToCrc',
        'as_input' => '\Zoom\Api\Model\QOSVideo',
        'as_output' => '\Zoom\Api\Model\QOSVideo',
        'audio_device_from_crc' => '\Zoom\Api\Model\QOSParticipantUserQosInnerAudioDeviceFromCrc',
        'audio_device_to_crc' => '\Zoom\Api\Model\QOSParticipantUserQosInnerAudioDeviceToCrc',
        'audio_input' => '\Zoom\Api\Model\QOSAudio',
        'audio_output' => '\Zoom\Api\Model\QOSAudio',
        'cpu_usage' => '\Zoom\Api\Model\QOSParticipantUserQosInnerCpuUsage',
        'date_time' => '\DateTime',
        'video_device_from_crc' => '\Zoom\Api\Model\QOSParticipantUserQosInnerVideoDeviceFromCrc',
        'video_device_to_crc' => '\Zoom\Api\Model\QOSParticipantUserQosInnerVideoDeviceToCrc',
        'video_input' => '\Zoom\Api\Model\QOSVideo',
        'video_output' => '\Zoom\Api\Model\QOSVideo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'as_device_from_crc' => null,
        'as_device_to_crc' => null,
        'as_input' => null,
        'as_output' => null,
        'audio_device_from_crc' => null,
        'audio_device_to_crc' => null,
        'audio_input' => null,
        'audio_output' => null,
        'cpu_usage' => null,
        'date_time' => 'date-time',
        'video_device_from_crc' => null,
        'video_device_to_crc' => null,
        'video_input' => null,
        'video_output' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'as_device_from_crc' => 'as_device_from_crc',
        'as_device_to_crc' => 'as_device_to_crc',
        'as_input' => 'as_input',
        'as_output' => 'as_output',
        'audio_device_from_crc' => 'audio_device_from_crc',
        'audio_device_to_crc' => 'audio_device_to_crc',
        'audio_input' => 'audio_input',
        'audio_output' => 'audio_output',
        'cpu_usage' => 'cpu_usage',
        'date_time' => 'date_time',
        'video_device_from_crc' => 'video_device_from_crc',
        'video_device_to_crc' => 'video_device_to_crc',
        'video_input' => 'video_input',
        'video_output' => 'video_output'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'as_device_from_crc' => 'setAsDeviceFromCrc',
        'as_device_to_crc' => 'setAsDeviceToCrc',
        'as_input' => 'setAsInput',
        'as_output' => 'setAsOutput',
        'audio_device_from_crc' => 'setAudioDeviceFromCrc',
        'audio_device_to_crc' => 'setAudioDeviceToCrc',
        'audio_input' => 'setAudioInput',
        'audio_output' => 'setAudioOutput',
        'cpu_usage' => 'setCpuUsage',
        'date_time' => 'setDateTime',
        'video_device_from_crc' => 'setVideoDeviceFromCrc',
        'video_device_to_crc' => 'setVideoDeviceToCrc',
        'video_input' => 'setVideoInput',
        'video_output' => 'setVideoOutput'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'as_device_from_crc' => 'getAsDeviceFromCrc',
        'as_device_to_crc' => 'getAsDeviceToCrc',
        'as_input' => 'getAsInput',
        'as_output' => 'getAsOutput',
        'audio_device_from_crc' => 'getAudioDeviceFromCrc',
        'audio_device_to_crc' => 'getAudioDeviceToCrc',
        'audio_input' => 'getAudioInput',
        'audio_output' => 'getAudioOutput',
        'cpu_usage' => 'getCpuUsage',
        'date_time' => 'getDateTime',
        'video_device_from_crc' => 'getVideoDeviceFromCrc',
        'video_device_to_crc' => 'getVideoDeviceToCrc',
        'video_input' => 'getVideoInput',
        'video_output' => 'getVideoOutput'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['as_device_from_crc'] = $data['as_device_from_crc'] ?? null;
        $this->container['as_device_to_crc'] = $data['as_device_to_crc'] ?? null;
        $this->container['as_input'] = $data['as_input'] ?? null;
        $this->container['as_output'] = $data['as_output'] ?? null;
        $this->container['audio_device_from_crc'] = $data['audio_device_from_crc'] ?? null;
        $this->container['audio_device_to_crc'] = $data['audio_device_to_crc'] ?? null;
        $this->container['audio_input'] = $data['audio_input'] ?? null;
        $this->container['audio_output'] = $data['audio_output'] ?? null;
        $this->container['cpu_usage'] = $data['cpu_usage'] ?? null;
        $this->container['date_time'] = $data['date_time'] ?? null;
        $this->container['video_device_from_crc'] = $data['video_device_from_crc'] ?? null;
        $this->container['video_device_to_crc'] = $data['video_device_to_crc'] ?? null;
        $this->container['video_input'] = $data['video_input'] ?? null;
        $this->container['video_output'] = $data['video_output'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets as_device_from_crc
     *
     * @return \Zoom\Api\Model\QOSParticipantUserQosInnerAsDeviceFromCrc|null
     */
    public function getAsDeviceFromCrc()
    {
        return $this->container['as_device_from_crc'];
    }

    /**
     * Sets as_device_from_crc
     *
     * @param \Zoom\Api\Model\QOSParticipantUserQosInnerAsDeviceFromCrc|null $as_device_from_crc as_device_from_crc
     *
     * @return self
     */
    public function setAsDeviceFromCrc($as_device_from_crc)
    {
        $this->container['as_device_from_crc'] = $as_device_from_crc;

        return $this;
    }

    /**
     * Gets as_device_to_crc
     *
     * @return \Zoom\Api\Model\QOSParticipantUserQosInnerAsDeviceToCrc|null
     */
    public function getAsDeviceToCrc()
    {
        return $this->container['as_device_to_crc'];
    }

    /**
     * Sets as_device_to_crc
     *
     * @param \Zoom\Api\Model\QOSParticipantUserQosInnerAsDeviceToCrc|null $as_device_to_crc as_device_to_crc
     *
     * @return self
     */
    public function setAsDeviceToCrc($as_device_to_crc)
    {
        $this->container['as_device_to_crc'] = $as_device_to_crc;

        return $this;
    }

    /**
     * Gets as_input
     *
     * @return \Zoom\Api\Model\QOSVideo|null
     */
    public function getAsInput()
    {
        return $this->container['as_input'];
    }

    /**
     * Sets as_input
     *
     * @param \Zoom\Api\Model\QOSVideo|null $as_input as_input
     *
     * @return self
     */
    public function setAsInput($as_input)
    {
        $this->container['as_input'] = $as_input;

        return $this;
    }

    /**
     * Gets as_output
     *
     * @return \Zoom\Api\Model\QOSVideo|null
     */
    public function getAsOutput()
    {
        return $this->container['as_output'];
    }

    /**
     * Sets as_output
     *
     * @param \Zoom\Api\Model\QOSVideo|null $as_output as_output
     *
     * @return self
     */
    public function setAsOutput($as_output)
    {
        $this->container['as_output'] = $as_output;

        return $this;
    }

    /**
     * Gets audio_device_from_crc
     *
     * @return \Zoom\Api\Model\QOSParticipantUserQosInnerAudioDeviceFromCrc|null
     */
    public function getAudioDeviceFromCrc()
    {
        return $this->container['audio_device_from_crc'];
    }

    /**
     * Sets audio_device_from_crc
     *
     * @param \Zoom\Api\Model\QOSParticipantUserQosInnerAudioDeviceFromCrc|null $audio_device_from_crc audio_device_from_crc
     *
     * @return self
     */
    public function setAudioDeviceFromCrc($audio_device_from_crc)
    {
        $this->container['audio_device_from_crc'] = $audio_device_from_crc;

        return $this;
    }

    /**
     * Gets audio_device_to_crc
     *
     * @return \Zoom\Api\Model\QOSParticipantUserQosInnerAudioDeviceToCrc|null
     */
    public function getAudioDeviceToCrc()
    {
        return $this->container['audio_device_to_crc'];
    }

    /**
     * Sets audio_device_to_crc
     *
     * @param \Zoom\Api\Model\QOSParticipantUserQosInnerAudioDeviceToCrc|null $audio_device_to_crc audio_device_to_crc
     *
     * @return self
     */
    public function setAudioDeviceToCrc($audio_device_to_crc)
    {
        $this->container['audio_device_to_crc'] = $audio_device_to_crc;

        return $this;
    }

    /**
     * Gets audio_input
     *
     * @return \Zoom\Api\Model\QOSAudio|null
     */
    public function getAudioInput()
    {
        return $this->container['audio_input'];
    }

    /**
     * Sets audio_input
     *
     * @param \Zoom\Api\Model\QOSAudio|null $audio_input audio_input
     *
     * @return self
     */
    public function setAudioInput($audio_input)
    {
        $this->container['audio_input'] = $audio_input;

        return $this;
    }

    /**
     * Gets audio_output
     *
     * @return \Zoom\Api\Model\QOSAudio|null
     */
    public function getAudioOutput()
    {
        return $this->container['audio_output'];
    }

    /**
     * Sets audio_output
     *
     * @param \Zoom\Api\Model\QOSAudio|null $audio_output audio_output
     *
     * @return self
     */
    public function setAudioOutput($audio_output)
    {
        $this->container['audio_output'] = $audio_output;

        return $this;
    }

    /**
     * Gets cpu_usage
     *
     * @return \Zoom\Api\Model\QOSParticipantUserQosInnerCpuUsage|null
     */
    public function getCpuUsage()
    {
        return $this->container['cpu_usage'];
    }

    /**
     * Sets cpu_usage
     *
     * @param \Zoom\Api\Model\QOSParticipantUserQosInnerCpuUsage|null $cpu_usage cpu_usage
     *
     * @return self
     */
    public function setCpuUsage($cpu_usage)
    {
        $this->container['cpu_usage'] = $cpu_usage;

        return $this;
    }

    /**
     * Gets date_time
     *
     * @return \DateTime|null
     */
    public function getDateTime()
    {
        return $this->container['date_time'];
    }

    /**
     * Sets date_time
     *
     * @param \DateTime|null $date_time The QoS date and time.
     *
     * @return self
     */
    public function setDateTime($date_time)
    {
        $this->container['date_time'] = $date_time;

        return $this;
    }

    /**
     * Gets video_device_from_crc
     *
     * @return \Zoom\Api\Model\QOSParticipantUserQosInnerVideoDeviceFromCrc|null
     */
    public function getVideoDeviceFromCrc()
    {
        return $this->container['video_device_from_crc'];
    }

    /**
     * Sets video_device_from_crc
     *
     * @param \Zoom\Api\Model\QOSParticipantUserQosInnerVideoDeviceFromCrc|null $video_device_from_crc video_device_from_crc
     *
     * @return self
     */
    public function setVideoDeviceFromCrc($video_device_from_crc)
    {
        $this->container['video_device_from_crc'] = $video_device_from_crc;

        return $this;
    }

    /**
     * Gets video_device_to_crc
     *
     * @return \Zoom\Api\Model\QOSParticipantUserQosInnerVideoDeviceToCrc|null
     */
    public function getVideoDeviceToCrc()
    {
        return $this->container['video_device_to_crc'];
    }

    /**
     * Sets video_device_to_crc
     *
     * @param \Zoom\Api\Model\QOSParticipantUserQosInnerVideoDeviceToCrc|null $video_device_to_crc video_device_to_crc
     *
     * @return self
     */
    public function setVideoDeviceToCrc($video_device_to_crc)
    {
        $this->container['video_device_to_crc'] = $video_device_to_crc;

        return $this;
    }

    /**
     * Gets video_input
     *
     * @return \Zoom\Api\Model\QOSVideo|null
     */
    public function getVideoInput()
    {
        return $this->container['video_input'];
    }

    /**
     * Sets video_input
     *
     * @param \Zoom\Api\Model\QOSVideo|null $video_input video_input
     *
     * @return self
     */
    public function setVideoInput($video_input)
    {
        $this->container['video_input'] = $video_input;

        return $this;
    }

    /**
     * Gets video_output
     *
     * @return \Zoom\Api\Model\QOSVideo|null
     */
    public function getVideoOutput()
    {
        return $this->container['video_output'];
    }

    /**
     * Sets video_output
     *
     * @param \Zoom\Api\Model\QOSVideo|null $video_output video_output
     *
     * @return self
     */
    public function setVideoOutput($video_output)
    {
        $this->container['video_output'] = $video_output;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


