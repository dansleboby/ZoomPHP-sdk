<?php
/**
 * AccountSettingsScheduleMeetingTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zoom Meeting API
 *
 * The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.   All endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * AccountSettingsScheduleMeetingTest Class Doc Comment
 *
 * @category    Class
 * @description Account Settings: Schedule Meeting.
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class AccountSettingsScheduleMeetingTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "AccountSettingsScheduleMeeting"
     */
    public function testAccountSettingsScheduleMeeting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "audio_type"
     */
    public function testPropertyAudioType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enforce_login"
     */
    public function testPropertyEnforceLogin()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enforce_login_domains"
     */
    public function testPropertyEnforceLoginDomains()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enforce_login_with_domains"
     */
    public function testPropertyEnforceLoginWithDomains()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "force_pmi_jbh_password"
     */
    public function testPropertyForcePmiJbhPassword()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "host_video"
     */
    public function testPropertyHostVideo()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "jbh_time"
     */
    public function testPropertyJbhTime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "join_before_host"
     */
    public function testPropertyJoinBeforeHost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_password_requirement"
     */
    public function testPropertyMeetingPasswordRequirement()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "not_store_meeting_topic"
     */
    public function testPropertyNotStoreMeetingTopic()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "participant_video"
     */
    public function testPropertyParticipantVideo()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "personal_meeting"
     */
    public function testPropertyPersonalMeeting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "require_password_for_instant_meetings"
     */
    public function testPropertyRequirePasswordForInstantMeetings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "require_password_for_pmi_meetings"
     */
    public function testPropertyRequirePasswordForPmiMeetings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "require_password_for_scheduled_meetings"
     */
    public function testPropertyRequirePasswordForScheduledMeetings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "require_password_for_scheduling_new_meetings"
     */
    public function testPropertyRequirePasswordForSchedulingNewMeetings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "use_pmi_for_instant_meetings"
     */
    public function testPropertyUsePmiForInstantMeetings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "use_pmi_for_scheduled_meetings"
     */
    public function testPropertyUsePmiForScheduledMeetings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "always_display_zoom_meeting_as_topic"
     */
    public function testPropertyAlwaysDisplayZoomMeetingAsTopic()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hide_meeting_description"
     */
    public function testPropertyHideMeetingDescription()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "always_display_zoom_webinar_as_topic"
     */
    public function testPropertyAlwaysDisplayZoomWebinarAsTopic()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hide_webinar_description"
     */
    public function testPropertyHideWebinarDescription()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
